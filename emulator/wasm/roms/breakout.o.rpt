
; ******** Source: breakout.asm
     1                          ; Troy's HBC-56 - Breakout
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../kernel\hbc56kernel.inc
     1                          ; 6502 - HBC-56 Kernel Include file for user code
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../kernel\kernel.o.lmap
     1                          	HBC56_RST_VECTOR	= $fcb1	; ?
     2                          	AY_ENV_SHAPE_SAW1	= $8	; unused
     3                          	tmsConsoleBackspace	= $e9ca	; ?
     4                          	NES_RAM_SIZE	= $1
     5                          	UART_ZP_START	= $2a
     6                          	TMS_LT_RED	= $9	; unused
     7                          	UART_STATUS_RCVR_OVERRUN	= $20	; unused
     8                          	HBC56_TMP	= $7ccc
     9                          	lcdDisplayOff	= $ed82	; ?
    10                          	TILEMAP_SIZE	= $1
    11                          	KB_SCANCODE_ESC	= $76	; unused
    12                          	AY_ENV_SHAPE_SAW2	= $c	; unused
    13                          	TILEMAP_TMP_OUTPUT_ROW	= $7a83
    14                          	TMS_GFX_TILE_WIDTH	= $8
    15                          	lcdCurrentLine	= $eeb6	; ?
    16                          	LCD_RAM_END	= $7b82
    17                          	LCD_ZP_SIZE	= $2
    18                          	TMS_SPRITE_SIZE	= $8
    19                          	LCD_EXTENDED	= $3c	; ?
    20                          	KB_SCANCODE_ARROW_RIGHT	= $f4	; unused
    21                          	LCD_CMD_SHIFT_DISPLAY	= $8	; unused
    22                          	KB_CAPS_LOCK	= $8
    23                          	KB_EXT_KEY	= $e0
    24                          	VIA_RAM_SIZE	= $1
    25                          	HBC56_VSYNC_CALLBACK	= $7ce3
    26                          	isLower	= $e000
    27                          	TMS_R1_SPRITE_MAG2	= $1	; unused
    28                          	bitmapLineH	= $ea6d
    29                          	KB_BUFFER_MASK	= $f
    30                          	KB_SCANCODE_SLASH_FORWARD	= $4a	; unused
    31                          	AY_PORTB	= $f	; unused
    32                          	TMS_R1_RAM_16K	= $80
    33                          	lcdLineFour	= $ef7b	; ?
    34                          	lcdConsolePrint	= $f038	; unused
    35                          	AY_PORTA	= $e	; unused
    36                          	TMS_R1_SPRITE_MAG1	= $0	; unused
    37                          	TMS_FPS	= $3c
    38                          	lcdLineThreeEnd	= $ef0c	; ?
    39                          	kbInit	= $f24e
    40                          	VIA_TMP	= $7c82	; unused
    41                          	tmsSetAddressNextRow	= $e586	; unused
    42                          	START_BYTE	= $7b1f
    43                          	UART_IRQ_BIT	= $4
    44                          	tmsModeText	= $e644	; unused
    45                          	VIA_REG_IFR	= $d
    46                          	bitmapLineV	= $eafe
    47                          	_bitmapLineWide	= $eb8e	; ?
    48                          	lcdCharScroll	= $ede4
    49                          	LCD_CMD_SET_CGRAM_ADDR	= $40	; unused
    50                          	_tmsSendKb	= $e6a7	; unused
    51                          	UART_STATUS_RX_REG_FULL	= $1
    52                          	tmsReg1SetFields	= $e5e5
    53                          	BITMAP_ZP_START	= $1e
    54                          	BITMAP_LINE_STYLE_ODD	= $7b1e
    55                          	END_BYTE	= $7b20
    56                          	JMP_OPCODE	= $4c
    57                          	hbc56IntHandler	= $fc2a
    58                          	TILEMAP_RAM_START	= $7a00
    59                          	KB_SCANCODE_SCROLL_LOCK	= $7e	; unused
    60                          	KB_RAM_END	= $7cc6
    61                          	AY_ENV_SHAPE_HOLD	= $1
    62                          	TMS_R0_MODE_GRAPHICS_II	= $2
    63                          	TILEMAP_ADDR	= $18
    64                          	KB_SHIFT_LEFT_MAP_BYTE	= $2
    65                          	VIA_IO_ADDR_IFR	= $7ffd	; unused
    66                          	TILEMAP_SIZE_Y_8	= $0
    67                          	VIA_IO_ADDR_T1C_H	= $7ff5	; unused
    68                          	MEMORY_ZP_END	= $34
    69                          	TMS_R1_SPRITE_8	= $0	; unused
    70                          	VIA_REG_T1L_H	= $7
    71                          	BITMAP_X	= $7b17
    72                          	BITMAP_Y	= $7b18
    73                          	KB_SCANCODE_PRTSCR	= $92	; unused
    74                          	LCD_BASIC	= $38	; ?	; unused
    75                          	KB_SCANCODE_SLASH_BACK	= $5d	; unused
    76                          	VIA_IO_ADDR_T1C_L	= $7ff4	; unused
    77                          	TILEMAP_SIZE_X_64	= $2
    78                          	AY_WRITE	= $1
    79                          	UART_STATUS_CARRIER_DETECT	= $4	; unused
    80                          	VIA_REG_T1L_L	= $6
    81                          	KB_PRESSED_MAP	= $7ca0
    82                          	TMS9918_ZP_START	= $24
    83                          	tmsDecPosConsole	= $e8c4
    84                          	UART_CTL_WORD_8BIT_1SB	= $14	; unused
    85                          	HBC56_CONSOLE_FLAG_LCD	= $20	; unused
    86                          	TMS_CYAN	= $7
    87                          	ASCII_NEWLINE	= $a
    88                          	HBC56_TITLE	= $f523
    89                          	memcpyMultiPage	= $e0bf	; unused
    90                          	LCD_ROWS	= $4
    91                          	KB_SCANCODE_NUM_LOCK	= $77	; unused
    92                          	TILEMAP_RAM_END	= $7b16
    93                          	lcdGraphicsMode	= $ec91
    94                          	VIA_DIR_OUTPUT	= $ff	; unused
    95                          	TILEMAP_ZP_SIZE	= $6
    96                          	lcdPrint	= $edc1
    97                          	KB_BUFFER_TAIL	= $7c8f
    98                          	tmsSetRegister	= $e5bc
    99                          	hbc56Tms9918Int	= $fc5b	; ?
   100                          	lcdGotoLineEnd	= $eeb9	; ?
   101                          	KB_SCANCODE_NUMPAD_ENTER	= $da	; unused
   102                          	TILEMAP_FIXED_ADDRESS	= $7b00
   103                          	UART_STATUS_TX_REG_EMPTY	= $2
   104                          	UART_RX_BUFFER_XOFF_SIZE	= $c0
   105                          	KB_FLAGS	= $7c86
   106                          	lcdGotoLine	= $ef50	; ?
   107                          	HBC56_NMI_VECTOR	= $7e04
   108                          	KB_SCANCODE_SQUARE_LEFT	= $54	; unused
   109                          	LCD_CMD_SHIFT_CURSOR	= $0	; unused
   110                          	lcdRead	= $edba
   111                          	BITMAP_ZP_END	= $24
   112                          	lcdLineOne	= $ef63	; ?
   113                          	UART_CTL_CLOCK_DIV_64	= $2
   114                          	toUpper	= $e06b	; unused
   115                          	VIA_IO_ADDR	= $7ff0
   116                          	tableBitsFromLeft	= $e150	; unused
   117                          	LCD_CMD_ENTRY_MODE	= $4	; unused
   118                          	NES_TMP	= $7cc6	; unused
   119                          	HBC56_META_TITLE_END	= $7ce1
   120                          	uartFlowCtrlXoff	= $f1d7	; ?
   121                          	SFXMAN_RAM_START	= $7c83
   122                          	uartInWait	= $f1e0
   123                          	uartOutString	= $f224	; unused
   124                          	RTI_OPCODE	= $40
   125                          	KB_SCANCODE_PAGE_UP	= $fd	; unused
   126                          	AY_ENV_SHAPE_FADE_OUT	= $9	; unused
   127                          	LINE_WIDTH	= $7b1f
   128                          	lcdReadLine	= $efa2
   129                          	TMS_VRAM_SPRITE_ATTR_ADDRESS	= $3b00
   130                          	LCD_CMD_SET_DRAM_ADDR	= $80
   131                          	NOTE_FREQ_AS8	= 7458.619999999999890860635787248611	; unused
   132                          	HBC56_TMP_Y	= $7ccf
   133                          	KB_SCANCODE_TILDE	= $e	; unused
   134                          	HBC56_TITLE_LEN	= $1a
   135                          	UART_IO_PORT	= $20
   136                          	TMS9918_RAM_END	= $7b58
   137                          	AY_S0_ADDR	= $7f40	; unused
   138                          	TMS9918_ZP_SIZE	= $2
   139                          	HBC56_TMP_X	= $7cce
   140                          	NOTE_FREQ_AS5	= 932.330000000000040927261579781771	; unused
   141                          	TMS_MED_GREEN	= $2	; unused
   142                          	TMS_WHITE	= $f
   143                          	LCD_CMD_DISPLAY_CURSOR_BLINK	= $1
   144                          	LCD_ADDR_LINE2	= $10
   145                          	KB_SCANCODE_WINDOWS_RIGHT	= $a7	; unused
   146                          	HBC56_KERNEL_ZP_END	= $38
   147                          	AY_S1_WRITE	= $7f45	; unused
   148                          	NOTE_FREQ_AS4	= 466.160000000000025011104298755527	; unused
   149                          	LCD_CMD_SHIFT	= $10
   150                          	VIA_REG_DDR_B	= $2
   151                          	LCD_ADDR_LINE3	= $8
   152                          	NOTE_FREQ_AS7	= 3729.309999999999945430317893624306	; unused
   153                          	TMS_TMP_ADDRESS	= $24
   154                          	KB_SCANCODE_PERIOD	= $49	; unused
   155                          	VIA_REG_DDR_A	= $3
   156                          	tableBitFromLeft	= $e130
   157                          	NOTE_FREQ_AS6	= 1864.660000000000081854523159563541	; unused
   158                          	LCD_ADDR_LINE1	= $0
   159                          	AY_NOISE_GEN	= $6	; unused
   160                          	NOTE_FREQ_AS1	= 58.270000000000003126388037344441	; unused
   161                          	BITMAP_X2	= $7b19
   162                          	AY_S0_WRITE	= $7f41	; unused
   163                          	NOTE_FREQ_AS0	= 29.140000000000000568434188608080	; unused
   164                          	tmsSetAddressRead	= $e5a8
   165                          	VIA_RAM_START	= $7c82
   166                          	LCD_CMD_CLEAR	= $1
   167                          	NOTE_FREQ_AS3	= 233.080000000000012505552149377763	; unused
   168                          	UART_RX_BUFFER_TAIL	= $2b
   169                          	tmsSetPatternRead	= $e941	; unused
   170                          	LCD_ADDR_LINE4	= $18
   171                          	AY_S1_ADDR	= $7f44	; unused
   172                          	NOTE_FREQ_AS2	= 116.540000000000006252776074688882	; unused
   173                          	BITMAP_X1	= $7b17
   174                          	UART_RX_BUFFER	= $7b82
   175                          	TMS_R1_SPRITE_16	= $2	; unused
   176                          	TMS_GFX_PIXELS_Y	= $c0	; unused
   177                          	TMS_GFX_PIXELS_X	= $100	; unused
   178                          	KB_SCANCODE_NUMPAD_MULTIPLY	= $7c	; unused
   179                          	HBC56_DISABLE_SFXMAN	= $1
   180                          	tmsSetAddressWrite	= $e592
   181                          	D	= $7b24
   182                          	TMS_MAGENTA	= $d	; unused
   183                          	LCD_GRAPHICS	= $1
   184                          	LCD_IO_PORT	= $2
   185                          	tmsConsoleScrollLine	= $e82f
   186                          	KB_SCANCODE_CTRL_RIGHT	= $94	; unused
   187                          	_tmsSendEmptyPage	= $e6e6
   188                          	HAVE_GRAPHICS_LCD	= $1
   189                          	KB_BUFFER_SIZE	= $10
   190                          	KB_SCANCODE_COMMA	= $41	; unused
   191                          	HBC56_TITLE_TEXT	= $f523
   192                          	AY_R10	= $a
   193                          	BITMAP_TMP1	= $7b1f
   194                          	LCD_CMD_12864B_EXTENDED	= $4
   195                          	AY_IO_PORT	= $40
   196                          	AY_R11	= $b
   197                          	NES_LEFT	= $2	; unused
   198                          	AY_R12	= $c
   199                          	TMS_R1_DISP_BLANK	= $0	; unused
   200                          	LCD_RAM_SIZE	= $2a
   201                          	KB_NUM_LOCK	= $10	; unused
   202                          	BITMAP_TMP3	= $7b21
   203                          	hbc56LogoPatt	= $f942
   204                          	kernelMain	= $fcb1	; ?
   205                          	AY_R13	= $d
   206                          	hbc56LogoPattEnd	= $faba	; unused
   207                          	BITMAP_TMP2	= $7b20
   208                          	tilemapSetActive	= $f0bd	; ?
   209                          	ASCII_CR	= $d
   210                          	AY_R14	= $e
   211                          	KB_SCANCODE_PAGE_DOWN	= $fa	; unused
   212                          	BITMAP_TMP5	= $7b23
   213                          	kbIntHandler	= $f289
   214                          	IO_PORT_BASE_ADDRESS	= $7f00
   215                          	AY_R15	= $f
   216                          	BITMAP_TMP4	= $7b22
   217                          	isDigit	= $e01e
   218                          	AY_R16	= $10	; unused
   219                          	HAVE_TMS9918	= $1
   220                          	UART_CTL_MASTER_RESET	= $3
   221                          	AY_R17	= $11	; unused
   222                          	BITMAP_TMP6	= $7b24
   223                          	KB_SCANCODE_TAB	= $d	; unused
   224                          	HBC56_KERNEL_ZP_START	= $18
   225                          	TMS9918_IRQ_BIT	= $1
   226                          	HBC56_BORDER	= $4
   227                          	TMS_R1_MODE_MULTICOLOR	= $8
   228                          	lcdTextMode	= $eca2
   229                          	TMS_R0_MODE_MULTICOLOR	= $0
   230                          	lcdNextLine2	= $ef95	; unused
   231                          	TMS_DK_BLUE	= $4
   232                          	LCD_CMD_DISPLAY_CURSOR	= $2
   233                          	lcdClear	= $ed67	; ?
   234                          	TMS_VRAM_SPRITE_PATT_ADDRESS	= $1800
   235                          	lcdNextLine4	= $ef83
   236                          	HBC56_CONSOLE_FLAG_NOWAIT	= $10
   237                          	lcdGraphicsSetRow	= $ecb3
   238                          	KB_SCANCODE_ENTER	= $5a	; unused
   239                          	KB_IO_PORT	= $80
   240                          	AY_ENV_SHAPE_ATTACK	= $4
   241                          	UART_STATUS_IRQ	= $80	; unused
   242                          	X	= $7b21
   243                          	TILEMAP_INVERT_ADDR	= $3
   244                          	NES_DOWN	= $4	; unused
   245                          	tmsReg1ClearFields	= $e5ef
   246                          	Y	= $7b21
   247                          	NES_SELECT	= $20	; unused
   248                          	LCD_CMD_ENTRY_MODE_SHIFT	= $1	; unused
   249                          	TILEMAP_RAM_SIZE	= $107
   250                          	hbc56Stop	= $fe67
   251                          	lcdChar	= $eddd
   252                          	lcdInt8	= $ee35	; unused
   253                          	UART_RX_BUFFER_SIZE	= $100
   254                          	KB_BUFFER	= $7c90
   255                          	DEFAULT_HBC56_NMI_VECTOR	= $ffe0	; unused
   256                          	COL_BYTE	= $7b1f
   257                          	HAVE_TILEMAP	= $1	; unused
   258                          	TILEMAP_HEIGHT_TILES	= $6
   259                          	NES1_IO_ADDR	= $7f82
   260                          	lcdDetect	= $eda6
   261                          	UART_CTL_WORD_7BIT_OPB_1SB	= $c	; unused
   262                          	KB_SCANCODE_NUMPAD_PLUS	= $79	; unused
   263                          	NES2_IO_ADDR	= $7f83
   264                          	BITMAP_RAM_END	= $7b26
   265                          	BITMAP_ZP_SIZE	= $4
   266                          	KB_SCANCODE_F2	= $6	; unused
   267                          	lcdCursorBlinkOn	= $ed9d
   268                          	HBC56_TITLE_TEXT_LEN	= $1a
   269                          	lcdConsoleOut	= $f012
   270                          	NES_UP	= $8	; unused
   271                          	KB_SCANCODE_F3	= $4	; unused
   272                          	VIA_DIR_INPUT	= $0	; unused
   273                          	DELAY_L	= $36
   274                          	TMS_TXT_TILES_X	= $28
   275                          	ASCII_BACKSPACE	= $8
   276                          	TMS_TXT_TILES_Y	= $18
   277                          	KB_SCANCODE_F1	= $5	; unused
   278                          	KB_SCANCODE_SEMICOLON	= $4c	; unused
   279                          	c	= $20
   280                          	KB_SCANCODE_F6	= $b	; unused
   281                          	TMS_R1_DISP_ACTIVE	= $40
   282                          	tmsInitColorTable	= $e756
   283                          	KB_SCANCODE_F7	= $83	; unused
   284                          	KB_SCANCODE_HOME	= $ec	; unused
   285                          	DELAY_H	= $37
   286                          	KB_SCANCODE_F4	= $c	; unused
   287                          	tmsSetPosTmpAddress	= $e7ed
   288                          	uartInNoWait	= $f1ea	; unused
   289                          	hbc56Reset	= $fe64	; unused
   290                          	KB_SCANCODE_F5	= $3	; unused
   291                          	hbc56CustomDelayMs	= $fe6b	; unused
   292                          	lcdLineThree	= $ef73	; ?
   293                          	_tmsWaitReg	= $e582
   294                          	uartOut	= $f20d	; ?
   295                          	KB_TMP_X	= $7c87
   296                          	KB_SCANCODE_F8	= $a	; unused
   297                          	hbc56LogoLcd	= $f800
   298                          	HBC56_KERNEL_RAM_START	= $7a00
   299                          	KB_TMP_Y	= $7c88	; unused
   300                          	KB_SCANCODE_F9	= $1	; unused
   301                          	tmsConsolePrint	= $e993	; unused
   302                          	lcdLineTwo	= $ef6b	; ?
   303                          	TILEMAP_BUFFER_ADDR	= $0
   304                          	uartIrq	= $f1a8
   305                          	TMS_BLACK	= $1
   306                          	TILEMAP_WIDTH_TILES	= $5
   307                          	HAVE_LCD	= $1
   308                          	HBC56_META_TITLE	= $7cd0
   309                          	KB_SCANCODE_SQUARE_RIGHT	= $5b	; unused
   310                          	tmsConsoleNewline	= $e9a3	; ?
   311                          	LCD_CMD_8BITMODE	= $10
   312                          	AY_S1	= $7f44
   313                          	NOTE_FREQ_C8	= 4186.010000000000218278728425502777	; unused
   314                          	KB_IRQ_BIT	= $2
   315                          	tmsModeGraphicsII	= $e623	; unused
   316                          	AY_S0	= $7f40
   317                          	NOTE_FREQ_A8	= $1b80	; unused
   318                          	HBC56_TICKS	= $7cc9
   319                          	HBC56_SECONDS_H	= $7ccb
   320                          	memcpySinglePage	= $e0a3	; unused
   321                          	tmsModeGraphicsI	= $e610
   322                          	NOTE_FREQ_G8	= 6271.930000000000291038304567337036	; unused
   323                          	AY_ADDR	= $0
   324                          	NOTE_FREQ_E8	= 5274.039999999999963620211929082870	; unused
   325                          	TMS_R1_RAM_4K	= $0	; unused
   326                          	AY_ENV_SHAPE_ALTERNATE	= $2
   327                          	NOTE_FREQ_DS8	= 4978.029999999999745341483503580093	; unused
   328                          	tmsInitEntireColorTable	= $e754	; ?
   329                          	TILEMAP_TMP_BUFFER_ADDR	= $1a
   330                          	TMS_GREY	= $e
   331                          	NES_B	= $40	; unused
   332                          	HBC56_SECONDS_L	= $7cca
   333                          	AY_PSG1	= $4
   334                          	UART_CTL_WORD_7BIT_EPB_1SB	= $8	; unused
   335                          	NES_A	= $80	; unused
   336                          	LCD_COLUMNS	= $10
   337                          	TMS9918_IO_PORT	= $10
   338                          	UART_RAM_END	= $7c82
   339                          	AY_PSG0	= $0
   340                          	UART_FLOWCTRL_XON	= $11
   341                          	LCD_CMD_FUNCTIONSET	= $20
   342                          	DEFAULT_HBC56_RST_VECTOR	= $8000
   343                          	NOTE_FREQ_C0	= 16.350000000000001421085471520200	; unused
   344                          	NOTE_FREQ_A1	= $37	; unused
   345                          	NOTE_FREQ_G2	= $62	; unused
   346                          	NOTE_FREQ_E3	= 164.810000000000002273736754432321
   347                          	NOTE_FREQ_DS4	= 311.129999999999995452526491135359	; unused
   348                          	KB_SCANCODE_CTRL_LEFT	= $14	; unused
   349                          	lcdImageVflip	= $ed0e	; unused
   350                          	TILE_SIZE	= $8	; unused
   351                          	NOTE_FREQ_A0	= 27.500000000000000000000000000000	; unused
   352                          	NOTE_FREQ_E2	= 82.409999999999996589394868351519	; unused
   353                          	NOTE_FREQ_DS5	= 622.250000000000000000000000000000	; unused
   354                          	tmsReg0ClearFields	= $e5dd
   355                          	LCD_CMD_HOME	= $2
   356                          	UART_STATUS_CLEAR_TO_SEND	= $8	; unused
   357                          	NOTE_FREQ_G3	= $c4	; unused
   358                          	NOTE_FREQ_C1	= 32.700000000000002842170943040401	; unused
   359                          	NOTE_FREQ_G0	= 24.500000000000000000000000000000	; unused
   360                          	NOTE_FREQ_E1	= 41.200000000000002842170943040401	; unused
   361                          	NOTE_FREQ_DS6	= 1244.509999999999990905052982270718	; unused
   362                          	UART_DATA	= $7f21
   363                          	VIA_IO_ADDR_T2C_H	= $7ff9	; unused
   364                          	NOTE_FREQ_C2	= 65.409999999999996589394868351519	; unused
   365                          	NOTE_FREQ_A3	= $dc	; unused
   366                          	NOTE_FREQ_E0	= 20.600000000000001421085471520200	; unused
   367                          	NOTE_FREQ_DS7	= 2489.019999999999981810105964541435	; unused
   368                          	TMS9918_TMP_BUFFER	= $7b30
   369                          	NOTE_FREQ_G1	= $31	; unused
   370                          	NOTE_FREQ_A2	= $6e	; unused
   371                          	NOTE_FREQ_C3	= 130.810000000000002273736754432321	; unused
   372                          	UART_ZP_END	= $2e
   373                          	NOTE_FREQ_DS0	= 19.449999999999999289457264239900	; unused
   374                          	NOTE_FREQ_C4	= 261.629999999999995452526491135359	; unused
   375                          	NOTE_FREQ_A5	= $370	; unused
   376                          	NOTE_FREQ_G6	= 1567.980000000000018189894035458565	; unused
   377                          	NOTE_FREQ_E7	= 2637.019999999999981810105964541435	; unused
   378                          	NOTE_FREQ_DS1	= 38.890000000000000568434188608080	; unused
   379                          	HAVE_KEYBOARD	= $1
   380                          	NOTE_FREQ_A4	= $1b8	; unused
   381                          	NOTE_FREQ_E6	= 1318.509999999999990905052982270718	; unused
   382                          	_bitmapLineTall	= $ebdf	; ?
   383                          	hbc56HighBell	= $fde5	; ?
   384                          	NOTE_FREQ_G7	= 3135.960000000000036379788070917130	; unused
   385                          	NOTE_FREQ_C5	= 523.250000000000000000000000000000	; unused
   386                          	tmsConsoleHome	= $e8e1	; unused
   387                          	_bitmapOffset	= $ea1f
   388                          	NOTE_FREQ_DS2	= 77.780000000000001136868377216160	; unused
   389                          	NOTE_FREQ_G4	= $188	; unused
   390                          	NOTE_FREQ_E5	= 659.250000000000000000000000000000	; unused
   391                          	VIA_IO_ADDR_T2C_L	= $7ff8	; unused
   392                          	NOTE_FREQ_C6	= 1046.500000000000000000000000000000	; unused
   393                          	NOTE_FREQ_A7	= $dc0	; unused
   394                          	BCD_RAM_START	= $7c83
   395                          	HBC56_META_TITLE_MAX_LEN	= $10
   396                          	isDigitX	= $e030	; unused
   397                          	NOTE_FREQ_DS3	= 155.560000000000002273736754432321	; unused
   398                          	NOTE_FREQ_E4	= 329.629999999999995452526491135359	; unused
   399                          	NOTE_FREQ_G5	= 783.990000000000009094947017729282	; unused
   400                          	NOTE_FREQ_A6	= $6e0	; unused
   401                          	NOTE_FREQ_C7	= $82d	; unused
   402                          	VIA_RAM_END	= $7c83
   403                          	AY_INACTIVE	= $3	; unused
   404                          	TMS_SPRITE_SIZE2X	= $10	; unused
   405                          	tmsSetPosWriteText	= $e8fa	; ?
   406                          	KB_SCANCODE_F11	= $78	; unused
   407                          	AY_S0_READ	= $7f42	; unused
   408                          	tmsInitTextTable	= $e739	; ?
   409                          	LCD_TMP2	= $29
   410                          	lcdCursorOn	= $ed8b	; unused
   411                          	KB_SCANCODE_F10	= $9	; unused
   412                          	VIA_REG_PORT_A	= $1
   413                          	LCD_TMP1	= $28
   414                          	KB_SCANCODE_NUMPAD_PERIOD	= $71	; unused
   415                          	VIA_REG_PORT_B	= $0
   416                          	KB_SCANCODE_F12	= $7	; unused
   417                          	kbNextScancode	= $f3a7
   418                          	lcdBackspace	= $ee01
   419                          	KB_SCANCODE_WINDOWS_LEFT	= $9f	; unused
   420                          	BCD_RAM_END	= $7c86
   421                          	ASCII_RETURN	= $a
   422                          	lcdWaitPreserve	= $edb4
   423                          	TILEMAP_TILES_ADDR	= $2
   424                          	tilemapRenderToLcd	= $f0fa	; unused
   425                          	LCD_CMD_DISPLAY	= $8
   426                          	TILEMAP_TMP_TILE_SIZE	= $7a88
   427                          	TMS_R1_INT_ENABLE	= $20
   428                          	lcdLineOneEnd	= $eec8	; ?
   429                          	bitmapLine	= $eb47	; unused
   430                          	UART_CTL_WORD_8BIT_OPAR_1SB	= $1c	; unused
   431                          	isSpace	= $e049	; unused
   432                          	hbc56BootScreen	= $faba
   433                          	AY_S1_READ	= $7f46	; unused
   434                          	KB_SCANCODE_END	= $e9	; unused
   435                          	TMS_GFX_TILE_HEIGHT	= $8
   436                          	KB_SCANCODE_SHIFT_RIGHT	= $59
   437                          	TMS_LT_BLUE	= $5	; unused
   438                          	TMS_R0_EXT_VDP_ENABLE	= $1	; unused
   439                          	TILEMAP_STRUCTURE_SIZE	= $7
   440                          	uartOutNoBsCheck	= $f213	; ?
   441                          	KB_SCANCODE_ALT_LEFT	= $11	; unused
   442                          	lcdLineTwoEnd	= $eeea	; ?
   443                          	HBC56_INT_VECTOR	= $7e00
   444                          	LINE_HEIGHT	= $7b20
   445                          	VIA_REG_IER	= $e
   446                          	tmsIncPosConsole	= $e8a3
   447                          	INT_IO_PORT	= $df
   448                          	KB_PRESSED_MAP_BYTES	= $20
   449                          	VIA_REG_ACR	= $b
   450                          	STR_ADDR_H	= $35
   451                          	NES_RAM_END	= $7cc9
   452                          	memsetSinglePage	= $e101
   453                          	TMS_FONT_DATA	= $e271
   454                          	kbWaitForScancode	= $f392
   455                          	LCD_CMD_SHIFT_LEFT	= $0
   456                          	tmsReg0SetFields	= $e5d3
   457                          	tmsPrint	= $e947
   458                          	KB_SCANCODE_APOS	= $52	; unused
   459                          	STR_ADDR_L	= $34
   460                          	tmsSetPosConsole	= $e8e7
   461                          	KB_SHIFT_RIGHT_MAP_BYTE	= $b
   462                          	AY_CLOCK_FREQ	= $1e8480
   463                          	tmsSetBackground	= $e5cf
   464                          	BITMAP_ADDR_H	= $20
   465                          	TMS_R1_MODE_GRAPHICS_II	= $0
   466                          	UART_RX_BUFFER_XON_SIZE	= $4
   467                          	VIA_IO_ADDR_ACR	= $7ffb	; unused
   468                          	uartFlowCtrlXon	= $f1cc	; ?
   469                          	TILEMAP_SIZE_X_32	= $1
   470                          	VIA_IO_ADDR_IER	= $7ffe	; unused
   471                          	ASCII_BELL	= $7	; unused
   472                          	BCD_TMP3	= $7c85
   473                          	TMS_MED_RED	= $8	; unused
   474                          	DISPLAY_MODE	= $c
   475                          	UART_CTL_WORD_8BIT_EPAR_1SB	= $18	; unused
   476                          	BCD_TMP2	= $7c84
   477                          	LCD_ZP_END	= $2a
   478                          	toLower	= $e073	; unused
   479                          	BCD_TMP1	= $7c83
   480                          	MEM_SRC	= $30
   481                          	AY_ENABLES	= $7
   482                          	lcdWait	= $edae	; ?
   483                          	UART_CTL_WORD_7BIT_OPB_2SB	= $4	; unused
   484                          	lcdInit	= $ed55
   485                          	LCD_RAM_START	= $7b58
   486                          	TMS_LT_GREEN	= $3	; unused
   487                          	_tmsWaitData	= $e579
   488                          	TILEMAP_SIZE_X_16	= $0
   489                          	HAVE_MATH_INC	= $1
   490                          	TILEMAP_TMP_TILES_W	= $7a86
   491                          	KB_SCANCODE_B	= $32	; unused
   492                          	hbc56Bell	= $fe17	; unused
   493                          	KB_SCANCODE_C	= $21	; unused
   494                          	TMS_TXT_PIXELS_X	= $f0	; unused
   495                          	lcdCursorOff	= $ed94
   496                          	HBC56_KERNEL_RAM_SIZE	= $2e7	; unused
   497                          	TMS_TXT_PIXELS_Y	= $c0	; unused
   498                          	lcdLineFourEnd	= $ef2e	; ?
   499                          	KB_SCANCODE_A	= $1c	; unused
   500                          	TMS_GFX_TILES_Y	= $18
   501                          	KB_PRESSED_MAP_SIZE	= $fe	; unused
   502                          	KB_SCANCODE_F	= $2b	; unused
   503                          	kbIsPressed	= $f375	; unused
   504                          	TMS_R0_MODE_TEXT	= $0
   505                          	TMS_GFX_TILES_X	= $20
   506                          	TILEMAP_DIRTY_ADDR	= $4
   507                          	KB_SCANCODE_G	= $34	; unused
   508                          	TMS_R0_MODE_GRAPHICS_I	= $0
   509                          	tmsSetSpriteTmpAddress	= $e7e4	; unused
   510                          	bitmapClear	= $e9e0	; unused
   511                          	KB_CB_RELEASED	= $7c8b
   512                          	KB_SCANCODE_D	= $23	; unused
   513                          	TMS_R1_MODE_GRAPHICS_I	= $0
   514                          	KB_SCANCODE_E	= $24	; unused
   515                          	TILEMAP_ZP_START	= $18
   516                          	KB_SHIFT_DOWN	= $1	; unused
   517                          	KB_SCANCODE_J	= $3b	; unused
   518                          	KB_CB_PRESSED	= $7c89
   519                          	KB_SCANCODE_K	= $42	; unused
   520                          	KB_SHIFT_RIGHT_MAP_BIT	= $40
   521                          	HBC56_CONSOLE_FLAGS	= $7ccd
   522                          	AY_ENV_SHAPE	= $d
   523                          	LCD_CMD_ENTRY_MODE_DECREMENT	= $0	; unused
   524                          	KB_SCANCODE_H	= $33	; unused
   525                          	kbReadAscii	= $f40f	; unused
   526                          	KB_BUFFER_HEAD	= $7c8e
   527                          	KB_SCANCODE_I	= $43	; unused
   528                          	viaIntHandler	= $f520
   529                          	KB_SCANCODE_N	= $31	; unused
   530                          	tmsTileXyAtPixelXy	= $e7aa	; unused
   531                          	UART_CTL_CLOCK_DIV_16	= $1	; unused
   532                          	nesWaitForPress	= $f231
   533                          	hbc56LogoInd	= $f900
   534                          	KB_SCANCODE_O	= $44	; unused
   535                          	memcpyMultiPagePort	= $e0e1	; unused
   536                          	KB_SCANCODE_L	= $4b	; unused
   537                          	bin2bcd8	= $e07b	; unused
   538                          	KB_SCANCODE_M	= $3a	; unused
   539                          	KB_SCANCODE_ARROW_UP	= $f5	; unused
   540                          	lcdCurrentLine2	= $eea9	; unused
   541                          	UART_RX_BUFFER_HEAD	= $2a
   542                          	KB_SCANCODE_R	= $2d	; unused
   543                          	_tmsSendPage	= $e6b0	; ?
   544                          	LCD_CMD_ENTRY_MODE_INCREMENT	= $2	; unused
   545                          	tmsSetPosWrite	= $e8ed	; unused
   546                          	KB_SCANCODE_S	= $1b	; unused
   547                          	hbc56FontLcd	= $f600
   548                          	tilemapRenderRowToLcd	= $f0d3
   549                          	KB_SCANCODE_P	= $4d	; unused
   550                          	TMS_DK_RED	= $6	; unused
   551                          	LCD_CMD_SHIFT_RIGHT	= $4	; unused
   552                          	TILEMAP_TMP_BUF_ROW	= $7a80
   553                          	KB_SCANCODE_Q	= $15	; unused
   554                          	NOTE_FREQ_GS8	= 6644.880000000000109139364212751389	; unused
   555                          	BITMAP_LINE_STYLE	= $7b1d
   556                          	KB_CURRENT_STATE	= $7c8d
   557                          	KB_SCANCODE_V	= $2a	; unused
   558                          	NOTE_FREQ_CS8	= 4434.920000000000072759576141834259	; unused
   559                          	KB_SCANCODE_W	= $1d	; unused
   560                          	HBC56_CONSOLE_FLAG_NES	= $40
   561                          	lcdCurrentLine4	= $ee94
   562                          	UART_CTL_WORD_7BIT_EPB_2SB	= $0	; unused
   563                          	kbScancodeToAscii	= $f3bc
   564                          	LCD_CMD	= $7f02
   565                          	KB_SCANCODE_T	= $2c	; unused
   566                          	KB_SHIFT_LEFT_MAP_BIT	= $20
   567                          	TMS_TRANSPARENT	= $0	; unused
   568                          	TILEMAP_TMP_TILES_ADDR	= $1c
   569                          	KB_SCANCODE_U	= $3c	; unused
   570                          	SFXMAN_RAM_END	= $7c83
   571                          	NOTE_FREQ_GS4	= 415.300000000000011368683772161603	; unused
   572                          	tmsSendBytes	= $e6ea
   573                          	NOTE_FREQ_CS5	= 554.370000000000004547473508864641	; unused
   574                          	VIA_REG_T2C_H	= $9
   575                          	lcdHex8	= $ee6b	; unused
   576                          	KB_SCANCODE_Z	= $1a	; unused
   577                          	LCD_ZP_START	= $28
   578                          	NOTE_FREQ_CS4	= 277.180000000000006821210263296962	; unused
   579                          	NOTE_FREQ_GS5	= 830.610000000000013642420526593924	; unused
   580                          	KB_SCANCODE_MINUS	= $4e	; unused
   581                          	isUpper	= $e00c
   582                          	TMS_VRAM_NAME_ADDRESS	= $3800
   583                          	UART_IRQ	= $3
   584                          	NES_RAM_START	= $7cc6
   585                          	LCD_CMD_2LINE	= $8
   586                          	NOTE_FREQ_GS6	= 1661.220000000000027284841053187847	; unused
   587                          	NOTE_FREQ_CS7	= 2217.460000000000036379788070917130	; unused
   588                          	KB_SCANCODE_X	= $22	; unused
   589                          	KB_SCANCODE_PAUSE	= $e1
   590                          	KB_IO_ADDR	= $7f80
   591                          	TILEMAP_SIZE_Y_32	= $8
   592                          	memcpySinglePagePort	= $e0b1	; unused
   593                          	NOTE_FREQ_CS6	= 1108.730000000000018189894035458565	; unused
   594                          	NOTE_FREQ_GS7	= 3322.440000000000054569682106375694	; unused
   595                          	TMS_REGISTER_DATA	= $e571
   596                          	TMS_MODEL	= $26be
   597                          	KB_SCANCODE_Y	= $35	; unused
   598                          	NOTE_FREQ_GS0	= 25.960000000000000852651282912120	; unused
   599                          	NOTE_FREQ_CS1	= 34.649999999999998578914528479800	; unused
   600                          	HAVE_BITMAP	= $1	; unused
   601                          	BITMAP_Y2	= $7b1a
   602                          	bitmapFilledRect	= $ec59	; unused
   603                          	VIA_REG_T2C_L	= $8
   604                          	ROM_BANK_REG	= $8	; unused
   605                          	HBC56_USER_ZP_START	= $38	; unused
   606                          	NOTE_FREQ_CS0	= 17.320000000000000284217094304040	; unused
   607                          	NOTE_FREQ_GS1	= 51.909999999999996589394868351519	; unused
   608                          	LCD_CMD_EXT_GRAPHICS_ENABLE	= $2
   609                          	UART_CTL_RX_INT_ENABLE	= $80
   610                          	KB_SCANCODE_CAPS_LOCK	= $58
   611                          	tableInvBitFromRight	= $e148	; unused
   612                          	tmsInitPattTable	= $e6f9	; ?
   613                          	TMS9918_IRQ	= $1
   614                          	HBC56_CONSOLE_FLAG_CURSOR	= $80	; unused
   615                          	NOTE_FREQ_GS2	= 103.829999999999998294697434175760	; unused
   616                          	NOTE_FREQ_CS3	= 138.590000000000003410605131648481	; unused
   617                          	tmsModeMulticolor	= $e657	; unused
   618                          	NOTE_FREQ_CS2	= 69.299999999999997157829056959599	; unused
   619                          	NOTE_FREQ_GS3	= 207.650000000000005684341886080801	; unused
   620                          	BITMAP_Y1	= $7b18
   621                          	TILEMAP_TMP_TILES_H	= $7a87
   622                          	TILEMAP_SIZE_Y_16	= $4
   623                          	KB_IRQ	= $2
   624                          	VIA_IO_PORT	= $f0
   625                          	HBC56_VIA_CALLBACK	= $7ce5
   626                          	_tmsSendX8	= $e6b2
   627                          	KB_SCANCODE_NUMPAD_5	= $73	; unused
   628                          	AY_CHA	= $0
   629                          	lcdImage	= $ecce
   630                          	KB_SCANCODE_ALT_RIGHT_	= $91	; unused
   631                          	bitmapFill	= $e9e7	; unused
   632                          	bitmapXor	= $ea04	; unused
   633                          	KB_SCANCODE_NUMPAD_4	= $6b	; unused
   634                          	AY_CHB	= $1
   635                          	lcdNextLine	= $ef9f	; ?
   636                          	KB_RAM_SIZE	= $3a
   637                          	tmsSetPatternWrite	= $e93b	; unused
   638                          	lcdDisplayOn	= $ed79
   639                          	KB_SCANCODE_NUMPAD_7	= $6c	; unused
   640                          	UART_RAM_START	= $7b82
   641                          	AY_CHC	= $2
   642                          	KB_SCANCODE_NUMPAD_6	= $74	; unused
   643                          	MEMORY_ZP_SIZE	= $6
   644                          	tilemapInit	= $f045
   645                          	KEY_MAP_SHIFTED	= $f4a0	; ?
   646                          	KB_SCANCODE_NUMPAD_1	= $69	; unused
   647                          	AY_READ	= $2
   648                          	KB_SCANCODE_NUMPAD_0	= $70	; unused
   649                          	KB_SCANCODE_NUMPAD_3	= $7a	; unused
   650                          	HBC56_LOGO	= $4
   651                          	VIA_IRQ	= $5
   652                          	tableBitFromRight	= $e140	; unused
   653                          	KB_SCANCODE_NUMPAD_2	= $72	; unused
   654                          	TMS9918_CONSOLE_LINE_LEN	= $7b2b
   655                          	KB_SCANCODE_NUMPAD_MINUS	= $7b	; unused
   656                          	BITMAP_RAM_START	= $7b16
   657                          	TILEMAP_TMP_TILE_ROW	= $7a82
   658                          	uartInit	= $f18c	; unused
   659                          	hbc56CustomDelay	= $ffe3
   660                          	UART_STATUS_FRAMING_ERROR	= $10	; unused
   661                          	HBC56_BACKGROUND	= $f
   662                          	AY_ENV_SHAPE_FADE_IN_STOP	= $4	; unused
   663                          	HAVE_UART	= $1
   664                          	MEM_DST	= $2e
   665                          	TMS_DK_YELLOW	= $a	; unused
   666                          	TILEMAP_TMP_2	= $7a85
   667                          	UART_STATUS_PARITY_ERROR	= $40	; unused
   668                          	lcdScrollUp	= $efb3	; ?
   669                          	KB_SCANCODE_NUMPAD_9	= $7d	; unused
   670                          	LCD_INITIALIZE	= $38	; ?
   671                          	KB_SCANCODE_NUMPAD_8	= $75	; unused
   672                          	AY_CHN	= $3	; unused
   673                          	AY_ENV_SHAPE_TRIANGLE	= $e	; unused
   674                          	hbc56Delay	= $ffe1
   675                          	tableInvBitFromLeft	= $e138
   676                          	TILEMAP_TMP_1	= $7a84
   677                          	STYLE_BYTE	= $7b20
   678                          	KB_SCANCODE_2	= $1e	; unused
   679                          	AY_CHB_TONE_H	= $3	; unused
   680                          	KB_SCANCODE_3	= $26	; unused
   681                          	kbResetCallbacks	= $f278	; unused
   682                          	NES_IO_PORT	= $82
   683                          	TMS9918_RAM_SIZE	= $32
   684                          	KB_SCANCODE_0	= $45	; unused
   685                          	TMS9918_RAM_START	= $7b26
   686                          	AY_CHA_TONE_L	= $0
   687                          	AY_CHC_TONE_H	= $5	; unused
   688                          	AY_ENV_SHAPE_CONTINUE	= $8
   689                          	KB_SCANCODE_1	= $16	; unused
   690                          	HBC56_TEXT	= $4
   691                          	HBC56_META_VECTOR	= $dffc
   692                          	cputype	= $65c02	; unused
   693                          	KB_SCANCODE_6	= $36	; unused
   694                          	HBC56_KERNEL_RAM_END	= $7ce7
   695                          	AY_CHB_TONE_L	= $2	; unused
   696                          	KB_SCANCODE_7	= $3d	; unused
   697                          	AY_ENV_SHAPE_FADE_IN	= $d	; unused
   698                          	tmsModeReset	= $e5f7
   699                          	KB_SCANCODE_DELETE	= $f1	; unused
   700                          	KB_SCANCODE_4	= $25	; unused
   701                          	KB_SCANCODE_MENU	= $af	; unused
   702                          	KB_SCANCODE_SPACEBAR	= $29	; unused
   703                          	AY_CHA_TONE_H	= $1
   704                          	AY_CHC_TONE_L	= $4	; unused
   705                          	KB_SCANCODE_5	= $2e	; unused
   706                          	MEMORY_ZP_START	= $2e
   707                          	tmsSetPosRead	= $e900	; unused
   708                          	nes1Pressed	= $f23e	; unused
   709                          	VIA_REG_T1C_H	= $5
   710                          	INT_CTRL_ADDRESS	= $7fdf
   711                          	STR_ADDR	= $34
   712                          	AY_ENV_PERIOD_H	= $c
   713                          	tmsHex8	= $e7b7	; unused
   714                          	VIA_IO_ADDR_T1L_H	= $7ff7	; unused
   715                          	TILEMAP_ZP_END	= $1e
   716                          	KEY_MAP	= $f420	; ?
   717                          	KB_SCANCODE_8	= $3e	; unused
   718                          	KB_RAM_START	= $7c86
   719                          	KB_SCANCODE_9	= $46	; unused
   720                          	TILEMAP_DEFAULT_BUFFER_ADDRESS	= $7a00
   721                          	VIA_REG_T1C_L	= $4
   722                          	AY_ENV_PERIOD_L	= $b
   723                          	bitmapClearPixel	= $ea57	; unused
   724                          	KB_PAUSE_KEY	= $e1
   725                          	VIA_IO_ADDR_T1L_L	= $7ff6	; unused
   726                          	KB_CTRL_DOWN	= $2	; unused
   727                          	NES_RIGHT	= $1	; unused
   728                          	nes2Pressed	= $f246	; unused
   729                          	MEM_LEN	= $32
   730                          	bitmapRect	= $ec30	; unused
   731                          	VIA_IO_ADDR_PORT_A	= $7ff1	; unused
   732                          	UART_CTL_WORD_8BIT_2SB	= $10
   733                          	NES_START	= $10	; unused
   734                          	HBC56_META_TITLE_LEN	= $7ce2
   735                          	memsetMultiPage	= $e10d
   736                          	UART_REG	= $7f20
   737                          	LCD_MODEL	= $3240
   738                          	KB_SCANCODE_SHIFT_LEFT	= $12
   739                          	VIA_IO_ADDR_PORT_B	= $7ff0	; unused
   740                          	isAlNum	= $e02a	; unused
   741                          	AY_CHA_AMPL	= $8
   742                          	LAST_MODULE_RAM_END	= $7cc9
   743                          	TMS_R1_MODE_TEXT	= $10
   744                          	tmsConsoleOut	= $e95a
   745                          	TMS9918_REG	= $7f11
   746                          	BITMAP_RAM_SIZE	= $10
   747                          	bitmapXorPixel	= $ea62	; unused
   748                          	KB_SCANCODE_NUMPAD_DIVIDE	= $ca	; unused
   749                          	DEFAULT_HBC56_INT_VECTOR	= $ffe0
   750                          	VIA_IRQ_BIT	= $10
   751                          	TMS_VRAM_PATT_ADDRESS	= $2000
   752                          	bitmapSetPixel	= $ea4c
   753                          	KB_SCANCODE_EQUAL	= $55	; unused
   754                          	KB_RELEASE	= $f0
   755                          	tmsInitSpriteTable	= $e775	; ?
   756                          	KB_SCANCODE_ARROW_DOWN	= $f2	; unused
   757                          	LCD_CMD_EXT_GRAPHICS_ADDR	= $80
   758                          	TILEMAP_TMP_BUF_COL	= $7a81
   759                          	END_OFFSET	= $7b21
   760                          	UART_RX_BUFFER_BYTES	= $2c
   761                          	lcdHome	= $ed70	; ?
   762                          	isAlpha	= $e018
   763                          	ayInit	= $e158
   764                          	TMS9918_RAM	= $7f10
   765                          	LCD_CMD_DISPLAY_ON	= $4
   766                          	UART_RX_FLAGS	= $2d
   767                          	AY_R1	= $1
   768                          	NOTE_FREQ_B8	= 7902.130000000000109139364212751389	; unused
   769                          	LCD_DATA	= $7f03
   770                          	KB_STATUS_ADDR	= $7f81
   771                          	AY_R0	= $0
   772                          	AY_R3	= $3
   773                          	NOTE_FREQ_F8	= 5587.649999999999636202119290828705	; unused
   774                          	AY_R2	= $2
   775                          	NOTE_FREQ_D8	= 4698.630000000000109139364212751389	; unused
   776                          	TMS_DK_GREEN	= $c	; unused
   777                          	AY_R5	= $5
   778                          	AY_CHC_AMPL	= $a	; unused
   779                          	NOTE_FREQ_FS8	= 5919.909999999999854480847716331482	; unused
   780                          	AY_R4	= $4
   781                          	AY_R7	= $7
   782                          	KB_ALT_DOWN	= $4	; unused
   783                          	AY_R6	= $6
   784                          	TMS_TXT_TILE_HEIGHT	= $8
   785                          	AY_R9	= $9
   786                          	NOTE_FREQ_B0	= 30.870000000000000994759830064140	; unused
   787                          	NOTE_FREQ_F2	= 87.310000000000002273736754432321	; unused
   788                          	NOTE_FREQ_D3	= 146.830000000000012505552149377763	; unused
   789                          	NOTE_FREQ_FS4	= 369.990000000000009094947017729282	; unused
   790                          	TMS_VRAM_COLOR_ADDRESS+2	= $0
   791                          	tmsSetPatternTmpAddressBank1	= $e925	; unused
   792                          	VIA_IO_ADDR_DDR_A	= $7ff3	; unused
   793                          	AY_R8	= $8
   794                          	NOTE_FREQ_B1	= 61.740000000000001989519660128281	; unused
   795                          	NOTE_FREQ_D2	= 73.420000000000001705302565824240	; unused
   796                          	NOTE_FREQ_FS5	= 739.990000000000009094947017729282	; unused
   797                          	UART_FLOWCTRL_XOFF	= $13
   798                          	TMS_R0_EXT_VDP_DISABLE	= $0
   799                          	tmsSetPatternTmpAddressBank0	= $e906	; unused
   800                          	NOTE_FREQ_F3	= 174.610000000000013642420526593924	; unused
   801                          	NOTE_FREQ_F0	= 21.829999999999998294697434175760	; unused
   802                          	NOTE_FREQ_D1	= 36.710000000000000852651282912120	; unused
   803                          	NOTE_FREQ_FS6	= 1479.980000000000018189894035458565	; unused
   804                          	TMS9918_CONSOLE_Y	= $7b29
   805                          	TMS_LT_YELLOW	= $b	; unused
   806                          	KB_SCANCODE_ARROW_LEFT	= $eb	; unused
   807                          	NOTE_FREQ_B2	= 123.469999999999998863131622783840	; unused
   808                          	NOTE_FREQ_D0	= 18.350000000000001421085471520200	; unused
   809                          	NOTE_FREQ_FS7	= 2959.960000000000036379788070917130	; unused
   810                          	TMS9918_CONSOLE_X	= $7b28
   811                          	PIX_ADDR	= $1e
   812                          	tmsSetPatternTmpAddressBank2	= $e930	; unused
   813                          	VIA_IO_ADDR_DDR_B	= $7ff2	; unused
   814                          	NOTE_FREQ_F1	= 43.649999999999998578914528479800	; unused
   815                          	NOTE_FREQ_B3	= 246.939999999999997726263245567679	; unused
   816                          	TILEMAP_TILE_SIZE_PX	= $7
   817                          	HBC56_KERNEL_START	= $e000
   818                          	TMS9918_ZP_END	= $28
   819                          	HAVE_AY3891X	= $1
   820                          	NOTE_FREQ_FS0	= 23.120000000000000994759830064140	; unused
   821                          	TMS_R1_INT_DISABLE	= $0	; unused
   822                          	AY_CHB_AMPL	= $9	; unused
   823                          	NOTE_FREQ_B4	= 493.879999999999995452526491135359	; unused
   824                          	NOTE_FREQ_F6	= 1396.910000000000081854523159563541	; unused
   825                          	NOTE_FREQ_D7	= 2349.320000000000163709046319127083	; unused
   826                          	NOTE_FREQ_FS1	= 46.250000000000000000000000000000	; unused
   827                          	NOTE_FREQ_B5	= 987.769999999999981810105964541435	; unused
   828                          	NOTE_FREQ_D6	= 1174.660000000000081854523159563541	; unused
   829                          	TMS_TXT_TILE_WIDTH	= $6
   830                          	tmsSetPosTmpAddressText	= $e80a
   831                          	tmsSetPatternTmpAddress	= $e906
   832                          	NOTE_FREQ_F7	= 2793.829999999999927240423858165741	; unused
   833                          	NOTE_FREQ_FS2	= 92.500000000000000000000000000000	; unused
   834                          	NOTE_FREQ_F4	= 349.230000000000018189894035458565	; unused
   835                          	NOTE_FREQ_D5	= 587.330000000000040927261579781771	; unused
   836                          	LOGO_BUFFER	= $3000
   837                          	NOTE_FREQ_B6	= 1975.529999999999972715158946812153	; unused
   838                          	TMS9918_CONSOLE_SIZE_X	= $7b2a
   839                          	KB_SCANCODE_BACKSPACE	= $66	; unused
   840                          	NOTE_FREQ_FS3	= $b9	; unused
   841                          	NOTE_FREQ_D4	= 293.660000000000025011104298755527	; unused
   842                          	tmsInit	= $e665
   843                          	TMP_STYLE	= $7b23
   844                          	NOTE_FREQ_F5	= 698.460000000000036379788070917130
   845                          	NOTE_FREQ_B7	= 3951.070000000000163709046319127083	; unused
   846                          	KB_SCANCODE_INSERT	= $f0	; unused

; ******** Source: ../kernel\hbc56kernel.inc
    15                          
    16                          

; ******** Source: ../lib\ut\math.inc
     1                          ; 6502
     2                          ;
     3                          ; Math macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          HAVE_MATH_INC = 1
    14                          
    15                          !macro lsr2 {
    16                                  lsr
    17                                  lsr
    18                          }
    19                          
    20                          !macro lsr3 {
    21                                  +lsr2
    22                                  lsr
    23                          }
    24                          
    25                          !macro lsr4 {
    26                                  +lsr3
    27                                  lsr
    28                          }
    29                          
    30                          !macro lsr5 {
    31                                  +lsr4
    32                                  lsr
    33                          }
    34                          
    35                          !macro lsr6 {
    36                                  +lsr5
    37                                  lsr
    38                          }
    39                          
    40                          !macro lsr7 {
    41                                  +lsr6
    42                                  lsr
    43                          }
    44                          
    45                          !macro div2   { lsr }
    46                          !macro div4   { +lsr2 }
    47                          !macro div8   { +lsr3 }
    48                          !macro div16  { +lsr4 }
    49                          !macro div32  { +lsr5 }
    50                          !macro div64  { +lsr6 }
    51                          !macro div128 { +lsr7 }
    52                          
    53                          !macro asl2 {
    54                                  asl
    55                                  asl
    56                          }
    57                          
    58                          !macro asl3 {
    59                                  +asl2
    60                                  asl
    61                          }
    62                          
    63                          !macro asl4 {
    64                                  +asl3
    65                                  asl
    66                          }
    67                          
    68                          !macro asl5 {
    69                                  +asl4
    70                                  asl
    71                          }
    72                          
    73                          !macro asl6 {
    74                                  +asl5
    75                                  asl
    76                          }
    77                          
    78                          !macro asl7 {
    79                                  +asl6
    80                                  asl
    81                          }
    82                          
    83                          !macro mul2   { asl }
    84                          !macro mul4   { +asl2 }
    85                          !macro mul8   { +asl3 }
    86                          !macro mul16  { +asl4 }
    87                          !macro mul32  { +asl5 }
    88                          !macro mul64  { +asl6 }
    89                          !macro mul128 { +asl7 }
    90                          
    91                          
    92                          
    93                          ; -----------------------------------------------------------------------------
    94                          ; +dec16: decement a 16-bit value
    95                          ; -----------------------------------------------------------------------------
    96                          ; Inputs:
    97                          ;  addr: address containing LSB of value to decrement
    98                          ; -----------------------------------------------------------------------------
    99                          !macro dec16 .addr {
   100                            lda .addr
   101                            bne +
   102                            dec .addr + 1
   103                          +
   104                            dec .addr
   105                          }
   106                          
   107                          ; -----------------------------------------------------------------------------
   108                          ; +inc16: increment a 16-bit value
   109                          ; -----------------------------------------------------------------------------
   110                          ; Inputs:
   111                          ;  addr: address containing LSB of value to increment
   112                          ; -----------------------------------------------------------------------------
   113                          !macro inc16 .addr {
   114                            inc .addr
   115                            bne +
   116                            inc .addr + 1
   117                          +
   118                          }
   119                          
   120                          ; -----------------------------------------------------------------------------
   121                          ; +cmp16: compare two 16-bit values in memory
   122                          ; -----------------------------------------------------------------------------
   123                          ; Inputs:
   124                          ;  left:  address containing LSB of left value to comapre
   125                          ;  right: address containing LSB of right value to comapre
   126                          ; Outputs:
   127                          ;  C set if right < left
   128                          ;  Z set if right == left
   129                          ; -----------------------------------------------------------------------------
   130                          !macro cmp16 .left, .right {
   131                            lda .left + 1
   132                            cmp .right + 1
   133                          	bne +
   134                          	lda .left
   135                          	cmp .right
   136                          +
   137                          }
   138                          
   139                          ; -----------------------------------------------------------------------------
   140                          ; +cmp16: compare two 16-bit values in memory
   141                          ; -----------------------------------------------------------------------------
   142                          ; Inputs:
   143                          ;  value: immediate value to compare
   144                          ;  x:     msb
   145                          ;  a:     lsb
   146                          ; -----------------------------------------------------------------------------
   147                          !macro cmp16xa .value {
   148                            cpx #>.value
   149                          	bne .doneCmpXa
   150                          	cmp #<.value
   151                          .doneCmpXa
   152                          }
   153                          
   154                          ; -----------------------------------------------------------------------------
   155                          ; +sub16: subtract 16 bit numbers
   156                          ; -----------------------------------------------------------------------------
   157                          ; Inputs:
   158                          ;  left:  address containing LSB of left value
   159                          ;  right: address containing LSB of right value
   160                          ; Outputs:
   161                          ;  res:   address containing LSB of result
   162                          ; -----------------------------------------------------------------------------
   163                          !macro sub16 .left, .right, .res {
   164                            sec
   165                            lda .left
   166                            sbc .right
   167                            sta .res
   168                            lda .left + 1
   169                            sbc .right + 1
   170                            sta .res + 1
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; +sub16: subtract 16 bit numbers - result in ax registers
   175                          ; -----------------------------------------------------------------------------
   176                          ; Inputs:
   177                          ;  left:  address containing LSB of left value
   178                          ;  right: address containing LSB of right value
   179                          ; Outputs:
   180                          ;  a:     result msb
   181                          ;  x:     result lsb
   182                          ; -----------------------------------------------------------------------------
   183                          !macro sub16 .left, .right {
   184                            sec
   185                            lda .left
   186                            sbc .right
   187                            tax
   188                            lda .left + 1
   189                            sbc .right + 1
   190                          }
   191                          
   192                          
   193                          ; -----------------------------------------------------------------------------
   194                          ; +add16: add 16 bit numbers - result in ax registers
   195                          ; -----------------------------------------------------------------------------
   196                          ; Inputs:
   197                          ;  left:  address containing LSB of left value
   198                          ;  right: address containing LSB of right value
   199                          ; Outputs:
   200                          ;  a:     result msb
   201                          ;  x:     result lsb
   202                          ; -----------------------------------------------------------------------------
   203                          !macro add16 .left, .right {
   204                            clc
   205                            lda .left
   206                            adc .right
   207                            tax
   208                            lda .left + 1
   209                            adc .right + 1
   210                          }
   211                          
   212                          
   213                          ; -----------------------------------------------------------------------------
   214                          ; +add16Imm: add 16 bit numbers - result stored to res
   215                          ; -----------------------------------------------------------------------------
   216                          ; Inputs:
   217                          ;  left:  address containing LSB of left value
   218                          ;  imm:   immediate value to add
   219                          ; Outputs:
   220                          ;  res: address to store result
   221                          ; -----------------------------------------------------------------------------
   222                          !macro add16Imm .left, .imm, .res {
   223                            clc
   224                            lda .left
   225                            adc #<.imm
   226                            sta .res
   227                            lda .left + 1
   228                            adc #>.imm
   229                            sta .res + 1
   230                          }
   231                          
   232                          
   233                          ; -----------------------------------------------------------------------------
   234                          ; +subImm8From16: subtract an 8 bit number from a 16 bit number
   235                          ; -----------------------------------------------------------------------------
   236                          ; Inputs:
   237                          ;  left:  address containing LSB of left value
   238                          ;  right: immediate 8-bit value
   239                          ; Outputs:
   240                          ;  res:   address containing LSB of result
   241                          ; -----------------------------------------------------------------------------
   242                          !macro subImm8From16 .left, .right, .res {
   243                            sec
   244                            lda .left
   245                            sbc #.right
   246                            sta .res
   247                            lda .left + 1
   248                            sbc #0
   249                            sta .res + 1
   250                          }
   251                          
   252                          ; -----------------------------------------------------------------------------
   253                          ; +incBcd: increment a BCD byte (inc instruction doesn't work in bcd mode)
   254                          ; -----------------------------------------------------------------------------
   255                          ; Inputs:
   256                          ;  addr:  address containing BCD value
   257                          ; -----------------------------------------------------------------------------
   258                          !macro incBcd .addr {
   259                            lda .addr
   260                            sed
   261                            clc
   262                            adc #1
   263                            cld
   264                            sta .addr
   265                          }
   266                          
   267                          ; -----------------------------------------------------------------------------
   268                          ; +decBcd: decrement a BCD byte (inc instruction doesn't work in bcd mode)
   269                          ; -----------------------------------------------------------------------------
   270                          ; Inputs:
   271                          ;  addr:  address containing BCD value
   272                          ; -----------------------------------------------------------------------------
   273                          !macro decBcd .addr {
   274                            lda .addr
   275                            sed
   276                            sec
   277                            sbc #1
   278                            cld
   279                            sta .addr

; ******** Source: ../kernel\hbc56kernel.inc
    17                          

; ******** Source: ../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.dst: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                          	lda #<.src
    53                          	sta MEM_SRC
    54                          	lda #>.src
    55                          	sta MEM_SRC + 1
    56                          
    57                          	lda #<.dst
    58                          	sta MEM_DST
    59                          	lda #>.dst
    60                          	sta MEM_DST + 1
    61                          
    62                          
    63                          		lda #<.cnt
    64                          		sta MEM_LEN
    65                          		lda #>.cnt
    66                          		sta MEM_LEN + 1
    67                          		jsr memcpyMultiPage
    68                          	}
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                          	lda #<.src
    74                          	sta MEM_SRC
    75                          	lda #>.src
    76                          	sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                          	lda #<.dst
    81                          	sta MEM_DST
    82                          	lda #>.dst
    83                          	sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                          	lda .srcRef
    88                          	sta MEM_SRC
    89                          	lda .srcRef + 1
    90                          	sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                          	lda .dstRef
    95                          	sta MEM_DST
    96                          	lda .dstRef + 1
    97                          	sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                          	!if .bytes <= 0 {
   103                          		!error "memcpySinglePage: invalid count: ", .bytes
   104                          	}	
   105                          
   106                          	ldy #.bytes
   107                          	jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;	.src: source address
   116                          ;	.dst: destination address
   117                          ;	.cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                          	!if .cnt <= 0 {
   121                          		!error "memcpyPort: invalid count: ", .cnt
   122                          	}
   123                          	
   124                          	lda #<.src
   125                          	sta MEM_SRC
   126                          	lda #>.src
   127                          	sta MEM_SRC + 1
   128                          
   129                          	lda #<.dst
   130                          	sta MEM_DST
   131                          	lda #>.dst
   132                          	sta MEM_DST + 1
   133                          
   134                          	!if .cnt <= 256 {
   135                          		ldy #<.cnt					
   136                          		jsr memcpySinglePagePort
   137                          	} else {
   138                          		lda #<.cnt
   139                          		sta MEM_LEN
   140                          		lda #>.cnt
   141                          		sta MEM_LEN + 1
   142                          		jsr memcpyMultiPagePort
   143                          	}
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;	.dst: destination address
   153                          ;	val: the byte value
   154                          ;	.cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                          	!error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                          	lda #.val
   161                          	!for i, 0, .cnt - 1 {
   162                          	sta .dst + i
   163                          	}
   164                          } else if .cnt <= 256 {
   165                          	ldx #<.cnt
   166                          	lda #.val
   167                          -
   168                          	dex
   169                          	sta .dst, x
   170                          	cpx #0
   171                          	bne -
   172                          } else {
   173                          	lda #<.dst
   174                          	sta MEM_DST
   175                          	lda #>.dst
   176                          	sta MEM_DST + 1
   177                          	lda #<.cnt
   178                          	sta MEM_LEN
   179                          	lda #>.cnt
   180                          	sta MEM_LEN + 1
   181                          	lda #.val
   182                          	jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: ../kernel\hbc56kernel.inc
    18                          

; ******** Source: ../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../kernel\hbc56kernel.inc
    19                          

; ******** Source: ../lib\gfx\tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                          	!if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                          	!if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                          	!if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                          	!if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                          	!if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                          	!if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                          	!if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                          	!if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                          	!if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                          	lda #<.tilemapStructAddr
    25                          	sta TILEMAP_ADDR
    26                          	lda #>.tilemapStructAddr
    27                          	sta TILEMAP_ADDR + 1
    28                          
    29                          	lda #>.bufferAddr
    30                          	sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                          	lda #.sizeFlags
    32                          	sta .tilemapStructAddr + TILEMAP_SIZE
    33                          	lda #>.tilesetAddr
    34                          	sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                          	lda #>.invertAddr
    36                          	sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                          	lda #>.dirtyAddr
    38                          	sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                          	lda #.tileSizePx
    40                          	sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                          	jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                          	+tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                          	lda #<.tilemapStructAddr
    51                          	sta TILEMAP_ADDR
    52                          	lda #>.tilemapStructAddr
    53                          	sta TILEMAP_ADDR + 1
    54                          
    55                          	jsr tilemapSetActive

; ******** Source: ../kernel\hbc56kernel.inc
    20                          

; ******** Source: ../lib\lcd\lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                          	jmp +
    18                          .textAddr
    19                          	!text str,0
    20                          +
    21                          	lda #<.textAddr
    22                          	sta STR_ADDR_L
    23                          	lda #>.textAddr
    24                          	sta STR_ADDR_H
    25                          	jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                          	pha
    37                          	lda #c
    38                          	jsr lcdChar
    39                          	pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                          	jmp .afterText
    51                          .textAddr
    52                          	!text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: ../kernel\hbc56kernel.inc
    21                          

; ******** Source: ../lib\inp\nes.inc
     1                          ; 6502 NES Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro nes1BranchIfPressed .buttonMask, .addr {
    14                                  pha
    15                                  lda #(.buttonMask)
    16                                  jsr nes1Pressed
    17                                  pla
    18                                  bcs .addr
    19                          }
    20                          
    21                          !macro nes1BranchIfNotPressed .buttonMask, .addr {
    22                                  pha
    23                                  lda #(.buttonMask)
    24                                  jsr nes1Pressed
    25                                  pla
    26                                  bcc .addr
    27                          }
    28                          
    29                          !macro nes2BranchIfPressed .buttonMask, addr {
    30                                  pha
    31                                  lda #(.buttonMask)
    32                                  jsr nes2Pressed
    33                                  pla
    34                                  bcs addr
    35                          }
    36                          
    37                          !macro nes2BranchIfNotPressed .buttonMask, addr {
    38                                  pha
    39                                  lda #(.buttonMask)
    40                                  jsr nes2Pressed
    41                                  pla
    42                                  bcc addr
    43                          }

; ******** Source: ../kernel\hbc56kernel.inc
    22                          

; ******** Source: ../lib\inp\keyboard.inc
     1                          ; 6502 KB Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro kbBranchIfNotPressed .scancode, .addr {
    14                                  ldx #.scancode
    15                                  jsr kbReadAscii
    16                                  beq .addr
    17                          }
    18                          
    19                          !macro kbBranchIfPressed .scancode, .addr {
    20                                  ldx #.scancode
    21                                  jsr kbIsPressed
    22                                  bne .addr
    23                          }
    24                          
    25                          !macro kbSetEventHandlerPressed .cb {
    26                                  lda #<.cb
    27                                  sta KB_CB_PRESSED
    28                                  lda #>.cb
    29                                  sta KB_CB_PRESSED + 1
    30                          }
    31                          
    32                          !macro kbSetEventHandlerReleased .cb {
    33                                  lda #<.cb
    34                                  sta KB_CB_RELEASED
    35                                  lda #>.cb
    36                                  sta KB_CB_RELEASED + 1

; ******** Source: ../kernel\hbc56kernel.inc
    23                          

; ******** Source: ../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                          }

; ******** Source: ../kernel\hbc56kernel.inc
    24                          

; ******** Source: ../lib\ser\uart.inc
     1                          ; 6502 - MC68B50 UART Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; uartOutStringAddr: Output a string to the uart
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  .addr: Address of null-terminated string to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro uartOutStringAddr .addr {
    17                                  lda #<.addr
    18                                  sta STR_ADDR_L
    19                                  lda #>.addr
    20                                  sta STR_ADDR_H
    21                                  jsr uartOutString        
    22                          }
    23                          
    24                          
    25                          ; -----------------------------------------------------------------------------
    26                          ; uartOutString: Output an immediate string to the uart
    27                          ; -----------------------------------------------------------------------------
    28                          ; Inputs:
    29                          ;  .str: String to output
    30                          ; -----------------------------------------------------------------------------
    31                          !macro uartOutString .str {
    32                          	jmp @afterText
    33                          @textAddr
    34                          	!text .str,0
    35                          @afterText        
    36                                  +uartOutStringAddr @textAddr
    37                          }
    38                          

; ******** Source: ../kernel\hbc56kernel.inc
    25                          

; ******** Source: ../kernel\kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: ../kernel\hbc56kernel.inc
    26                          
    27                          
    28                          !ifndef HBC_56_EXCLUDE_KERNEL_ROM {
    29                          
    30                                  ; if the program requires the kernal image
    31                                  ; then... include it
    32                          
    33                                  *=HBC56_META_VECTOR
    34                                  !ifdef hbc56Meta {
    35  dffc 4c0380                             jmp hbc56Meta
    36                                  } else {
    37                                          rts
    38                                  }
    39                          
    40                                  *=HBC56_KERNEL_START
    41  e000 c9619005c97b9002...        !bin "kernel.o"
    42                          
    43                                  *=DEFAULT_HBC56_RST_VECTOR
    44  8000 4c2d80                     jmp hbc56Main
    45                          
    46                          } else {
    47                          
    48                                  ; otherwise, place the program in RAM
    49                          
    50                                  *=$0400

; ******** Source: breakout.asm
    10                          
    11                          
    12                          ; Zero page addresses
    13                          ; -------------------------
    14                          ZP0 = HBC56_USER_ZP_START
    15                          
    16                          ; ball position
    17                          POSX        = ZP0
    18                          POSX_SUB    = ZP0 + 1
    19                          POSY        = ZP0 + 2
    20                          POSY_SUB    = ZP0 + 3
    21                          
    22                          ; ball speed
    23                          SPDX        = ZP0 + 4
    24                          SPDX_SUB    = ZP0 + 5
    25                          SPDY        = ZP0 + 6
    26                          SPDY_SUB    = ZP0 + 7
    27                          
    28                          ; ball direction
    29                          DIRX        = ZP0 + 8
    30                          DIRY        = ZP0 + 9
    31                          
    32                          ; paddle position and width
    33                          PADX        = ZP0 + 10
    34                          PADW        = ZP0 + 11
    35                          
    36                          ; current level
    37                          LEVEL       = ZP0 + 12
    38                          
    39                          ; current score
    40                          SCORE_H     = ZP0 + 13
    41                          SCORE_M     = ZP0 + 14
    42                          SCORE_L     = ZP0 + 15
    43                          
    44                          ; ball count
    45                          BALLS       = ZP0 + 16
    46                          
    47                          ; score multiplier (number of blocks hit since paddle)
    48                          MULT        = ZP0 + 17
    49                          
    50                          ; blocks remaining
    51                          BLOCKS_LEFT = ZP0 + 18
    52                          
    53                          ; paddle speed (for ball acceleration)
    54                          PADSPD     = ZP0 + 19
    55                          PADSPD_SUB = ZP0 + 20
    56                          
    57                          START_TIME = ZP0 + 21
    58                          
    59                          ; temporary storage
    60                          TMP        = ZP0 + 22
    61                          TMP_SIZE   = 10
    62                          
    63                          ; Ball constants
    64                          ; -------------------------
    65                          BALL_BASE         = TMS_WHITE
    66                          BALL_SHADE        = TMS_GREY
    67                          BALL_SIZE         = 6
    68                          BALL_SPRITE_INDEX = 0
    69                          BALL_SHADOW_INDEX = 1
    70                          
    71                          INITIAL_BALLS = 4
    72                          
    73                          ; Paddle constants
    74                          ; -------------------------
    75                          PADDLE_WIDTH       = 32
    76                          PADDLE_SPEED       = 1
    77                          PADDLE_SPEED_SUB   = 0
    78                          PADDLE_L_SPRITE_INDEX = 2
    79                          PADDLE_R_SPRITE_INDEX = 3
    80                          PADDLE_ROW         = 23
    81                          PADDLE_SPRITE_Y    = PADDLE_ROW * 8 + 3
    82                          
    83                          PADDLE_COLOR_HIGH  = TMS_WHITE
    84                          PADDLE_COLOR_BASE  = TMS_CYAN
    85                          PADDLE_COLOR_SHADE = TMS_LT_BLUE
    86                          
    87                          ; Level constants
    88                          ; -------------------------
    89                          BRICKS_TILE_INDEX = 12
    90                          BRICKS_WIDTH      = 3
    91                          BRICK_TYPES       = 4
    92                          LEVEL_HEIGHT      = 12
    93                          LEVEL_WIDTH       = 7
    94                          LEVEL_STRIDE      = 8
    95                          NO_BRICK          = 255
    96                          
    97                          GAME_AREA_LEFT    = 8
    98                          GAME_AREA_WIDTH   = 8 * BRICKS_WIDTH * LEVEL_WIDTH
    99                          GAME_AREA_RIGHT   = GAME_AREA_LEFT + GAME_AREA_WIDTH
   100                          LEVEL_SIZE        = LEVEL_HEIGHT * LEVEL_STRIDE
   101                          
   102                          ; UI constants
   103                          ; -------------------------
   104                          TITLE_WIDTH        = 9
   105                          TITLE_HEIGHT       = 2
   106                          TITLE_TILE_INDEX   = 128
   107                          TITLE_X            = 23
   108                          TITLE_Y            = 0
   109                          
   110                          LABEL_WIDTH        = 7
   111                          
   112                          LEVEL_TILE_INDEX   = 146
   113                          LEVEL_LABEL_X      = 24
   114                          LEVEL_LABEL_Y      = 5
   115                          LEVEL_X            = 26
   116                          LEVEL_Y            = LEVEL_LABEL_Y + 2
   117                          
   118                          SCORE_TILE_INDEX   = LEVEL_TILE_INDEX + LABEL_WIDTH
   119                          SCORE_LABEL_X      = 24
   120                          SCORE_LABEL_Y      = 10
   121                          SCORE_X            = 25
   122                          SCORE_Y            = SCORE_LABEL_Y + 2
   123                          
   124                          BALLS_TILE_INDEX   = SCORE_TILE_INDEX + LABEL_WIDTH
   125                          BALLS_LABEL_X      = 24
   126                          BALLS_LABEL_Y      = 15
   127                          BALLS_X            = 26
   128                          BALLS_Y            = BALLS_LABEL_Y + 2
   129                          
   130                          BORDER_TILE_INDEX = 26
   131                          BORDER_TL_INDEX   = BORDER_TILE_INDEX
   132                          BORDER_TOP_INDEX  = BORDER_TILE_INDEX + 1
   133                          BORDER_TR_INDEX   = BORDER_TILE_INDEX + 2
   134                          BORDER_L_INDEX    = BORDER_TILE_INDEX + 3
   135                          BORDER_R_INDEX    = BORDER_TILE_INDEX + 4
   136                          BORDER_LB_INDEX   = BORDER_TILE_INDEX + 5
   137                          BORDER_RB_INDEX   = BORDER_TILE_INDEX + 6
   138                          BORDER_BL_INDEX   = BORDER_TILE_INDEX + 7
   139                          BORDER_BR_INDEX   = BORDER_TILE_INDEX + 8
   140                          BORDER_B_INDEX    = BORDER_TILE_INDEX + 9
   141                          BORDER_TILES      = 7
   142                          BORDER_X          = 0
   143                          BORDER_Y          = 0
   144                          BORDER_WIDTH      = (BRICKS_WIDTH * LEVEL_WIDTH) + 2
   145                          BORDER_HEIGHT     = 24
   146                          
   147                          BOX_X             = 4
   148                          BOX_Y             = 7
   149                          BOX_W             = 15
   150                          BOX_H             = 10
   151                          
   152                          BOX_TITLE_X       = BOX_X + 3
   153                          BOX_TITLE_Y       = BOX_Y + 2
   154                          BOX_LABEL_X       = BOX_TITLE_X + 1
   155                          BOX_LABEL_Y       = BOX_TITLE_Y + 3
   156                          
   157                          NEW_LEVEL_TIMEOUT = 2
   158                          
   159                          
   160                          ; Audio constants
   161                          ; -------------------------
   162                          TONE_PADDLE       = 6
   163                          TONE_WALL         = 2
   164                          TONE_BRICK        = 4
   165                          AUDIO_TONE_PERIOD = 400
   166                          
   167                          ; RAM locations
   168                          ; -------------------------
   169                          LEVEL_DATA   = $0400
   170                          
   171                          
   172                          ; -----------------------------------------------------------------------------
   173                          ; HBC-56 Program Metadata
   174                          ; -----------------------------------------------------------------------------
   175                          hbc56Meta:
   176  8003 4c1280425245414b...        +setHbcMetaTitle "BREAKOUT-56"
   177  8024 a9400dcd7c8dcd7c           +setHbcMetaNES
   178  802c 60                         rts
   179                          
   180                          ; -----------------------------------------------------------------------------
   181                          ; HBC-56 Program Entry
   182                          ; -----------------------------------------------------------------------------
   183                          hbc56Main:
   184                          
   185  802d 78                         sei
   186                          
   187                                  ; go to graphics II mode
   188  802e 2023e6                     jsr tmsModeGraphicsII
   189                          
   190                                  ; disable display durint init
   191  8031 a92020efe5                 +tmsDisableInterrupts
   192  8036 a94020efe5                 +tmsDisableOutput
   193                          
   194                                  ; set backrground
   195  803b a9f1                       +tmsColorFgBg TMS_WHITE, TMS_BLACK
   196  803d 20cfe5                     jsr tmsSetBackground
   197                          
   198                                  ; set up graphics
   199  8040 204d80                     jsr initVram
   200                          
   201                                  ; set up audio
   202  8043 207b87                     jsr initAudio
   203                          
   204                                  ; reset the game
   205  8046 20fa88                     jsr resetGame
   206                          
   207  8049 58                         cli
   208                          
   209  804a 4c67fe                     jmp hbc56Stop
   210                          
   211                          
   212                          ; -----------------------------------------------------------------------------
   213                          ; Initialise TMS9918 VRAM
   214                          ; -----------------------------------------------------------------------------
   215                          initVram:
   216                          
   217  804d 205d80                     jsr clearVram
   218                          
   219                                  ; load the brick graphics
   220  8050 20ca80                     jsr brickTilesToVram
   221                          
   222                                  ; load the ui graphics
   223  8053 206884                     jsr uiTilesToVram
   224                          
   225  8056 20ec82                     jsr initSprites
   226                          
   227  8059 201782                     jsr generatePaddleGlyphs
   228                          
   229  805c 60                         rts
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; Clear/reset VRAM
   233                          ; -----------------------------------------------------------------------------
   234                          clearVram:
   235                                  ; clear the name table
   236  805d 0878a9008d117f20...        +tmsSetAddrNameTable
   237  8070 a900                       lda #0
   238  8072 20b0e6                     jsr _tmsSendPage        
   239  8075 20b0e6                     jsr _tmsSendPage
   240  8078 20b0e6                     jsr _tmsSendPage
   241                          
   242                                  ; set all color table entries to transparent
   243  807b 0878a9008d117f20...        +tmsSetAddrColorTable
   244  808e a900                       +tmsColorFgBg TMS_TRANSPARENT, TMS_TRANSPARENT
   245  8090 20a7e6                     jsr _tmsSendKb
   246  8093 20a7e6                     jsr _tmsSendKb
   247  8096 20a7e6                     jsr _tmsSendKb
   248  8099 20a7e6                     jsr _tmsSendKb
   249  809c 20a7e6                     jsr _tmsSendKb
   250  809f 20a7e6                     jsr _tmsSendKb        
   251                          
   252                                  ; clear the pattern table
   253  80a2 0878a9008d117f20...        +tmsSetAddrPattTable
   254  80b5 a900                       lda #0
   255  80b7 20a7e6                     jsr _tmsSendKb
   256  80ba 20a7e6                     jsr _tmsSendKb
   257  80bd 20a7e6                     jsr _tmsSendKb
   258  80c0 20a7e6                     jsr _tmsSendKb
   259  80c3 20a7e6                     jsr _tmsSendKb
   260  80c6 20a7e6                     jsr _tmsSendKb
   261  80c9 60                         rts
   262                          
   263                          ; -----------------------------------------------------------------------------
   264                          ; Write brick data to VRAM
   265                          ; -----------------------------------------------------------------------------
   266                          brickTilesToVram:
   267                          
   268                                  ; brick patterns (for each bank)
   269  80ca 0878a9608d117f20...        +tmsSetAddrPattTableIIBank0 BRICKS_TILE_INDEX
   270  80dd a90e8524a9918525...        +tmsSendDataRpt block, 8 * BRICKS_WIDTH, BRICK_TYPES
   271                          
   272  80f9 0878a9608d117f20...        +tmsSetAddrPattTableIIBank1 BRICKS_TILE_INDEX
   273  810c a90e8524a9918525...        +tmsSendDataRpt block, 8 * BRICKS_WIDTH, BRICK_TYPES
   274                          
   275  8128 0878a9608d117f20...        +tmsSetAddrPattTableIIBank2 BRICKS_TILE_INDEX
   276  813b a90e8524a9918525...        +tmsSendDataRpt block, 8 * BRICKS_WIDTH, BRICK_TYPES
   277                          
   278                                  ; brick colors (for each bank)
   279  8157 0878a9608d117f20...        +tmsSetAddrColorTableIIBank0 BRICKS_TILE_INDEX
   280  816a 209a81                     jsr @sendBlocksPal
   281                          
   282  816d 0878a9608d117f20...        +tmsSetAddrColorTableIIBank1 BRICKS_TILE_INDEX
   283  8180 209a81                     jsr @sendBlocksPal
   284                          
   285  8183 0878a9608d117f20...        +tmsSetAddrColorTableIIBank2 BRICKS_TILE_INDEX
   286  8196 209a81                     jsr @sendBlocksPal
   287                          
   288  8199 60                         rts
   289                          
   290                          @sendBlocksPal:
   291  819a a9568524a9918525...        +tmsSendData    redBlockPal, 8
   292  81a7 a95e8524a9918525...        +tmsSendDataRpt redBlockPal + 8, 8, 2
   293  81b9 a9468524a9918525...        +tmsSendData    yellowBlockPal, 8
   294  81c6 a94e8524a9918525...        +tmsSendDataRpt yellowBlockPal + 8, 8, 2
   295  81d8 a9368524a9918525...        +tmsSendData    greenBlockPal, 8
   296  81e5 a93e8524a9918525...        +tmsSendDataRpt greenBlockPal + 8, 8, 2
   297  81f7 a9268524a9918525...        +tmsSendData    blueBlockPal, 8
   298  8204 a92e8524a9918525...        +tmsSendDataRpt blueBlockPal + 8, 8, 2
   299  8216 60                         rts
   300                          
   301                          ; -----------------------------------------------------------------------------
   302                          ; Generate paddle graphics
   303                          ; -----------------------------------------------------------------------------
   304                          generatePaddleGlyphs:
   305  8217 0878a9008d117f20...        +tmsSetAddrPattTableIIBank2 256 - 32
   306                          
   307                                  ; copy paddle left to ram
   308  822a ade590854eade690...        +memcpy TMP, paddlePatt, 8
   309                          
   310  8252 a008                       ldy #8
   311                          @generateNextPaddleLeft
   312                                  ; store in vram
   313  8254 5a                         phy
   314  8255 a94e8524a9008525...        +tmsSendData TMP, 8
   315  8262 7a                         ply
   316  8263 a200                       ldx #0
   317                          
   318                                  ; shift each row right one pixel
   319                          @nextPaddleRowL
   320  8265 564e                       lsr TMP, x
   321  8267 e8                         inx
   322  8268 e008                       cpx #8
   323  826a d0f9                       bne @nextPaddleRowL
   324                          
   325                                  ; next tile?
   326  826c 88                         dey
   327  826d d0e5                       bne @generateNextPaddleLeft
   328                          
   329                                  ; send paddle centre to vram
   330  826f a9ed8524a9908525...        +tmsSendData paddlePatt + 8, 8
   331                          
   332                                  ; copy paddle right to ram
   333  827c adf590854eadf690...        +memcpy TMP, paddlePatt + 16, 8
   334                          
   335                          
   336  82a4 a008                       ldy #8
   337                          @generateNextPaddleRight
   338                          
   339                                  ; store in vram
   340  82a6 5a                         phy
   341  82a7 a94e8524a9008525...        +tmsSendData TMP, 8
   342  82b4 7a                         ply
   343  82b5 a200                       ldx #0
   344                          
   345                                  ; shift each row left one pixel
   346                          @nextPaddleRow
   347  82b7 164e                       asl TMP, x
   348  82b9 e8                         inx
   349  82ba e008                       cpx #8
   350  82bc d0f9                       bne @nextPaddleRow
   351                          
   352                                  ; next tile?
   353  82be 88                         dey
   354  82bf d0e5                       bne @generateNextPaddleRight
   355                          
   356                                  ; set up paddle row colors
   357  82c1 0878a9008d117f20...        +tmsSetAddrColorTableIIBank2 256 - 32
   358  82d4 a9cd8524a9908525...        +tmsSendDataRpt paddlePal, 8, 32
   359  82eb 60                         rts
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; Initialise sprites
   363                          ; -----------------------------------------------------------------------------
   364                          initSprites:
   365                                  ; create ball pattern
   366  82ec 0878a9008d117f20...        +tmsCreateSpritePattern BALL_SPRITE_INDEX, ballPattern
   367  830f 0878a9088d117f20...        +tmsCreateSpritePattern BALL_SHADOW_INDEX, ballPattern + 8
   368                          
   369                                  ; create paddle highlight patterns
   370  8332 0878a9108d117f20...        +tmsCreateSpritePattern PADDLE_L_SPRITE_INDEX, paddleLeftSpr
   371  8355 0878a9188d117f20...        +tmsCreateSpritePattern PADDLE_R_SPRITE_INDEX, paddleRightSpr
   372                                  
   373                                  ; create ball sprites
   374  8378 0878a9008d117f20...        +tmsCreateSprite 0, 0, 0, $d0, BALL_BASE
   375  83ab 0878a9048d117f20...        +tmsCreateSprite 1, 1, 0, $d0, BALL_SHADE
   376                          
   377                                  ; create paddle highlight sprites
   378  83de 0878a9088d117f20...        +tmsCreateSprite 2, 2, 0, 0, PADDLE_COLOR_HIGH
   379  8411 0878a90c8d117f20...        +tmsCreateSprite 3, 3, 0, 0, PADDLE_COLOR_SHADE
   380                          
   381  8444 0878a9108d117f20...        +tmsSetLastSprite 3
   382  8467 60                         rts
   383                          
   384                          ; -----------------------------------------------------------------------------
   385                          ; Write UI elements to VRAM
   386                          ; -----------------------------------------------------------------------------
   387                          uiTilesToVram:
   388                                  ; border patterns
   389  8468 0878a9d08d117f20...        +tmsSetAddrPattTableIIBank0 BORDER_TILE_INDEX
   390  847b a96b8524a9918525...        +tmsSendData borderTL, 10 * 8
   391  8488 0878a9d08d117f20...        +tmsSetAddrPattTableIIBank1 BORDER_TILE_INDEX
   392  849b a96b8524a9918525...        +tmsSendData borderTL, 10 * 8
   393  84a8 0878a9d08d117f20...        +tmsSetAddrPattTableIIBank2 BORDER_TILE_INDEX
   394  84bb a96b8524a9918525...        +tmsSendData borderTL, 10 * 8
   395                          
   396                                  ; border palette
   397  84c8 0878a9d08d117f20...        +tmsSetAddrColorTableIIBank0 BORDER_TILE_INDEX
   398  84db 203f87                     jsr @sendBorderPal
   399  84de 0878a9d08d117f20...        +tmsSetAddrColorTableIIBank1 BORDER_TILE_INDEX
   400  84f1 203f87                     jsr @sendBorderPal
   401  84f4 0878a9d08d117f20...        +tmsSetAddrColorTableIIBank2 BORDER_TILE_INDEX
   402  8507 203f87                     jsr @sendBorderPal
   403                          
   404                                  ; title data
   405  850a 0878a9008d117f20...        +tmsSetAddrPattTableIIBank0 TITLE_TILE_INDEX
   406  851d a9c58524a9918525...        +tmsSendData titlePatt, 8 * TITLE_WIDTH * TITLE_HEIGHT
   407                          
   408  852a 0878a9008d117f20...        +tmsSetAddrPattTableIIBank1 TITLE_TILE_INDEX
   409  853d a9c58524a9918525...        +tmsSendData titlePatt, 8 * TITLE_WIDTH * TITLE_HEIGHT
   410                          
   411  854a 0878a9008d117f20...        +tmsSetAddrColorTableIIBank0 128
   412  855d a9558524a9928525...        +tmsSendDataRpt titlePal, 8, TITLE_WIDTH
   413  8574 a95d8524a9928525...        +tmsSendDataRpt titlePal + 8, 8, TITLE_WIDTH
   414                          
   415  858b 0878a9008d117f20...        +tmsSetAddrColorTableIIBank1 128
   416  859e a9558524a9928525...        +tmsSendDataRpt titlePal, 8, TITLE_WIDTH
   417  85b5 a95d8524a9928525...        +tmsSendDataRpt titlePal + 8, 8, TITLE_WIDTH
   418                          
   419                                  ; label data
   420  85cc 0878a9908d117f20...        +tmsSetAddrPattTableIIBank0 LEVEL_TILE_INDEX
   421  85df a9658524a9928525...        +tmsSendData levelPatt, 8 *LABEL_WIDTH * 3
   422                          
   423  85ec 0878a9908d117f20...        +tmsSetAddrPattTableIIBank1 LEVEL_TILE_INDEX
   424  85ff a9658524a9928525...        +tmsSendData levelPatt, 8 * LABEL_WIDTH * 3
   425                          
   426  860c 0878a9908d117f20...        +tmsSetAddrColorTableIIBank0 LEVEL_TILE_INDEX
   427  861f a90d8524a9938525...        +tmsSendDataRpt labelPal, 8, LABEL_WIDTH * 3
   428                          
   429  8636 0878a9908d117f20...        +tmsSetAddrColorTableIIBank1 LEVEL_TILE_INDEX
   430  8649 a90d8524a9938525...        +tmsSendDataRpt labelPal, 8, LABEL_WIDTH * 3
   431                          
   432                                  ; digits data
   433                                  NUM_DIGITS = 10
   434  8660 0878a9808d117f20...        +tmsSetAddrPattTableIIBank0 '0'
   435  8673 a9158524a9938525...        +tmsSendData digitsPatt, 8 * NUM_DIGITS
   436  8680 0878a9808d117f20...        +tmsSetAddrPattTableIIBank1 '0'
   437  8693 a9158524a9938525...        +tmsSendData digitsPatt, 8 * NUM_DIGITS
   438  86a0 0878a9808d117f20...        +tmsSetAddrPattTableIIBank2 '0'
   439  86b3 a9158524a9938525...        +tmsSendData digitsPatt, 8 * NUM_DIGITS
   440                          
   441  86c0 0878a9808d117f20...        +tmsSetAddrColorTableIIBank0 '0'
   442  86d3 a9658524a9938525...        +tmsSendDataRpt digitsPal, 8, NUM_DIGITS
   443                          
   444  86ea 0878a9808d117f20...        +tmsSetAddrColorTableIIBank1 '0'
   445  86fd a9658524a9938525...        +tmsSendDataRpt digitsPal, 8, NUM_DIGITS
   446                          
   447  8714 0878a9808d117f20...        +tmsSetAddrColorTableIIBank2 '0'
   448  8727 a9658524a9938525...        +tmsSendDataRpt digitsPal, 8, NUM_DIGITS
   449  873e 60                         rts
   450                          
   451                          @sendBorderPal
   452  873f a9bc8524a9918525...        +tmsSendDataRpt borderPal + 1, 8, 3
   453  8756 a9bd8524a9918525...        +tmsSendDataRpt borderPal + 2, 8, 6
   454  876d a9bb8524a9918525...        +tmsSendDataRpt borderPal,     8, 1
   455  877a 60                         rts
   456                          
   457                          ; -----------------------------------------------------------------------------
   458                          ; Add two subpixel values
   459                          ; -----------------------------------------------------------------------------
   460                          !macro addSubPixel pos, spd, dir {
   461                                  bit dir
   462                                  bpl @posDir
   463                          @negDir
   464                                  clc
   465                                  lda pos + 1
   466                                  adc spd + 1
   467                                  sta pos + 1
   468                                  lda pos
   469                                  bcs +
   470                                  dec
   471                          +
   472                                  sec
   473                                  sbc spd
   474                                  sta pos
   475                                  bra @end
   476                          @posDir
   477                                  clc
   478                                  lda pos + 1
   479                                  adc spd + 1
   480                                  sta pos + 1
   481                                  
   482                                  lda pos
   483                                  adc spd
   484                                  sta pos
   485                          @end
   486                          }
   487                          
   488                          ; -----------------------------------------------------------------------------
   489                          ; Initialise audio
   490                          ; -----------------------------------------------------------------------------
   491                          initAudio:
   492  877b a9078d407fad427f...        +ayToneEnable AY_PSG0, AY_CHC
   493  878d a90a8d407fa9008d...        +aySetVolume AY_PSG0, AY_CHC, $00
   494  8797 a90d8d407fa9098d...        +aySetEnvShape AY_PSG0,AY_ENV_SHAPE_FADE_OUT
   495  87a1 60                         rts
   496                          
   497                          ; -----------------------------------------------------------------------------
   498                          ; Play a note from the notes tables
   499                          ; Inputs:
   500                          ;   X = index into notes tables
   501                          ; -----------------------------------------------------------------------------
   502                          playNote:
   503  87a2 854e                       sta TMP
   504                          
   505  87a4 a900                       lda #0
   506  87a6 a2048e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_L
   507  87ae a2058e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_H
   508                          
   509  87b6 a64e                       ldx TMP
   510  87b8 bd6d93                     lda notesL, x
   511  87bb a2048e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_L
   512  87c3 bd8b93                     lda notesH, x
   513  87c6 a2058e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_H
   514                          
   515  87ce a90a8d407fa9108d...        +aySetVolumeEnvelope AY_PSG0, AY_CHC
   516  87d8 a90d8d407fa9098d...        +aySetEnvShape AY_PSG0,AY_ENV_SHAPE_FADE_OUT
   517  87e2 a90b8d407fa9908d...        +aySetEnvelopePeriod AY_PSG0, AUDIO_TONE_PERIOD
   518                          
   519  87f6 60                         rts
   520                          
   521                          
   522                          ; -----------------------------------------------------------------------------
   523                          ; Load level data from ROM
   524                          ; Inputs:
   525                          ;   LEVEL = level number to load
   526                          ; -----------------------------------------------------------------------------
   527                          loadLevel:
   528  87f7 a544                       lda LEVEL
   529  87f9 3a                         dec
   530  87fa 2903                       and #$03
   531  87fc 0a                         asl
   532  87fd aa                         tax
   533                          
   534  87fe bda993                     lda levelMap, x
   535  8801 8530                       sta MEM_SRC
   536  8803 e8                         inx
   537  8804 bda993                     lda levelMap, X
   538  8807 8531                       sta MEM_SRC + 1
   539                          
   540  8809 a900852ea904852f           +setMemCpyDst LEVEL_DATA
   541                          
   542  8811 a060                       ldy #LEVEL_SIZE
   543                          
   544  8813 20a3e0                     jsr memcpySinglePage
   545                          
   546  8816 60                         rts
   547                          
   548                          ; -----------------------------------------------------------------------------
   549                          ; Render the level
   550                          ; -----------------------------------------------------------------------------
   551                          renderLevel:
   552  8817 644a                       stz BLOCKS_LEFT
   553                          
   554  8819 a200                       ldx #0
   555                          -
   556  881b 202b88                     jsr renderBlock
   557  881e bd0004                     lda LEVEL_DATA, x
   558  8821 f002                       beq +
   559  8823 e64a                       inc BLOCKS_LEFT
   560                          +
   561  8825 e8                         inx
   562  8826 e060                       cpx #LEVEL_SIZE
   563  8828 d0f1                       bne -
   564  882a 60                         rts
   565                          
   566                          
   567                          ; -----------------------------------------------------------------------------
   568                          ; Render a level brick
   569                          ; Inputs:
   570                          ;   X = level brick index
   571                          ; -----------------------------------------------------------------------------
   572                          renderBlock:
   573  882b da                         phx
   574                          
   575                                  ; calculate y tile
   576  882c 864e                       stx TMP
   577  882e 8a                         txa
   578  882f 4a4a4a                     +div8   ; divide by level stride
   579  8832 1a                         inc ; start at row 1
   580  8833 a8                         tay
   581                          
   582                                  ; calculate x tile
   583  8834 a54e                       lda TMP
   584  8836 2907                       and #$07
   585  8838 c907                       cmp #LEVEL_WIDTH
   586  883a b02a                       bcs @endRender
   587  883c 854e                       sta TMP
   588  883e 0a                         asl
   589  883f 38                         sec
   590  8840 654e                       adc TMP
   591  8842 aa                         tax
   592                          
   593                                  ; set tms address
   594  8843 20ede7                     jsr tmsSetPosTmpAddress
   595  8846 2092e5                     jsr tmsSetAddressWrite
   596                          
   597  8849 fa                         plx
   598  884a da                         phx
   599                          
   600                                  ; get brick type
   601  884b bd0004                     lda LEVEL_DATA, x
   602  884e aa                         tax
   603                          
   604                                  ; get brick tile index
   605  884f bd6691                     lda tileData, x
   606                          
   607                                  ; render the three brick tiles
   608  8852 8d107f2079e5               +tmsPut
   609  8858 1a                         inc
   610  8859 8d107f2079e5               +tmsPut
   611  885f 1a                         inc
   612  8860 8d107f2079e5               +tmsPut
   613                          
   614                          @endRender:
   615  8866 fa                         plx
   616  8867 60                         rts
   617                          
   618                          ; -----------------------------------------------------------------------------
   619                          ; Reset paddle and ball - start a round
   620                          ; -----------------------------------------------------------------------------
   621                          resetPaddle:
   622                          
   623                                  ; reset paddle position an dsize
   624  8868 a94c                       lda #(GAME_AREA_WIDTH - PADDLE_WIDTH) / 2 + GAME_AREA_LEFT
   625  886a 8542                       sta PADX
   626  886c a920                       lda #PADDLE_WIDTH
   627  886e 8543                       sta PADW
   628                          
   629                                  ; reset ball position and speed
   630  8870 6439                       stz POSX_SUB
   631  8872 643b                       stz POSY_SUB
   632                          
   633  8874 643c                       stz SPDX
   634  8876 a902                       lda #2
   635  8878 853e                       sta SPDY
   636                          
   637  887a 643d                       stz SPDX_SUB
   638  887c 643f                       stz SPDY_SUB
   639                          
   640  887e a901                       lda #1
   641  8880 8540                       sta DIRX
   642  8882 a9ff                       lda #-1
   643  8884 8541                       sta DIRY
   644                          
   645  8886 a959                       lda #GAME_AREA_WIDTH / 2 + GAME_AREA_LEFT - 3
   646  8888 8538                       sta POSX
   647                          
   648  888a a9b5                       lda #PADDLE_SPRITE_Y - 6
   649  888c 853a                       sta POSY
   650                          
   651                                  ; clear the paddle row
   652  888e 0878a9e18d117f20...        +tmsSetPosWrite 1, PADDLE_ROW
   653  88a1 a215a9008d107f20...        +tmsPutRpt 0, LEVEL_WIDTH * BRICKS_WIDTH
   654                          
   655  88ae 20e58c                     jsr renderPaddle
   656                          
   657                                  ; output ball count
   658  88b1 0878a93a8d117f20...        +tmsSetPosWrite BALLS_X, BALLS_Y
   659  88c4 a9308d107f2079e5           +tmsPut '0'
   660  88cc a548                       lda BALLS
   661  88ce 20e989                     jsr outputBCD
   662                          
   663  88d1 60                         rts
   664                          
   665                          ; -----------------------------------------------------------------------------
   666                          ; Ball lost
   667                          ; -----------------------------------------------------------------------------
   668                          loseBall:
   669                                  ; reset multiplier
   670  88d2 a901                       lda #1
   671  88d4 8549                       sta MULT
   672                                  
   673                                  ; lose a ball
   674  88d6 c648                       dec BALLS
   675                          
   676                                  ; last ball?
   677  88d8 3012                       bmi endGame
   678                          
   679  88da 206888                     jsr resetPaddle
   680                          
   681  88dd a9708de37ca98f8d...        +hbc56SetVsyncCallback gameLoopWaitForStart
   682                          
   683  88e7 60                         rts
   684                          
   685                          ; -----------------------------------------------------------------------------
   686                          ; Advance a level
   687                          ; -----------------------------------------------------------------------------
   688                          nextLevel
   689  88e8 e644                       inc LEVEL
   690  88ea 8026                       bra startGameLevel
   691                          
   692                          
   693                          ; -----------------------------------------------------------------------------
   694                          ; End game
   695                          ; -----------------------------------------------------------------------------
   696                          endGame:
   697  88ec 205f8c                     jsr renderEndGameBox
   698  88ef a9b48de37ca98f8d...        +hbc56SetVsyncCallback gameLoopGameOver
   699  88f9 60                         rts
   700                          
   701                          
   702                          ; -----------------------------------------------------------------------------
   703                          ; Reset the game - new game
   704                          ; -----------------------------------------------------------------------------
   705                          resetGame:
   706                                  ; level 1
   707  88fa a901                       lda #1
   708  88fc 8544                       sta LEVEL
   709                          
   710                                  ; score 0
   711  88fe a900                       lda #0
   712  8900 8547                       sta SCORE_L
   713  8902 8546                       sta SCORE_M
   714  8904 8545                       sta SCORE_H
   715                          
   716                                  ; ball count
   717  8906 a904                       lda #INITIAL_BALLS
   718  8908 8548                       sta BALLS
   719                          
   720  890a a901                       lda #PADDLE_SPEED
   721  890c 854b                       sta PADSPD
   722  890e a900                       lda #PADDLE_SPEED_SUB
   723  8910 854c                       sta PADSPD_SUB
   724                          
   725                          ; -----------------------------------------------------------------------------
   726                          ; Start a new level
   727                          ; -----------------------------------------------------------------------------
   728                          startGameLevel:
   729                          
   730  8912 a92020efe5                 +tmsDisableInterrupts
   731  8917 a94020efe5                 +tmsDisableOutput
   732                          
   733  891c 0878a9008d117f20...        +tmsSpritePos 0, 0, $d0
   734  893f 0878a9048d117f20...        +tmsSpritePos 1, 0, $d0
   735                          
   736  8962 206888                     jsr resetPaddle
   737                          
   738  8965 20f787                     jsr loadLevel
   739                          
   740  8968 201788                     jsr renderLevel
   741                          
   742  896b 20048a                     jsr renderBorder
   743                          
   744  896e 20db8b                     jsr renderLevelBox
   745                          
   746                                  ; output level number
   747  8971 0878a9fa8d117f20...        +tmsSetPosWrite LEVEL_X, LEVEL_Y
   748  8984 a9308d107f2079e5           +tmsPut '0'
   749  898c a544                       lda LEVEL
   750  898e 20e989                     jsr outputBCD
   751                          
   752  8991 a900                       lda #0
   753  8993 20b089                     jsr addScore
   754                          
   755                                  ; set up game loop as vsync callback
   756  8996 adca7c                     lda HBC56_SECONDS_L
   757  8999 854d                       sta START_TIME
   758                          
   759  899b a94b8de37ca98f8d...        +hbc56SetVsyncCallback gameLoopNewLevel
   760                          
   761  89a5 a94020e5e5                 +tmsEnableOutput
   762  89aa a92020e5e5                 +tmsEnableInterrupts
   763                          
   764  89af 60                         rts
   765                          
   766                          ; -----------------------------------------------------------------------------
   767                          ; Add to the score
   768                          ; Inputs:
   769                          ;   A = BCD encoded points to add
   770                          ; -----------------------------------------------------------------------------
   771                          addScore:
   772  89b0 f8                         sed
   773  89b1 6547                       adc SCORE_L
   774  89b3 8547                       sta SCORE_L
   775  89b5 900e                       bcc @endAddScore
   776  89b7 a900                       lda #0
   777  89b9 6546                       adc SCORE_M
   778  89bb 8546                       sta SCORE_M
   779  89bd 9006                       bcc @endAddScore
   780  89bf a900                       lda #0
   781  89c1 6545                       adc SCORE_H
   782  89c3 8545                       sta SCORE_H
   783                          
   784                          @endAddScore
   785  89c5 d8                         cld
   786                          
   787                                  ; output score
   788  89c6 0878a9998d117f20...        +tmsSetPosWrite SCORE_X, SCORE_Y
   789  89d9 a545                       lda SCORE_H
   790  89db 20f989                     jsr outputBCDLow
   791  89de a546                       lda SCORE_M
   792  89e0 20e989                     jsr outputBCD
   793  89e3 a547                       lda SCORE_L
   794  89e5 20e989                     jsr outputBCD
   795  89e8 60                         rts
   796                          
   797                          ; -----------------------------------------------------------------------------
   798                          ; Output two BCD digits to current location
   799                          ; Inputs:
   800                          ;   A = BCD encoded value
   801                          ; -----------------------------------------------------------------------------
   802                          outputBCD:
   803  89e9 854e                       sta TMP
   804  89eb 4a4a4a4a                   +lsr4
   805  89ef 0930                       ora #'0'
   806  89f1 8d107f2079e5               +tmsPut
   807  89f7 a54e                       lda TMP
   808                          outputBCDLow:
   809  89f9 290f                       and #$0f
   810  89fb 0930                       ora #'0'
   811  89fd 8d107f2079e5               +tmsPut
   812  8a03 60                         rts
   813                          
   814                          ; -----------------------------------------------------------------------------
   815                          ; Render the game border and ui
   816                          ; -----------------------------------------------------------------------------
   817                          renderBorder:
   818                                  ; border top
   819  8a04 0878a9008d117f20...        +tmsSetPosWrite BORDER_X, BORDER_Y
   820  8a17 a91a8d107f2079e5           +tmsPut BORDER_TL_INDEX
   821  8a1f a215a91b8d107f20...        +tmsPutRpt BORDER_TOP_INDEX, BORDER_WIDTH - 2
   822  8a2c a91c8d107f2079e5           +tmsPut BORDER_TR_INDEX
   823                          
   824                                  ; left border
   825  8a34 a200                       ldx #BORDER_X
   826  8a36 a001                       ldy #BORDER_Y + 1
   827  8a38 20ede7                     jsr tmsSetPosTmpAddress
   828  8a3b 2092e5                     jsr tmsSetAddressWrite
   829  8a3e a216                       ldx #BORDER_HEIGHT - 2
   830                          -
   831  8a40 a91d8d107f2079e5           +tmsPut BORDER_L_INDEX
   832  8a48 2086e5                     jsr tmsSetAddressNextRow
   833  8a4b 2092e5                     jsr tmsSetAddressWrite
   834  8a4e ca                         dex
   835  8a4f d0ef                       bne -
   836  8a51 a91f8d107f2079e5           +tmsPut BORDER_LB_INDEX
   837                          
   838                                  ; right border
   839  8a59 a216                       ldx #BORDER_X + BORDER_WIDTH - 1
   840  8a5b a001                       ldy #BORDER_Y + 1
   841  8a5d 20ede7                     jsr tmsSetPosTmpAddress
   842  8a60 2092e5                     jsr tmsSetAddressWrite
   843  8a63 a216                       ldx #BORDER_HEIGHT - 2
   844                          -
   845  8a65 a91e8d107f2079e5           +tmsPut BORDER_R_INDEX
   846  8a6d 2086e5                     jsr tmsSetAddressNextRow
   847  8a70 2092e5                     jsr tmsSetAddressWrite
   848  8a73 ca                         dex
   849  8a74 d0ef                       bne -
   850  8a76 a9208d107f2079e5           +tmsPut BORDER_RB_INDEX
   851                          
   852                                  ; render title
   853  8a7e 0878a9178d117f20...        +tmsSetPosWrite TITLE_X, TITLE_Y
   854  8a91 a9808d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX, TITLE_WIDTH
   855  8a9e 0878a9378d117f20...        +tmsSetPosWrite TITLE_X, TITLE_Y + 1
   856  8ab1 a9898d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX + TITLE_WIDTH, TITLE_WIDTH
   857                          
   858                                  ; render labels
   859  8abe 0878a9b88d117f20...        +tmsSetPosWrite LEVEL_LABEL_X, LEVEL_LABEL_Y
   860  8ad1 a9928d107f2079e5...        +tmsPutSeq LEVEL_TILE_INDEX, LABEL_WIDTH
   861                          
   862  8ade 0878a9588d117f20...        +tmsSetPosWrite SCORE_LABEL_X, SCORE_LABEL_Y
   863  8af1 a9998d107f2079e5...        +tmsPutSeq SCORE_TILE_INDEX, LABEL_WIDTH
   864                          
   865  8afe 0878a9f88d117f20...        +tmsSetPosWrite BALLS_LABEL_X, BALLS_LABEL_Y
   866  8b11 a9a08d107f2079e5...        +tmsPutSeq BALLS_TILE_INDEX, LABEL_WIDTH
   867                          
   868  8b1e 60                         rts
   869                          
   870                          ; -----------------------------------------------------------------------------
   871                          ; Render dialog box
   872                          ; -----------------------------------------------------------------------------
   873                          renderBox:
   874                                  ; border top
   875  8b1f 0878a9e48d117f20...        +tmsSetPosWrite BOX_X, BOX_Y
   876  8b32 a91a8d107f2079e5           +tmsPut BORDER_TL_INDEX
   877  8b3a a20da91b8d107f20...        +tmsPutRpt BORDER_TOP_INDEX, BOX_W - 2
   878  8b47 a91c8d107f2079e5           +tmsPut BORDER_TR_INDEX
   879                          
   880  8b4f a908                       lda #BOX_H - 2
   881  8b51 854e                       sta TMP
   882                          
   883  8b53 a204                       ldx #BOX_X
   884  8b55 a008                       ldy #BOX_Y + 1
   885  8b57 20ede7                     jsr tmsSetPosTmpAddress
   886  8b5a 2092e5                     jsr tmsSetAddressWrite
   887                          -
   888  8b5d a91d8d107f2079e5           +tmsPut BORDER_L_INDEX
   889  8b65 a20da9008d107f20...        +tmsPutRpt 0, BOX_W - 2
   890  8b72 a91e8d107f2079e5           +tmsPut BORDER_R_INDEX
   891                          
   892  8b7a 2086e5                     jsr tmsSetAddressNextRow
   893  8b7d 2092e5                     jsr tmsSetAddressWrite
   894                          
   895  8b80 c64e                       dec TMP
   896  8b82 d0d9                       bne -
   897                          
   898                                  ; border bottom
   899  8b84 0878a9048d117f20...        +tmsSetPosWrite BOX_X, BOX_Y + BOX_H - 1
   900  8b97 a9218d107f2079e5           +tmsPut BORDER_BL_INDEX
   901  8b9f a20da9238d107f20...        +tmsPutRpt BORDER_B_INDEX, BOX_W - 2
   902  8bac a9228d107f2079e5           +tmsPut BORDER_BR_INDEX
   903  8bb4 60                         rts
   904                          
   905                          ; -----------------------------------------------------------------------------
   906                          ; Clear the dialog box
   907                          ; -----------------------------------------------------------------------------
   908                          clearBox:
   909  8bb5 a90a                       lda #BOX_H
   910  8bb7 854e                       sta TMP
   911                          
   912  8bb9 a204                       ldx #BOX_X
   913  8bbb a007                       ldy #BOX_Y
   914  8bbd 20ede7                     jsr tmsSetPosTmpAddress
   915  8bc0 2092e5                     jsr tmsSetAddressWrite
   916                          -
   917  8bc3 a20fa9008d107f20...        +tmsPutRpt 0, BOX_W
   918                          
   919  8bd0 2086e5                     jsr tmsSetAddressNextRow
   920  8bd3 2092e5                     jsr tmsSetAddressWrite
   921                          
   922  8bd6 c64e                       dec TMP
   923  8bd8 d0e9                       bne -
   924                          
   925  8bda 60                         rts
   926                          
   927                          ; -----------------------------------------------------------------------------
   928                          ; Render the level dialog box
   929                          ; -----------------------------------------------------------------------------
   930                          renderLevelBox:
   931  8bdb 201f8b                     jsr renderBox
   932                          
   933  8bde 0878a9278d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y
   934  8bf1 a9808d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX, TITLE_WIDTH
   935  8bfe 0878a9478d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y + 1
   936  8c11 a9898d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX + TITLE_WIDTH, TITLE_WIDTH
   937                          
   938  8c1e 0878a9888d117f20...        +tmsSetPosWrite BOX_LABEL_X, BOX_LABEL_Y
   939  8c31 a9928d107f2079e5...        +tmsPutSeq LEVEL_TILE_INDEX, LABEL_WIDTH
   940                          
   941  8c3e 0878a9ca8d117f20...        +tmsSetPosWrite BOX_LABEL_X + 2, BOX_LABEL_Y + 2
   942  8c51 a9308d107f2079e5           +tmsPut '0'
   943  8c59 a544                       lda LEVEL
   944  8c5b 20e989                     jsr outputBCD
   945                          
   946  8c5e 60                         rts
   947                          
   948                          ; -----------------------------------------------------------------------------
   949                          ; Render the end game dialog box
   950                          ; -----------------------------------------------------------------------------
   951                          renderEndGameBox:
   952  8c5f 201f8b                     jsr renderBox
   953                          
   954  8c62 0878a9278d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y
   955  8c75 a9808d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX, TITLE_WIDTH
   956  8c82 0878a9478d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y + 1
   957  8c95 a9898d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX + TITLE_WIDTH, TITLE_WIDTH
   958                          
   959  8ca2 0878a9888d117f20...        +tmsSetPosWrite BOX_LABEL_X, BOX_LABEL_Y
   960  8cb5 a9998d107f2079e5...        +tmsPutSeq SCORE_TILE_INDEX, LABEL_WIDTH
   961                          
   962  8cc2 0878a9c98d117f20...        +tmsSetPosWrite BOX_LABEL_X + 1, BOX_LABEL_Y + 2
   963                          
   964  8cd5 a545                       lda SCORE_H
   965  8cd7 20f989                     jsr outputBCDLow
   966  8cda a546                       lda SCORE_M
   967  8cdc 20e989                     jsr outputBCD
   968  8cdf a547                       lda SCORE_L
   969  8ce1 20e989                     jsr outputBCD
   970                          
   971  8ce4 60                         rts
   972                          
   973                          ; -----------------------------------------------------------------------------
   974                          ; Render the paddle
   975                          ; -----------------------------------------------------------------------------
   976                          renderPaddle:
   977                          
   978                                  ; only support paddles > 8 pixels
   979  8ce5 a543                       lda PADW
   980  8ce7 c908                       cmp #8
   981  8ce9 b001                       bcs +
   982  8ceb 60                         rts
   983                          +
   984                          
   985                                  ; find paddle offset tile (x tile)
   986  8cec a542                       lda PADX
   987  8cee 4a4a4a                     +div8
   988  8cf1 854e                       sta TMP
   989  8cf3 c901                       cmp #1
   990  8cf5 f001                       beq +
   991  8cf7 3a                         dec
   992                          +
   993                                  ; set tms address
   994  8cf8 aa                         tax
   995  8cf9 a017                       ldy #PADDLE_ROW
   996  8cfb 20ede8                     jsr tmsSetPosWrite
   997                          
   998                                  ; output a blank tile
   999  8cfe a54e                       lda TMP
  1000  8d00 c901                       cmp #1
  1001  8d02 f008                       beq +
  1002  8d04 a9008d107f2079e5           +tmsPut 0
  1003                          +
  1004                                  ; find paddle pixel offset within the start tile
  1005                                  ; and store in x        
  1006  8d0c a542                       lda PADX
  1007  8d0e 2907                       and #$07
  1008  8d10 aa                         tax
  1009                          
  1010                                  ; store pixels remaining in TMP
  1011  8d11 18                         clc
  1012  8d12 6543                       adc PADW
  1013  8d14 38                         sec
  1014  8d15 e908                       sbc #8
  1015  8d17 854e                       sta TMP
  1016                          
  1017                                  ; find the correct tile index
  1018  8d19 bdfd90                     lda leftPatterns, x
  1019  8d1c 8d107f2079e5               +tmsPut
  1020                          
  1021                          @loop
  1022                                  ; home many pixels left?
  1023  8d22 a54e                       lda TMP
  1024  8d24 f01b                       beq @doneDraw
  1025                          
  1026                                  ; get pixel count for this tile
  1027                                  ; 9 or more? call it 8
  1028  8d26 c909                       cmp #9
  1029  8d28 9002                       bcc +
  1030  8d2a a908                       lda #8
  1031                          +
  1032                                  ; compute remaining pixels
  1033  8d2c aa                         tax
  1034  8d2d a54e                       lda TMP
  1035  8d2f 864e                       stx TMP
  1036  8d31 38                         sec
  1037  8d32 e54e                       sbc TMP
  1038  8d34 854e                       sta TMP
  1039                          
  1040                                  ; find the correct tile index
  1041  8d36 bd0591                     lda rightPatterns, x
  1042  8d39 8d107f2079e5               +tmsPut
  1043  8d3f 80e1                       bra @loop
  1044                          
  1045                          @doneDraw:
  1046                          
  1047                                  ; output an empty tile
  1048  8d41 a542                       lda PADX
  1049  8d43 18                         clc
  1050  8d44 6543                       adc PADW
  1051  8d46 c9a8                       cmp #GAME_AREA_RIGHT-8
  1052  8d48 b008                       bcs +
  1053  8d4a a9008d107f2079e5           +tmsPut 0
  1054                          +
  1055                          
  1056                                  ; reposition the paddle highlight sprites
  1057  8d52 a642                       ldx PADX
  1058  8d54 a0bb                       ldy #PADDLE_SPRITE_Y
  1059  8d56 0878a9088d117f20...        +tmsSpritePosXYReg PADDLE_L_SPRITE_INDEX
  1060  8d77 18                         clc
  1061  8d78 8a                         txa
  1062  8d79 6543                       adc PADW
  1063  8d7b 3a                         dec
  1064  8d7c aa                         tax
  1065  8d7d 0878a90c8d117f20...        +tmsSpritePosXYReg PADDLE_R_SPRITE_INDEX
  1066  8d9e 60                         rts
  1067                          
  1068                          ; -----------------------------------------------------------------------------
  1069                          ; Render the ball
  1070                          ; -----------------------------------------------------------------------------
  1071                          renderBall:
  1072                                  ; get ball pixel position (rounding subpixel)
  1073  8d9f a638                       ldx POSX
  1074  8da1 2439                       bit POSX_SUB
  1075  8da3 1001                       bpl +
  1076  8da5 e8                         inx
  1077                          +
  1078  8da6 a43a                       ldy POSY
  1079  8da8 243b                       bit POSY_SUB
  1080  8daa 1001                       bpl +
  1081  8dac c8                         iny
  1082                          +
  1083                                  ; update ball sprite locations
  1084  8dad 0878a9008d117f20...        +tmsSpritePosXYReg BALL_SPRITE_INDEX
  1085  8dce 0878a9048d117f20...        +tmsSpritePosXYReg BALL_SHADOW_INDEX
  1086  8def 60                         rts
  1087                          
  1088                          ; -----------------------------------------------------------------------------
  1089                          ; convert a pixel position to a game brick index
  1090                          ; Inputs:
  1091                          ;   X = x location (in pixels)
  1092                          ;   Y = y location (in pixels)
  1093                          ; Returns;
  1094                          ;   A = Game brick / level index
  1095                          ; -----------------------------------------------------------------------------
  1096                          posToLevelCell:
  1097                          
  1098                                  ; compute offset for x tile index
  1099  8df0 8a                         txa
  1100  8df1 4a4a4a                     +div8
  1101  8df4 aa                         tax
  1102  8df5 bd0e8e                     lda @xPosToLevelCell, x
  1103                          
  1104                                  ; not valid? bail
  1105  8df8 c9ff                       cmp #NO_BRICK
  1106  8dfa f011                       beq @outOfBounds
  1107                          
  1108  8dfc 854e                       sta TMP
  1109                          
  1110                                  ; compute offset for y tile index
  1111  8dfe 98                         tya
  1112  8dff 4a4a4a                     +div8
  1113  8e02 a8                         tay
  1114  8e03 b92a8e                     lda @yPosToLevelCell, y
  1115                          
  1116                                  ; not valid? bail
  1117  8e06 c9ff                       cmp #NO_BRICK
  1118  8e08 f003                       beq @outOfBounds
  1119                          
  1120                                  ; both valid. sum them to get a level index
  1121  8e0a 18                         clc
  1122  8e0b 654e                       adc TMP
  1123                          
  1124                          @outOfBounds:
  1125  8e0d 60                         rts
  1126                          
  1127                          ; convert x tile index to level offset
  1128                          @xPosToLevelCell:
  1129  8e0e ff00000001010102...!byte NO_BRICK, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, NO_BRICK, NO_BRICK, NO_BRICK
  1130                          
  1131                          ; convert y tile index to level offset
  1132                          @yPosToLevelCell:
  1133  8e2a ff00081018202830...!byte NO_BRICK, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, NO_BRICK        
  1134                          
  1135                          
  1136                          ; -----------------------------------------------------------------------------
  1137                          ; negate a number (-ve to +ve and vice-versa)
  1138                          ; -----------------------------------------------------------------------------
  1139                          !macro negate val {
  1140                                  lda val
  1141                                  eor #$ff
  1142                                  inc
  1143                                  sta val
  1144                          }
  1145                          
  1146                          
  1147                          ; -----------------------------------------------------------------------------
  1148                          ; Call when we hit a brick.
  1149                          ; Inputs:
  1150                          ;   X = game brick index
  1151                          ; -----------------------------------------------------------------------------
  1152                          hitBrick:
  1153  8e3b a900                       lda #0
  1154  8e3d 9d0004                     sta LEVEL_DATA, x
  1155                          
  1156                                  ; clear brick
  1157  8e40 202b88                     jsr renderBlock
  1158                          
  1159                                  ; bounce ball
  1160  8e43 a54149ff1a8541             +negate DIRY
  1161                          
  1162                                  ; add to score (multiplier times)
  1163  8e4a a649                       ldx MULT
  1164                          -
  1165                                  ; increment score
  1166  8e4c a925                       lda #$25
  1167  8e4e 20b089                     jsr addScore
  1168  8e51 ca                         dex
  1169  8e52 d0f8                       bne -
  1170                          
  1171                                  ; increment multiplier
  1172  8e54 e649                       inc MULT
  1173                          
  1174                                  ; play a tone based on multiplier
  1175  8e56 a549                       lda MULT
  1176  8e58 1a                         inc
  1177  8e59 1a                         inc
  1178  8e5a 20a287                     jsr playNote
  1179  8e5d 60                         rts
  1180                          
  1181                          ; -----------------------------------------------------------------------------
  1182                          ; Call when we hit the paddle
  1183                          ; -----------------------------------------------------------------------------
  1184                          hitPaddle:
  1185                                  
  1186                                  ; paddle hit
  1187  8e5e a54149ff1a8541             +negate DIRY
  1188                          
  1189                                  ; accelerate ball
  1190  8e65 a2eb2075f3d023             +kbBranchIfPressed KB_SCANCODE_ARROW_LEFT, @leftPressed
  1191  8e6c 48a902203ef268b0...        +nes1BranchIfPressed NES_LEFT, @leftPressed
  1192                          @doneLeftCheck:
  1193                          
  1194  8e75 a2f42075f3d018             +kbBranchIfPressed KB_SCANCODE_ARROW_RIGHT, @rightPressed
  1195  8e7c 48a901203ef268b0...        +nes1BranchIfPressed NES_RIGHT, @rightPressed
  1196                          @doneRightCheck:
  1197                          
  1198                                  ; reset multiplier
  1199  8e85 a901                       lda #1
  1200  8e87 8549                       sta MULT
  1201                          
  1202  8e89 a906                       lda #TONE_PADDLE
  1203  8e8b 20a287                     jsr playNote
  1204  8e8e 60                         rts
  1205                          
  1206                          @leftPressed:
  1207  8e8f 20998e                     jsr @pushLeft
  1208  8e92 80e1                       bra @doneLeftCheck
  1209                          
  1210                          @rightPressed:
  1211  8e94 20d48e                     jsr @pushRight
  1212  8e97 80ec                       bra @doneRightCheck
  1213                          
  1214                          
  1215                          
  1216                          ; -----------------------------------------------------------------------------
  1217                          ; Accelerate ball left based on paddle movement
  1218                          ; -----------------------------------------------------------------------------
  1219                          @pushLeft:
  1220  8e99 a9ff                       lda #-1
  1221  8e9b 854e                       sta TMP
  1222  8e9d 244e101318a53d65...        +addSubPixel SPDX, PADSPD, TMP
  1223                          
  1224  8ec1 a53c                       lda SPDX
  1225  8ec3 100e                       bpl +
  1226  8ec5 a53c49ff1a853c             +negate SPDX
  1227  8ecc a54049ff1a8540             +negate DIRX
  1228                          +
  1229  8ed3 60                         rts
  1230                          
  1231                          ; -----------------------------------------------------------------------------
  1232                          ; Accelerate ball right based on paddle movement
  1233                          ; -----------------------------------------------------------------------------
  1234                          @pushRight:
  1235  8ed4 a901                       lda #1
  1236  8ed6 854e                       sta TMP
  1237  8ed8 244e101318a53d65...        +addSubPixel SPDX, PADSPD, TMP
  1238                          
  1239  8efc a53c                       lda SPDX
  1240  8efe 100e                       bpl +
  1241  8f00 a53c49ff1a853c             +negate SPDX
  1242  8f07 a54049ff1a8540             +negate DIRX
  1243                          +
  1244  8f0e 60                         rts
  1245                          
  1246                          ; -----------------------------------------------------------------------------
  1247                          ; Handle paddle input. Affect position
  1248                          ; -----------------------------------------------------------------------------
  1249                          handlePaddleInput:
  1250                          
  1251                                  ; left?
  1252  8f0f a21c2075f3d01a             +kbBranchIfPressed KB_SCANCODE_A, @leftPressed
  1253  8f16 48a902203ef268b0...        +nes1BranchIfPressed NES_LEFT, @leftPressed
  1254                          @doneLeftCheck:
  1255                          
  1256                                  ; right?
  1257  8f1f a2232075f3d016             +kbBranchIfPressed KB_SCANCODE_D, @rightPressed
  1258  8f26 48a901203ef268b0...        +nes1BranchIfPressed NES_RIGHT, @rightPressed
  1259                          
  1260                          @doneRightCheck:
  1261                          
  1262                          
  1263  8f2f 60                         rts
  1264                          
  1265                          @leftPressed:
  1266  8f30 a542                       lda PADX
  1267  8f32 c90a                       cmp #GAME_AREA_LEFT + 2
  1268  8f34 90e9                       bcc @doneLeftCheck
  1269  8f36 c642                       dec PADX
  1270  8f38 c642                       dec PADX
  1271  8f3a 80e3                       bra @doneLeftCheck
  1272                          
  1273                          @rightPressed:
  1274  8f3c a542                       lda PADX
  1275  8f3e 18                         clc
  1276  8f3f 6543                       adc PADW
  1277  8f41 c9ae                       cmp #GAME_AREA_RIGHT-2
  1278  8f43 b0ea                       bcs @doneRightCheck
  1279  8f45 e642                       inc PADX
  1280  8f47 e642                       inc PADX
  1281  8f49 80e4                       bra @doneRightCheck
  1282                          
  1283                          
  1284                          ; -----------------------------------------------------------------------------
  1285                          ; New level started - wait a couple of seconds (tied to VSYNC interrupt)
  1286                          ; -----------------------------------------------------------------------------
  1287                          gameLoopNewLevel:
  1288                          
  1289  8f4b a54d                       lda START_TIME
  1290  8f4d 18                         clc
  1291  8f4e 6902                       adc #NEW_LEVEL_TIMEOUT
  1292  8f50 cdca7c                     cmp HBC56_SECONDS_L
  1293  8f53 d01a                       bne @nextFrame
  1294                          
  1295  8f55 a94020efe5                 +tmsDisableOutput
  1296  8f5a 20b58b                     jsr clearBox
  1297  8f5d 201788                     jsr renderLevel
  1298  8f60 a94020e5e5                 +tmsEnableOutput
  1299                          
  1300  8f65 a9708de37ca98f8d...        +hbc56SetVsyncCallback gameLoopWaitForStart
  1301                          
  1302                          @nextFrame
  1303  8f6f 60                         rts
  1304                          
  1305                          ; -----------------------------------------------------------------------------
  1306                          ; Wait for user input (tied to VSYNC interrupt)
  1307                          ; -----------------------------------------------------------------------------
  1308                          gameLoopWaitForStart:
  1309                                  
  1310  8f70 200f8f                     jsr handlePaddleInput
  1311                          
  1312                                  ; render the paddle
  1313  8f73 20e58c                     jsr renderPaddle
  1314                          
  1315  8f76 a543                       lda PADW
  1316  8f78 4a                         lsr
  1317  8f79 18                         clc
  1318  8f7a 6542                       adc PADX
  1319  8f7c 3a                         dec
  1320  8f7d 3a                         dec
  1321  8f7e 8538                       sta POSX        
  1322                          
  1323  8f80 209f8d                     jsr renderBall
  1324                          
  1325  8f83 a2292075f3d01c             +kbBranchIfPressed KB_SCANCODE_SPACEBAR, @startGame
  1326  8f8a 48a980203ef268b0...        +nes1BranchIfPressed NES_A, @startGame
  1327  8f93 48a940203ef268b0...        +nes1BranchIfPressed NES_B, @startGame
  1328  8f9c 48a910203ef268b0...        +nes1BranchIfPressed NES_START, @startGame
  1329                          
  1330  8fa5 60                         rts
  1331                          
  1332                          @startGame
  1333  8fa6 205e8e                     jsr hitPaddle
  1334                          
  1335  8fa9 a9da8de37ca98f8d...        +hbc56SetVsyncCallback gameLoopRunning
  1336                          
  1337  8fb3 60                         rts
  1338                          
  1339                          
  1340                          ; -----------------------------------------------------------------------------
  1341                          ; Game over - Wait for user input (tied to VSYNC interrupt)
  1342                          ; -----------------------------------------------------------------------------
  1343                          gameLoopGameOver:
  1344  8fb4 a2292075f3d01c             +kbBranchIfPressed KB_SCANCODE_SPACEBAR,  @nextGame
  1345  8fbb 48a980203ef268b0...        +nes1BranchIfPressed NES_A, @nextGame
  1346  8fc4 48a940203ef268b0...        +nes1BranchIfPressed NES_B, @nextGame
  1347  8fcd 48a910203ef268b0...        +nes1BranchIfPressed NES_START, @nextGame
  1348  8fd6 60                         rts
  1349                          
  1350                          @nextGame
  1351  8fd7 4cfa88                     jmp resetGame
  1352                          
  1353                          ; -----------------------------------------------------------------------------
  1354                          ; Main game loop
  1355                          ; -----------------------------------------------------------------------------
  1356                          gameLoopRunning:
  1357  8fda a53a                       lda POSY
  1358  8fdc c960                       cmp #(LEVEL_HEIGHT) * 8
  1359  8fde b01f                       bcs @noHit
  1360                          
  1361                                  ; convert ball position to tile x/y
  1362  8fe0 a638                       ldx POSX
  1363  8fe2 e8                         inx
  1364  8fe3 e8                         inx
  1365  8fe4 a43a                       ldy POSY
  1366  8fe6 c8                         iny
  1367  8fe7 c8                         iny
  1368                          
  1369                                  ; convert tile x/y to level index
  1370  8fe8 20f08d                     jsr posToLevelCell
  1371  8feb c9ff                       cmp #NO_BRICK
  1372  8fed f010                       beq @noHit
  1373                          
  1374                                  ; locate brick type at level index
  1375  8fef aa                         tax
  1376  8ff0 bd0004                     lda LEVEL_DATA, x
  1377                          
  1378                                  ; is it empty?
  1379  8ff3 f00a                       beq @noHit
  1380                          
  1381  8ff5 203b8e                     jsr hitBrick
  1382                          
  1383                                  ; any blocks left?
  1384  8ff8 c64a                       dec BLOCKS_LEFT
  1385  8ffa d003                       bne +
  1386  8ffc 4ce888                     jmp nextLevel
  1387                          +
  1388                          
  1389                          @noHit:
  1390                          
  1391                                  ; paddle input
  1392  8fff 200f8f                     jsr handlePaddleInput
  1393                          
  1394                                  ; render the paddle
  1395  9002 20e58c                     jsr renderPaddle
  1396                          
  1397                                  ; move the ball
  1398  9005 2440101318a53965...        +addSubPixel POSX, SPDX, DIRX
  1399  9029 2441101318a53b65...        +addSubPixel POSY, SPDY, DIRY
  1400                          
  1401                                  ; check for ball bounces
  1402  904d 2440                       bit DIRX
  1403  904f 3014                       bmi @checkLeft
  1404                          
  1405                                  ; check right wall
  1406  9051 a538                       lda POSX
  1407  9053 c9ab                       cmp #GAME_AREA_RIGHT-5
  1408  9055 9020                       bcc @doneXCheck
  1409                          
  1410  9057 a54049ff1a8540             +negate DIRX
  1411  905e a902                       lda #TONE_WALL
  1412  9060 20a287                     jsr playNote
  1413                          
  1414  9063 8012                       bra @doneXCheck
  1415                          
  1416                                  ; check left wall
  1417                          @checkLeft
  1418  9065 a538                       lda POSX
  1419  9067 c908                       cmp #GAME_AREA_LEFT
  1420  9069 b00c                       bcs @doneXCheck
  1421                          
  1422  906b a54049ff1a8540             +negate DIRX
  1423  9072 a902                       lda #TONE_WALL
  1424  9074 20a287                     jsr playNote
  1425                          
  1426                          @doneXCheck
  1427                          
  1428  9077 2441                       bit DIRY
  1429  9079 302c                       bmi @checkTop
  1430                          
  1431                                  ; check paddle
  1432  907b a53a                       lda POSY
  1433  907d c9bb                       cmp #PADDLE_SPRITE_Y
  1434  907f 9007                       bcc @checkPaddle
  1435                          
  1436                                  ; check out of bounds
  1437  9081 c9f0                       cmp #240
  1438  9083 9034                       bcc @doneYCheck
  1439  9085 4cd288                     jmp loseBall
  1440                          
  1441                          @checkPaddle
  1442  9088 c9b6                       cmp #PADDLE_SPRITE_Y - 5
  1443  908a 902d                       bcc  @doneYCheck
  1444                          
  1445  908c a542                       lda PADX
  1446  908e c906                       cmp #BALL_SIZE
  1447  9090 9003                       bcc +
  1448  9092 38                         sec
  1449  9093 e905                       sbc #BALL_SIZE - 1
  1450                          +
  1451  9095 c538                       cmp POSX
  1452  9097 b020                       bcs @doneYCheck
  1453  9099 a542                       lda PADX
  1454  909b 18                         clc
  1455  909c 6543                       adc PADW
  1456  909e c538                       cmp POSX
  1457  90a0 9017                       bcc @doneYCheck
  1458                          
  1459  90a2 205e8e                     jsr hitPaddle
  1460                          
  1461  90a5 8012                       bra @doneYCheck
  1462                          
  1463                                  ; check top wall
  1464                          @checkTop
  1465  90a7 a53a                       lda POSY
  1466  90a9 c909                       cmp #9
  1467  90ab b00c                       bcs @doneYCheck
  1468                          
  1469  90ad a54149ff1a8541             +negate DIRY
  1470  90b4 a902                       lda #TONE_WALL
  1471  90b6 20a287                     jsr playNote
  1472                          
  1473                          @doneYCheck
  1474                          
  1475  90b9 209f8d                     jsr renderBall
  1476  90bc 60                         rts
  1477                          
  1478                          
  1479                          
  1480                          ; BALL
  1481                          ; ----------
  1482                          
  1483                          ballPattern:
  1484  90bd 70f8f8f870000000   !byte $70,$f8,$f8,$f8,$70,$00,$00,$00   ; base
  1485  90c5 0018285870000000   !byte $00,$18,$28,$58,$70,$00,$00,$00   ; shading
  1486                          
  1487                          
  1488                          ; PADDLE
  1489                          ; ----------
  1490                          
  1491                          paddlePal: ; paddle colors
  1492  90cd 00                 +byteTmsColorFgBg TMS_TRANSPARENT,    TMS_TRANSPARENT
  1493  90ce 00                 +byteTmsColorFgBg TMS_TRANSPARENT,    TMS_TRANSPARENT
  1494  90cf 00                 +byteTmsColorFgBg TMS_TRANSPARENT,    TMS_TRANSPARENT
  1495  90d0 f0                 +byteTmsColorFgBg PADDLE_COLOR_HIGH,  TMS_TRANSPARENT
  1496  90d1 70                 +byteTmsColorFgBg PADDLE_COLOR_BASE,  TMS_TRANSPARENT
  1497  90d2 70                 +byteTmsColorFgBg PADDLE_COLOR_BASE,  TMS_TRANSPARENT
  1498  90d3 70                 +byteTmsColorFgBg PADDLE_COLOR_BASE,  TMS_TRANSPARENT
  1499  90d4 50                 +byteTmsColorFgBg PADDLE_COLOR_SHADE, TMS_TRANSPARENT
  1500                          
  1501                          paddleLeftSpr:
  1502  90d5 c080800000000000   !byte $c0,$80,$80,$00,$00,$00,$00,$00
  1503                          paddleRightSpr:
  1504  90dd 4040c00000000000   !byte $40,$40,$c0,$00,$00,$00,$00,$00
  1505                          paddlePatt:
  1506  90e5 0000007fffffff7f   !byte $00,$00,$00,$7f,$ff,$ff,$ff,$7f   ; left
  1507  90ed 000000ffffffffff   !byte $00,$00,$00,$ff,$ff,$ff,$ff,$ff   ; centre
  1508  90f5 000000fefffffffe   !byte $00,$00,$00,$fe,$ff,$ff,$ff,$fe   ; right
  1509                          
  1510                          ; pattern indexes to paddle left/right tiles for a given pixel offset
  1511                          leftPatterns:
  1512  90fd e0e1e2e3e4e5e6e7   !byte 224,225,226,227,228,229,230,231
  1513                          
  1514                          rightPatterns:
  1515  9105 f0efeeedecebeae9...!byte 240,239,238,237,236,235,234,233,232
  1516                          
  1517                          
  1518                          ; BLOCKS
  1519                          ; ----------
  1520                          
  1521                          block:
  1522  910e 7f3f7f7f7f7f7f00   !byte $7f,$3f,$7f,$7f,$7f,$7f,$7f,$00   ; left
  1523  9116 ffffffffffffff00   !byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00   ; centre
  1524  911e fcfefefefefefc00   !byte $fc,$fe,$fe,$fe,$fe,$fe,$fc,$00   ; right
  1525                          
  1526                          BLUE_HIGH       = TMS_CYAN    << 4   | TMS_TRANSPARENT
  1527                          BLUE_BASE       = TMS_LT_BLUE << 4   | TMS_TRANSPARENT
  1528                          BLUE_BASEH      = TMS_LT_BLUE << 4   | TMS_CYAN
  1529                          BLUE_SHADE      = TMS_DK_BLUE << 4   | TMS_TRANSPARENT
  1530                          
  1531                          GREEN_HIGH      = TMS_LT_GREEN  << 4 | TMS_TRANSPARENT
  1532                          GREEN_BASE      = TMS_MED_GREEN << 4 | TMS_TRANSPARENT
  1533                          GREEN_BASEH     = TMS_MED_GREEN << 4 | TMS_LT_GREEN
  1534                          GREEN_SHADE     = TMS_DK_GREEN  << 4 | TMS_TRANSPARENT
  1535                          
  1536                          YELLOW_HIGH     = TMS_WHITE     << 4 | TMS_TRANSPARENT
  1537                          YELLOW_BASE     = TMS_LT_YELLOW << 4 | TMS_TRANSPARENT
  1538                          YELLOW_BASEH    = TMS_LT_YELLOW << 4 | TMS_WHITE
  1539                          YELLOW_SHADE    = TMS_DK_YELLOW << 4 | TMS_TRANSPARENT
  1540                          
  1541                          RED_HIGH        = TMS_LT_RED  << 4 | TMS_TRANSPARENT
  1542                          RED_BASE        = TMS_MED_RED << 4 | TMS_TRANSPARENT
  1543                          RED_BASEH       = TMS_MED_RED << 4 | TMS_LT_RED
  1544                          RED_SHADE       = TMS_DK_RED  << 4 | TMS_TRANSPARENT
  1545                          
  1546                          ; block palettes. first tile and remaining tiles
  1547                          blueBlockPal:
  1548  9126 7057575757574000   !byte BLUE_HIGH,BLUE_BASEH,BLUE_BASEH,BLUE_BASEH,BLUE_BASEH,BLUE_BASEH,BLUE_SHADE,TMS_TRANSPARENT
  1549  912e 7050505050504000   !byte BLUE_HIGH,BLUE_BASE,BLUE_BASE,BLUE_BASE,BLUE_BASE,BLUE_BASE,BLUE_SHADE,TMS_TRANSPARENT
  1550                          
  1551                          greenBlockPal:
  1552  9136 302323232323c000   !byte GREEN_HIGH,GREEN_BASEH,GREEN_BASEH,GREEN_BASEH,GREEN_BASEH,GREEN_BASEH,GREEN_SHADE,TMS_TRANSPARENT
  1553  913e 302020202020c000   !byte GREEN_HIGH,GREEN_BASE,GREEN_BASE,GREEN_BASE,GREEN_BASE,GREEN_BASE,GREEN_SHADE,TMS_TRANSPARENT
  1554                          
  1555                          yellowBlockPal:
  1556  9146 f0bfbfbfbfbfa000   !byte YELLOW_HIGH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_SHADE,TMS_TRANSPARENT
  1557  914e f0b0b0b0b0b0a000   !byte YELLOW_HIGH,YELLOW_BASE,YELLOW_BASE,YELLOW_BASE,YELLOW_BASE,YELLOW_BASE,YELLOW_SHADE,TMS_TRANSPARENT
  1558                          
  1559                          redBlockPal:
  1560  9156 9089898989896000   !byte RED_HIGH,RED_BASEH,RED_BASEH,RED_BASEH,RED_BASEH,RED_BASEH,RED_SHADE,TMS_TRANSPARENT
  1561  915e 9080808080806000   !byte RED_HIGH,RED_BASE,RED_BASE,RED_BASE,RED_BASE,RED_BASE,RED_SHADE,TMS_TRANSPARENT
  1562                          
  1563                          tileData:
  1564  9166 000c0f1215         !byte 0,12,15,18,21
  1565                          
  1566                          ; BORDER
  1567                          ; ----------
  1568                          
  1569                          borderTL:
  1570  916b 3f7fffffffffffff   !byte $3f,$7f,$ff,$ff,$ff,$ff,$ff,$ff
  1571                          borderT:
  1572  9173 ffffffffffffff00   !byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00
  1573                          borderTR:
  1574  917b f8fcfefefefefefe   !byte $f8,$fc,$fe,$fe,$fe,$fe,$fe,$fe
  1575                          borderL:
  1576  9183 fefefefefefefefe   !byte $fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe
  1577                          borderR:
  1578  918b fefefefefefefefe   !byte $fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe
  1579                          borderLB:
  1580  9193 fefefefefe7c7c38   !byte $fe,$fe,$fe,$fe,$fe,$7c,$7c,$38
  1581                          borderRB:
  1582  919b fefefefefe7c7c38   !byte $fe,$fe,$fe,$fe,$fe,$7c,$7c,$38
  1583                          borderBL:
  1584  91a3 ffffffffffff7f3f   !byte $ff,$ff,$ff,$ff,$ff,$ff,$7f,$3f
  1585                          borderBR:
  1586  91ab fefefefefefefcf8   !byte $fe,$fe,$fe,$fe,$fe,$fe,$fc,$f8
  1587                          borderB:
  1588  91b3 00ffffffffffffff   !byte $00,$ff,$ff,$ff,$ff,$ff,$ff,$ff
  1589                          
  1590                          
  1591                          borderPal:
  1592  91bb 00                 +byteTmsColorFgBg TMS_TRANSPARENT, TMS_TRANSPARENT
  1593  91bc f0                 +byteTmsColorFgBg TMS_WHITE,   TMS_TRANSPARENT
  1594  91bd d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1595  91be d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1596  91bf d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1597  91c0 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1598  91c1 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1599  91c2 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1600  91c3 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1601  91c4 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1602                          
  1603                          
  1604                          ; TITLE
  1605                          ; ----------
  1606                          
  1607                          titlePatt:
  1608  91c5 001e3f7f0301037f...!byte $00,$1e,$3f,$7f,$03,$01,$03,$7f,$00,$0f,$1f,$bf,$81,$80,$81,$bf,$00,$1f,$9f,$df,$d8,$d8,$d8,$df,$00,$e1,$c1,$83,$03,$07,$06,$e6,$00,$86,$86,$c6,$c6,$e6,$66,$67,$00,$18,$39,$33,$63,$67,$c6,$c6,$00,$c3,$e3,$f3,$33,$3b,$1b,$1b,$00,$0c,$0c,$0d,$0c,$0c,$0c,$0c,$00,$7f,$fe,$fc,$30,$30,$30,$30
  1609  920d 7f7f6361637f7f7f...!byte $7f,$7f,$63,$61,$63,$7f,$7f,$7f,$3f,$bf,$be,$b7,$b3,$b1,$b0,$30,$df,$9f,$18,$18,$98,$df,$df,$df,$c6,$86,$06,$0e,$0c,$ec,$cd,$8d,$67,$67,$66,$76,$36,$36,$f6,$f6,$86,$c6,$c6,$67,$63,$33,$39,$18,$1b,$1b,$1b,$3b,$31,$f1,$e0,$c0,$0c,$0c,$0c,$9c,$98,$f8,$f0,$60,$30,$30,$30,$30,$30,$30,$30,$30
  1610                          
  1611                          titlePal:
  1612  9255 00                 +byteTmsColorFgBg TMS_TRANSPARENT, TMS_TRANSPARENT
  1613  9256 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1614  9257 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1615  9258 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1616  9259 e0                 +byteTmsColorFgBg TMS_GREY, TMS_TRANSPARENT
  1617  925a e0                 +byteTmsColorFgBg TMS_GREY, TMS_TRANSPARENT
  1618  925b e0                 +byteTmsColorFgBg TMS_GREY, TMS_TRANSPARENT
  1619  925c 80                 +byteTmsColorFgBg TMS_MED_RED, TMS_TRANSPARENT
  1620  925d b0                 +byteTmsColorFgBg TMS_LT_YELLOW, TMS_TRANSPARENT
  1621  925e 20                 +byteTmsColorFgBg TMS_MED_GREEN, TMS_TRANSPARENT
  1622  925f 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1623  9260 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1624  9261 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1625  9262 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1626  9263 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1627  9264 40                 +byteTmsColorFgBg TMS_DK_BLUE, TMS_TRANSPARENT
  1628                          
  1629                          ; LABELS
  1630                          ; ----------
  1631                          
  1632                          levelPatt:
  1633  9265 0c0c0c0c0c0c0f0f...!byte $0c,$0c,$0c,$0c,$0c,$0c,$0f,$0f,$07,$07,$06,$07,$07,$06,$f7,$e7,$fb,$f3,$01,$f9,$f0,$00,$f8,$f0,$01,$83,$83,$c7,$c6,$6c,$7c,$38,$bf,$bf,$30,$3f,$3f,$30,$3f,$3f,$d8,$98,$18,$d8,$98,$18,$df,$9f,$00,$00,$00,$00,$00,$00,$e0,$c0
  1634                          scorePatt:
  1635  929d 1f3f303f3f001f3f...!byte $1f,$3f,$30,$3f,$3f,$00,$1f,$3f,$e3,$c7,$07,$ce,$ee,$67,$e7,$c3,$fc,$f8,$01,$01,$01,$01,$fc,$f8,$7e,$ff,$c3,$81,$81,$c3,$ff,$7e,$0f,$1f,$80,$80,$9f,$9f,$18,$18,$e3,$f3,$3b,$3b,$f3,$e3,$73,$3b,$fc,$f8,$00,$fc,$f8,$00,$fc,$f8
  1636                          ballsPatt:
  1637  92d5 0f1f001f1f181f1f...!byte $0f,$1f,$00,$1f,$1f,$18,$1f,$1f,$e0,$f0,$30,$f1,$f3,$33,$f6,$e6,$60,$f0,$f0,$98,$9c,$0c,$7e,$fe,$c0,$c0,$c0,$c0,$c0,$c0,$ff,$fe,$60,$60,$60,$60,$60,$60,$7f,$7f,$1f,$3f,$30,$3f,$3f,$00,$9f,$3f,$e0,$c0,$00,$c0,$e0,$60,$e0,$c0
  1638                          
  1639                          labelPal:
  1640  930d 40                 +byteTmsColorFgBg TMS_DK_BLUE, TMS_TRANSPARENT
  1641  930e 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1642  930f 70                 +byteTmsColorFgBg TMS_CYAN, TMS_TRANSPARENT
  1643  9310 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1644  9311 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1645  9312 70                 +byteTmsColorFgBg TMS_CYAN, TMS_TRANSPARENT
  1646  9313 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1647  9314 40                 +byteTmsColorFgBg TMS_DK_BLUE, TMS_TRANSPARENT
  1648                          
  1649                          ; FONT
  1650                          ; ----------
  1651                          
  1652                          digitsPatt:
  1653  9315 7ccedef6e6c67c00   !byte $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  1654  931d 1838181818187e00   !byte $18,$38,$18,$18,$18,$18,$7E,$00 ; 1
  1655  9325 7cc6067cc0c0fe00   !byte $7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  1656  932d fc06063c0606fc00   !byte $FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  1657  9335 0cccccccfe0c0c00   !byte $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  1658  933d fec0fc0606c67c00   !byte $FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  1659  9345 7cc0c0fcc6c67c00   !byte $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  1660  934d fe06060c18303000   !byte $FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  1661  9355 7cc6c67cc6c67c00   !byte $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  1662  935d 7cc6c67e06067c00   !byte $7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  1663                          
  1664                          digitsPal:
  1665  9365 c0                 +byteTmsColorFgBg TMS_DK_GREEN, TMS_TRANSPARENT
  1666  9366 20                 +byteTmsColorFgBg TMS_MED_GREEN, TMS_TRANSPARENT
  1667  9367 30                 +byteTmsColorFgBg TMS_LT_GREEN, TMS_TRANSPARENT
  1668  9368 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1669  9369 30                 +byteTmsColorFgBg TMS_LT_GREEN, TMS_TRANSPARENT
  1670  936a 20                 +byteTmsColorFgBg TMS_MED_GREEN, TMS_TRANSPARENT
  1671  936b c0                 +byteTmsColorFgBg TMS_DK_GREEN, TMS_TRANSPARENT
  1672  936c c0                 +byteTmsColorFgBg TMS_DK_GREEN, TMS_TRANSPARENT
  1673                          
  1674                          
  1675                          ; AUDIO DATA
  1676                          ; ----------
  1677                          
  1678                          notesL:
  1679  936d 00                 !byte 0
  1680  936e a8                 +ayToneByteL NOTE_FREQ_FS4
  1681  936f 9f                 +ayToneByteL NOTE_FREQ_G4
  1682  9370 96                 +ayToneByteL NOTE_FREQ_GS4
  1683  9371 8e                 +ayToneByteL NOTE_FREQ_A4
  1684  9372 86                 +ayToneByteL NOTE_FREQ_AS4
  1685  9373 7e                 +ayToneByteL NOTE_FREQ_B4
  1686  9374 77                 +ayToneByteL NOTE_FREQ_C5
  1687  9375 70                 +ayToneByteL NOTE_FREQ_CS5
  1688  9376 6a                 +ayToneByteL NOTE_FREQ_D5
  1689  9377 64                 +ayToneByteL NOTE_FREQ_DS5
  1690  9378 5e                 +ayToneByteL NOTE_FREQ_E5
  1691  9379 59                 +ayToneByteL NOTE_FREQ_F5
  1692  937a 54                 +ayToneByteL NOTE_FREQ_FS5
  1693  937b 4f                 +ayToneByteL NOTE_FREQ_G5
  1694  937c 4b                 +ayToneByteL NOTE_FREQ_GS5
  1695  937d 47                 +ayToneByteL NOTE_FREQ_A5
  1696  937e 43                 +ayToneByteL NOTE_FREQ_AS5
  1697  937f 3f                 +ayToneByteL NOTE_FREQ_B5
  1698  9380 3b                 +ayToneByteL NOTE_FREQ_C6
  1699  9381 38                 +ayToneByteL NOTE_FREQ_CS6
  1700  9382 35                 +ayToneByteL NOTE_FREQ_D6
  1701  9383 32                 +ayToneByteL NOTE_FREQ_DS6
  1702  9384 2f                 +ayToneByteL NOTE_FREQ_E6
  1703  9385 2c                 +ayToneByteL NOTE_FREQ_F6
  1704  9386 2a                 +ayToneByteL NOTE_FREQ_FS6
  1705  9387 27                 +ayToneByteL NOTE_FREQ_G6
  1706  9388 25                 +ayToneByteL NOTE_FREQ_GS6
  1707  9389 23                 +ayToneByteL NOTE_FREQ_A6
  1708  938a 21                 +ayToneByteL NOTE_FREQ_AS6
  1709                          
  1710                          notesH:
  1711  938b 00                 !byte 0
  1712  938c 00                 +ayToneByteH NOTE_FREQ_FS4
  1713  938d 00                 +ayToneByteH NOTE_FREQ_G4
  1714  938e 00                 +ayToneByteH NOTE_FREQ_GS4
  1715  938f 00                 +ayToneByteH NOTE_FREQ_A4
  1716  9390 00                 +ayToneByteH NOTE_FREQ_AS4
  1717  9391 00                 +ayToneByteH NOTE_FREQ_B4
  1718  9392 00                 +ayToneByteH NOTE_FREQ_C5
  1719  9393 00                 +ayToneByteH NOTE_FREQ_CS5
  1720  9394 00                 +ayToneByteH NOTE_FREQ_D5
  1721  9395 00                 +ayToneByteH NOTE_FREQ_DS5
  1722  9396 00                 +ayToneByteH NOTE_FREQ_E5
  1723  9397 00                 +ayToneByteH NOTE_FREQ_F5 
  1724  9398 00                 +ayToneByteH NOTE_FREQ_FS5
  1725  9399 00                 +ayToneByteH NOTE_FREQ_G5
  1726  939a 00                 +ayToneByteH NOTE_FREQ_GS5
  1727  939b 00                 +ayToneByteH NOTE_FREQ_A5
  1728  939c 00                 +ayToneByteH NOTE_FREQ_AS5
  1729  939d 00                 +ayToneByteH NOTE_FREQ_B5
  1730  939e 00                 +ayToneByteH NOTE_FREQ_C6
  1731  939f 00                 +ayToneByteH NOTE_FREQ_CS6
  1732  93a0 00                 +ayToneByteH NOTE_FREQ_D6
  1733  93a1 00                 +ayToneByteH NOTE_FREQ_DS6
  1734  93a2 00                 +ayToneByteH NOTE_FREQ_E6
  1735  93a3 00                 +ayToneByteH NOTE_FREQ_F6
  1736  93a4 00                 +ayToneByteH NOTE_FREQ_FS6
  1737  93a5 00                 +ayToneByteH NOTE_FREQ_G6
  1738  93a6 00                 +ayToneByteH NOTE_FREQ_GS6
  1739  93a7 00                 +ayToneByteH NOTE_FREQ_A6
  1740  93a8 00                 +ayToneByteH NOTE_FREQ_AS6
  1741                          
  1742                          ; LEVEL DATA
  1743                          ; ----------
  1744                          
  1745                          levelMap:
  1746  93a9 b19309946194b994   !word level1, level2, level3, level4
  1747                          
  1748                          
  1749                          level1: 
  1750  93b1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1751  93b9 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1752  93c1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1753  93c9 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1754  93d1 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1755  93d9 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1756  93e1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1757  93e9 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1758  93f1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1759  93f9 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1760  9401 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1761                          
  1762                          
  1763                          level2: 
  1764  9409 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1765  9411 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1766  9419 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1767  9421 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1768  9429 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1769  9431 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1770  9439 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1771  9441 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1772  9449 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1773  9451 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1774  9459 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1775                          
  1776                          
  1777                          level3: 
  1778  9461 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1779  9469 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1780  9471 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1781  9479 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1782  9481 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1783  9489 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1784  9491 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1785  9499 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1786  94a1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1787  94a9 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1788  94b1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1789                          
  1790                          
  1791                          level4: 
  1792  94b9 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1793  94c1 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1794  94c9 0000000100000000   !byte 0,0,0,1,0,0,0,0
  1795  94d1 0000010201000000   !byte 0,0,1,2,1,0,0,0
  1796  94d9 0001020002010000   !byte 0,1,2,0,2,1,0,0
  1797  94e1 0102000000020100   !byte 1,2,0,0,0,2,1,0
  1798  94e9 0200000300000200   !byte 2,0,0,3,0,0,2,0
  1799  94f1 0000030403000000   !byte 0,0,3,4,3,0,0,0
  1800  94f9 0003040004030000   !byte 0,3,4,0,4,3,0,0
  1801  9501 0304000000040300   !byte 3,4,0,0,0,4,3,0
  1802  9509 0400000000000400   !byte 4,0,0,0,0,0,4,0
  1803  9511 0000000000000000   !byte 0,0,0,0,0,0,0,0

; ******** Source: kernel.asm
     1                          ; 6502 - HBC-56 Kernel
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          HBC56_INT_VECTOR = $7e00
    12                          HBC56_NMI_VECTOR = $7e04
    13                          HBC56_RST_VECTOR = kernelMain
    14                          
    15                          HBC56_KERNEL_START = $e000
    16                          HBC56_META_VECTOR  = HBC56_KERNEL_START-4
    17                          
    18                          RTI_OPCODE = $40
    19                          JMP_OPCODE = $4c
    20                          
    21                          ; -------------------------
    22                          ; I/O devices
    23                          ; -------------------------
    24                          LCD_IO_PORT             = $02
    25                          TMS9918_IO_PORT         = $10
    26                          UART_IO_PORT            = $20
    27                          AY_IO_PORT              = $40
    28                          KB_IO_PORT              = $80
    29                          NES_IO_PORT             = $82
    30                          INT_IO_PORT             = $df
    31                          VIA_IO_PORT             = $f0
    32                          ROM_BANK_REG            = $08
    33                          
    34                          ; -------------------------
    35                          ; Kernel Zero Page
    36                          ; -------------------------
    37                          HBC56_KERNEL_ZP_START   = $18
    38                          
    39                          TILEMAP_ZP_START        = HBC56_KERNEL_ZP_START
    40                          TILEMAP_ZP_END          = TILEMAP_ZP_START + 6
    41                          
    42                          BITMAP_ZP_START         = TILEMAP_ZP_END
    43                          BITMAP_ZP_END           = BITMAP_ZP_START + 6
    44                          
    45                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_ZP_SIZE = 0 } else { .TMS_ZP_SIZE = 4 }
    46                          TMS9918_ZP_START        = BITMAP_ZP_END
    47                          TMS9918_ZP_END          = TMS9918_ZP_START + .TMS_ZP_SIZE
    48                          
    49                          !ifdef HBC56_DISABLE_LCD { .LCD_ZP_SIZE = 0 } else { .LCD_ZP_SIZE = 2 }
    50                          LCD_ZP_START            = TMS9918_ZP_END
    51                          LCD_ZP_END              = LCD_ZP_START + .LCD_ZP_SIZE
    52                          
    53                          !ifdef HBC56_DISABLE_UART { .UART_ZP_SIZE = 0 } else { .UART_ZP_SIZE = 4 }
    54                          UART_ZP_START            = LCD_ZP_END
    55                          UART_ZP_END              = UART_ZP_START + .UART_ZP_SIZE
    56                          
    57                          MEMORY_ZP_START         = UART_ZP_END
    58                          MEMORY_ZP_END           = MEMORY_ZP_START + 6
    59                          
    60                          STR_ADDR                = MEMORY_ZP_END
    61                          STR_ADDR_L              = MEMORY_ZP_END
    62                          STR_ADDR_H              = MEMORY_ZP_END + 1
    63                          
    64                          DELAY_L                 = STR_ADDR_H + 1
    65                          DELAY_H                 = DELAY_L + 1
    66                          
    67                          HBC56_KERNEL_ZP_END     = DELAY_H + 1
    68                          HBC56_USER_ZP_START     = HBC56_KERNEL_ZP_END
    69                          
    70                          ;!warn "Total ZP used: ",STR_ADDR_H-HBC56_KERNEL_ZP_START
    71                          
    72                          
    73                          !ifndef HAVE_TMS9918 { HBC56_DISABLE_SFXMAN=1 }
    74                          
    75                          ; -------------------------
    76                          ; Kernel RAM
    77                          ; -------------------------
    78                          HBC56_KERNEL_RAM_START  = $7a00
    79                          
    80                          TILEMAP_RAM_START       = HBC56_KERNEL_RAM_START
    81                          TILEMAP_RAM_END         = TILEMAP_RAM_START + $116
    82                          
    83                          BITMAP_RAM_START        = TILEMAP_RAM_END
    84                          BITMAP_RAM_END          = BITMAP_RAM_START + 16
    85                          
    86                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_RAM_SIZE = 0 } else { .TMS_RAM_SIZE = 50 }
    87                          TMS9918_RAM_START       = BITMAP_RAM_END
    88                          TMS9918_RAM_END         = TMS9918_RAM_START + .TMS_RAM_SIZE
    89                          
    90                          !ifdef HBC56_DISABLE_LCD { .LCD_RAM_SIZE = 0 } else { .LCD_RAM_SIZE = 42 }
    91                          LCD_RAM_START           = TMS9918_RAM_END
    92                          LCD_RAM_END             = LCD_RAM_START + .LCD_RAM_SIZE
    93                          
    94                          !ifdef HBC56_DISABLE_UART { .UART_RAM_SIZE = 0 } else { .UART_RAM_SIZE = 256 }
    95                          UART_RAM_START            = LCD_RAM_END
    96                          UART_RAM_END              = UART_RAM_START + .UART_RAM_SIZE
    97                          
    98                          VIA_RAM_START             = UART_RAM_END
    99                          VIA_RAM_END               = VIA_RAM_START + 1
   100                          
   101                          !ifdef HBC56_DISABLE_SFXMAN { .SFXMAN_RAM_SIZE = 0 } else { .SFXMAN_RAM_SIZE = 18 }
   102                          SFXMAN_RAM_START        = VIA_RAM_END
   103                          SFXMAN_RAM_END          = SFXMAN_RAM_START + .SFXMAN_RAM_SIZE
   104                          
   105                          BCD_RAM_START           = SFXMAN_RAM_END
   106                          BCD_RAM_END             = BCD_RAM_START + 3
   107                          
   108                          KB_RAM_START            = BCD_RAM_END
   109                          KB_RAM_END              = KB_RAM_START + 64
   110                          
   111                          NES_RAM_START            = KB_RAM_END
   112                          NES_RAM_END              = NES_RAM_START + 3
   113                          
   114                          LAST_MODULE_RAM_END     = NES_RAM_END
   115                          
   116                          HBC56_TICKS             = LAST_MODULE_RAM_END
   117                          HBC56_SECONDS_L         = LAST_MODULE_RAM_END + 1
   118                          HBC56_SECONDS_H         = LAST_MODULE_RAM_END + 2
   119                          HBC56_TMP               = LAST_MODULE_RAM_END + 3
   120                          
   121                          HBC56_CONSOLE_FLAGS     = LAST_MODULE_RAM_END + 4
   122                          HBC56_CONSOLE_FLAG_CURSOR = $80
   123                          HBC56_CONSOLE_FLAG_NES    = $40
   124                          HBC56_CONSOLE_FLAG_LCD    = $20
   125                          HBC56_CONSOLE_FLAG_NOWAIT = $10
   126                          
   127                          HBC56_TMP_X             = LAST_MODULE_RAM_END + 5
   128                          HBC56_TMP_Y             = LAST_MODULE_RAM_END + 6
   129                          
   130                          HBC56_META_TITLE_MAX_LEN = 16
   131                          HBC56_META_TITLE        = LAST_MODULE_RAM_END + 7
   132                          HBC56_META_TITLE_END    = HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN + 1
   133                          HBC56_META_TITLE_LEN    = HBC56_META_TITLE_END + 1
   134                          
   135                          ; callback function on vsync
   136                          HBC56_VSYNC_CALLBACK = HBC56_META_TITLE_LEN + 1
   137                          HBC56_VIA_CALLBACK   = HBC56_VSYNC_CALLBACK + 2
   138                          
   139                          
   140                          HBC56_KERNEL_RAM_END    = HBC56_VIA_CALLBACK + 2
   141                          HBC56_KERNEL_RAM_SIZE   = HBC56_KERNEL_RAM_END - HBC56_KERNEL_RAM_START
   142                          ;!warn "Total RAM used: ",HBC56_KERNEL_RAM_SIZE
   143                          

; ******** Source: ../lib\hbc56.asm
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS    = $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\hbc56.asm
    16                          
    17                          DEFAULT_HBC56_NMI_VECTOR = $FFE0
    18                          DEFAULT_HBC56_RST_VECTOR = $8000
    19                          DEFAULT_HBC56_INT_VECTOR = $FFE0
    20                          
    21                          !macro hbc56Title .title {
    22                          HBC56_TITLE_TEXT:
    23                                  !text .title
    24                          HBC56_TITLE_TEXT_LEN = * - HBC56_TITLE_TEXT
    25                                  !byte 0 ; nul terminator for game name
    26                          }
    27                          
    28                          *=DEFAULT_HBC56_INT_VECTOR
    29  ffe0 40                         rti
    30                          
    31                          hbc56Delay:
    32  ffe1 a000                       ldy #0
    33                          hbc56CustomDelay:
    34  ffe3 a200                       ldx #0
    35                          -
    36  ffe5 ca                         dex
    37  ffe6 d0fd                       bne -
    38  ffe8 a200                       ldx #0
    39  ffea 88                         dey
    40  ffeb d0f8                       bne -
    41  ffed 60                         rts
    42                          
    43                          *=$FFFA
    44  fffa 047e               !ifdef HBC56_NMI_VECTOR { !word HBC56_NMI_VECTOR } else { !word DEFAULT_HBC56_NMI_VECTOR }
    45  fffc b1fc               !ifdef HBC56_RST_VECTOR { !word HBC56_RST_VECTOR } else { !word DEFAULT_HBC56_RST_VECTOR }
    46  fffe 007e               !ifdef HBC56_INT_VECTOR { !word HBC56_INT_VECTOR } else { !word DEFAULT_HBC56_INT_VECTOR }
    47                          
    48                          
    49                          *=DEFAULT_HBC56_RST_VECTOR

; ******** Source: kernel.asm
   144                          
   145                          *=HBC56_KERNEL_START
   146                          

; ******** Source: ../lib\ut\ascii.asm
     1                          ; 6502 - ASCII subroutines
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -----------------------------------------------------------------------------
    12                          ; isLower: Is the ASCII character a lower-case letter (a-z)
    13                          ; -----------------------------------------------------------------------------
    14                          ; Inputs:
    15                          ;   A: ASCII character
    16                          ; Outputs:
    17                          ;   Carry set if lower case, carry clear if not lower case
    18                          ; -----------------------------------------------------------------------------
    19                          isLower:
    20  e000 c961                       cmp #'a'
    21  e002 9005                       bcc @notLower   ; less than 'a'?
    22  e004 c97b                       cmp #'z' + 1
    23  e006 9002                       bcc @isLower    ; less than or equal 'z'?
    24  e008 18                         clc
    25                          @notLower:
    26  e009 60                         rts
    27                          
    28                          @isLower
    29  e00a 38                         sec
    30  e00b 60                         rts
    31                          
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; isUpper: Is the ASCII character a upper-case letter (A-Z)
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;   A: ASCII character
    38                          ; Outputs:
    39                          ;   Carry set if upper case, carry clear if not upper case
    40                          ; -----------------------------------------------------------------------------
    41                          isUpper:
    42  e00c c941                       cmp #'A'
    43  e00e 9005                       bcc @notUpper   ; less than 'A'?
    44  e010 c95b                       cmp #'Z' + 1
    45  e012 9002                       bcc @isUpper    ; less than or equal 'Z'?
    46  e014 18                         clc
    47                          @notUpper:
    48  e015 60                         rts
    49                          
    50                          @isUpper
    51  e016 38                         sec
    52  e017 60                         rts
    53                          
    54                          ; -----------------------------------------------------------------------------
    55                          ; isAlpha: Is the ASCII character alphanumeric (A-Z, a-z)
    56                          ; -----------------------------------------------------------------------------
    57                          ; Inputs:
    58                          ;   A: ASCII character
    59                          ; Outputs:
    60                          ;   Carry set if alpha, carry clear if not alpha
    61                          ; -----------------------------------------------------------------------------
    62                          isAlpha:
    63  e018 2000e0                     jsr isLower
    64  e01b 90ef                       bcc isUpper
    65  e01d 60                         rts
    66                          
    67                          
    68                          ; -----------------------------------------------------------------------------
    69                          ; isDigit: Is the ASCII character a decimal digit (0-9)
    70                          ; -----------------------------------------------------------------------------
    71                          ; Inputs:
    72                          ;   A: ASCII character
    73                          ; Outputs:
    74                          ;   Carry set if digit, carry clear if not digit
    75                          ; -----------------------------------------------------------------------------
    76                          isDigit:
    77  e01e c930                       cmp #'0'
    78  e020 9005                       bcc @notDigit    ; less than '0'?
    79  e022 c93a                       cmp #'9' + 1
    80  e024 9002                       bcc @isDigit     ; less than or equal '9'?
    81  e026 18                         clc
    82                          
    83                          @notDigit:
    84  e027 60                         rts
    85                          
    86                          @isDigit
    87  e028 38                         sec
    88  e029 60                         rts
    89                          
    90                          
    91                          ; -----------------------------------------------------------------------------
    92                          ; isAlNum: Is the ASCII character alphanumeric (A-Z, a-z, 0-9)
    93                          ; -----------------------------------------------------------------------------
    94                          ; Inputs:
    95                          ;   A: ASCII character
    96                          ; Outputs:
    97                          ;   Carry set if alphanumeric, carry clear if not alphanumeric
    98                          ; -----------------------------------------------------------------------------
    99                          isAlNum:
   100  e02a 2018e0                     jsr isAlpha
   101  e02d 90ef                       bcc isDigit
   102  e02f 60                         rts
   103                          
   104                          ; -----------------------------------------------------------------------------
   105                          ; isDigitX: Is the ASCII character a hex digit (A-F, a-f, 0-9)
   106                          ; -----------------------------------------------------------------------------
   107                          ; Inputs:
   108                          ;   A: ASCII character
   109                          ; Outputs:
   110                          ;   Carry set if hexadecimal, carry clear if not hexadecimal
   111                          ; -----------------------------------------------------------------------------
   112                          isDigitX:
   113  e030 201ee0                     jsr isDigit
   114  e033 b013                       bcs @endIsDigitX
   115  e035 c941                       cmp #'A'
   116  e037 900d                       bcc @notHexDigit   ; less than 'A'?
   117  e039 c947                       cmp #'F' + 1
   118  e03b 900a                       bcc @isHexDigit    ; less than or equal 'F'?
   119  e03d c961                       cmp #'a'
   120  e03f 9005                       bcc @notHexDigit   ; less than 'a'?
   121  e041 c967                       cmp #'f' + 1
   122  e043 9002                       bcc @isHexDigit    ; less than or equal 'f'?
   123  e045 18                         clc
   124                          @notHexDigit:
   125  e046 60                         rts
   126                          
   127                          @isHexDigit
   128  e047 38                         sec
   129                          
   130                          @endIsDigitX
   131  e048 60                         rts
   132                          
   133                          
   134                          ; -----------------------------------------------------------------------------
   135                          ; isSpace: Is the ASCII character a whitespace character?
   136                          ; -----------------------------------------------------------------------------
   137                          ; Inputs:
   138                          ;   A: ASCII character
   139                          ; Outputs:
   140                          ;   Carry set if space, carry clear if not space
   141                          ; -----------------------------------------------------------------------------
   142                          isSpace:
   143  e049 c920                       cmp #' '
   144  e04b f01c                       beq @isSpace
   145  e04d b018                       bcs @notSpace
   146  e04f c90a                       cmp #'\n'
   147  e051 f016                       beq @isSpace
   148  e053 c90d                       cmp #'\r'
   149  e055 f012                       beq @isSpace
   150  e057 c909                       cmp #'\t'
   151  e059 f00e                       beq @isSpace
   152  e05b c90d                       cmp #'\r'
   153  e05d f00a                       beq @isSpace
   154  e05f c90b                       cmp #$0b
   155  e061 f006                       beq @isSpace
   156  e063 c90c                       cmp #$0c
   157  e065 f002                       beq @isSpace
   158                          
   159                          @notSpace:
   160  e067 18                         clc
   161  e068 60                         rts
   162                          
   163                          @isSpace
   164  e069 38                         sec
   165  e06a 60                         rts
   166                          
   167                          ; -----------------------------------------------------------------------------
   168                          ; toUpper: convert an ascii character to upper case
   169                          ; -----------------------------------------------------------------------------
   170                          ; Inputs:
   171                          ;   A: ascii character
   172                          ; Outputs:
   173                          ;   A: upper case ascii character
   174                          ;   C: set if character was converted
   175                          ; -----------------------------------------------------------------------------
   176                          toUpper:
   177  e06b 2000e0                     jsr isLower
   178  e06e 9002                       bcc @endToUpper
   179  e070 4920                       eor #$20        ; convert (subtract $20)
   180                          
   181                          @endToUpper
   182  e072 60                         rts        
   183                          
   184                          ; -----------------------------------------------------------------------------
   185                          ; toLower: convert an ascii character to lower case
   186                          ; -----------------------------------------------------------------------------
   187                          ; Inputs:
   188                          ;   A: ascii character
   189                          ; Outputs:
   190                          ;   A: lower case ascii character
   191                          ;   C: set if character was converted
   192                          ; -----------------------------------------------------------------------------
   193                          toLower:
   194  e073 200ce0                     jsr isUpper
   195  e076 9002                       bcc @endToUpper
   196                          
   197  e078 0920                       ora #$20        ; convert (add $20)
   198                          
   199                          @endToUpper

; ******** Source: kernel.asm
   147  e07a 60                 

; ******** Source: ../lib\ut\bcd.asm
     1                          ; 6502 - BCD subroutines
     2                          ;
     3                          ; Copyright (c) 2020 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          !ifndef BCD_RAM_START { BCD_RAM_START = $7810
    13                                  !warn "BCD_RAM_START not provided. Defaulting to ", BCD_RAM_START
    14                          }
    15                          
    16                          ; -------------------------
    17                          ; High RAM
    18                          ; -------------------------
    19                          BCD_TMP1        = BCD_RAM_START
    20                          BCD_TMP2        = BCD_RAM_START + 1
    21                          BCD_TMP3        = BCD_RAM_START + 2
    22                          .BCD_RAM_SIZE   = 3
    23                          
    24                          !if BCD_RAM_END < (BCD_RAM_START + .BCD_RAM_SIZE) {
    25                                  !error "BCD_RAM requires ",BCD_RAM_SIZE," bytes. Allocated ",BCD_RAM_END - BCD_RAM_START
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; bin2bcd8: convert an unsigned byte to a 2-digit bcd value
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;   A: value
    34                          ; Outputs:
    35                          ;   BCD value in R8
    36                          ; -----------------------------------------------------------------------------
    37                          bin2bcd8:
    38  e07b 8d837c               sta BCD_TMP1
    39  e07e a900                 lda #0
    40  e080 8d847c               sta BCD_TMP2
    41  e083 8d857c               sta BCD_TMP3
    42  e086 a208                 ldx #8 
    43  e088 f8                   sed    
    44                          .loop:
    45  e089 0e837c               asl BCD_TMP1
    46  e08c ad847c               lda BCD_TMP2
    47  e08f 6d847c               adc BCD_TMP2
    48  e092 8d847c               sta BCD_TMP2
    49  e095 ad857c               lda BCD_TMP3
    50  e098 6d857c               adc BCD_TMP3
    51  e09b 8d857c               sta BCD_TMP3
    52  e09e ca                   dex
    53  e09f d0e8                 bne .loop
    54  e0a1 d8                   cld   
    55  e0a2 60                   rts
    56                          

; ******** Source: kernel.asm
   148                          

; ******** Source: ../lib\ut\memory.asm
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          

; ******** Source: ../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;       .dst: destination address
    18                          ;       .val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;       .src: source address
    32                          ;       .dst: destination address
    33                          ;       .cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                                  !error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                                  !for i, 0, .cnt - 1 {
    40                                          lda .src + i
    41                                          sta .dst + i
    42                                  }
    43                          } else { !if .cnt <= 256 {
    44                                  ldx #0
    45                          -
    46                                  lda .src, x
    47                                  sta .dst, x
    48                                  inx
    49                                  cpx #(.cnt & $ff)       
    50                                  bne -
    51                          } else {
    52                                  lda #<.src
    53                                  sta MEM_SRC
    54                                  lda #>.src
    55                                  sta MEM_SRC + 1
    56                          
    57                                  lda #<.dst
    58                                  sta MEM_DST
    59                                  lda #>.dst
    60                                  sta MEM_DST + 1
    61                          
    62                          
    63                                          lda #<.cnt
    64                                          sta MEM_LEN
    65                                          lda #>.cnt
    66                                          sta MEM_LEN + 1
    67                                          jsr memcpyMultiPage
    68                                  }
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                                  lda #<.src
    74                                  sta MEM_SRC
    75                                  lda #>.src
    76                                  sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                                  lda #<.dst
    81                                  sta MEM_DST
    82                                  lda #>.dst
    83                                  sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                                  lda .srcRef
    88                                  sta MEM_SRC
    89                                  lda .srcRef + 1
    90                                  sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                                  lda .dstRef
    95                                  sta MEM_DST
    96                                  lda .dstRef + 1
    97                                  sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                                  !if .bytes <= 0 {
   103                                          !error "memcpySinglePage: invalid count: ", .bytes
   104                                  }       
   105                          
   106                                  ldy #.bytes
   107                                  jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;       .src: source address
   116                          ;       .dst: destination address
   117                          ;       .cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                                  !if .cnt <= 0 {
   121                                          !error "memcpyPort: invalid count: ", .cnt
   122                                  }
   123                                  
   124                                  lda #<.src
   125                                  sta MEM_SRC
   126                                  lda #>.src
   127                                  sta MEM_SRC + 1
   128                          
   129                                  lda #<.dst
   130                                  sta MEM_DST
   131                                  lda #>.dst
   132                                  sta MEM_DST + 1
   133                          
   134                                  !if .cnt <= 256 {
   135                                          ldy #<.cnt                                      
   136                                          jsr memcpySinglePagePort
   137                                  } else {
   138                                          lda #<.cnt
   139                                          sta MEM_LEN
   140                                          lda #>.cnt
   141                                          sta MEM_LEN + 1
   142                                          jsr memcpyMultiPagePort
   143                                  }
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;       .dst: destination address
   153                          ;       val: the byte value
   154                          ;       .cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                                  !error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                                  lda #.val
   161                                  !for i, 0, .cnt - 1 {
   162                                  sta .dst + i
   163                                  }
   164                          } else if .cnt <= 256 {
   165                                  ldx #<.cnt
   166                                  lda #.val
   167                          -
   168                                  dex
   169                                  sta .dst, x
   170                                  cpx #0
   171                                  bne -
   172                          } else {
   173                                  lda #<.dst
   174                                  sta MEM_DST
   175                                  lda #>.dst
   176                                  sta MEM_DST + 1
   177                                  lda #<.cnt
   178                                  sta MEM_LEN
   179                                  lda #>.cnt
   180                                  sta MEM_LEN + 1
   181                                  lda #.val
   182                                  jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: ../lib\ut\memory.asm
    14                          
    15                          
    16                          !ifndef MEMORY_ZP_START { MEMORY_ZP_START = $48
    17                                  !warn "MEMORY_ZP_START not provided. Defaulting to ", MEMORY_ZP_START
    18                          }
    19                          
    20                          ; -------------------------
    21                          ; Zero page
    22                          ; -------------------------
    23                          MEM_DST = MEMORY_ZP_START
    24                          MEM_SRC = MEMORY_ZP_START + 2
    25                          MEM_LEN = MEMORY_ZP_START + 4
    26                          MEMORY_ZP_SIZE  = 6
    27                          
    28                          
    29                          !if MEMORY_ZP_END < (MEMORY_ZP_START + MEMORY_ZP_SIZE) {
    30                                  !error "MEMORY_ZP requires ",MEMORY_ZP_SIZE," bytes. Allocated ",MEMORY_ZP_END - MEMORY_ZP_START
    31                          }
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; memcpySinglePage: Copy up to 255 bytes 
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;       MEM_SRC: src address
    38                          ;       MEM_DST: dst address
    39                          ;       Y:      bytes
    40                          ; -----------------------------------------------------------------------------
    41                          memcpySinglePage:
    42  e0a3 c000                       cpy #0
    43  e0a5 f009                       beq .endMemcpySinglePage
    44                          -
    45  e0a7 88                         dey
    46  e0a8 b130                       lda (MEM_SRC), Y
    47  e0aa 912e                       sta (MEM_DST), Y
    48  e0ac c000                       cpy #0
    49  e0ae d0f7                       bne -
    50                          .endMemcpySinglePage:
    51  e0b0 60                         rts
    52                          ; -----------------------------------------------------------------------------
    53                          
    54                          
    55                          
    56                          ; -----------------------------------------------------------------------------
    57                          ; memcpySinglePagePort: Copy up to 255 bytes 
    58                          ; -----------------------------------------------------------------------------
    59                          ; Inputs:
    60                          ;       MEM_SRC: src address
    61                          ;       MEM_DST: dst address (port)
    62                          ;       Y:      bytes
    63                          ; -----------------------------------------------------------------------------
    64                          memcpySinglePagePort:
    65  e0b1 c000                       cpy #0
    66  e0b3 f009                       beq .endMemcpySinglePagePort
    67                          -
    68  e0b5 88                         dey
    69  e0b6 b130                       lda (MEM_SRC), Y
    70  e0b8 852e                       sta MEM_DST
    71  e0ba c000                       cpy #0
    72  e0bc d0f7                       bne -
    73                          .endMemcpySinglePagePort
    74  e0be 60                         rts
    75                          ; -----------------------------------------------------------------------------
    76                          
    77                          
    78                          
    79                          ; -----------------------------------------------------------------------------
    80                          ; memcpyMultiPage: Copy an up to 2^15 bytes 
    81                          ; -----------------------------------------------------------------------------
    82                          ; Inputs:
    83                          ;       MEM_SRC: src address
    84                          ;       MEM_DST: dst address
    85                          ;       MEM_LEN: length
    86                          ; -----------------------------------------------------------------------------
    87                          memcpyMultiPage:
    88                          
    89                          !ifdef ALLOW_SELF_MODIFYING_CODE {
    90                                  lda MEM_SRC
    91                                  sta .loadIns + 1
    92                                  lda MEM_SRC + 1
    93                                  sta .loadIns + 2
    94                          
    95                                  lda MEM_DST
    96                                  sta .storeIns + 1
    97                                  lda MEM_DST + 1
    98                                  sta .storeIns + 2
    99                          
   100                          .loadIns:
   101                                  lda SELF_MODIFY_ADDR, Y
   102                                  
   103                          .storeIns:
   104                                  sta SELF_MODIFY_ADDR, Y
   105                                  dey
   106                                  bne .loadIns
   107                                  inc .loadIns + 2
   108                                  inc .storeIns + 2
   109                                  dex
   110                                  bne .loadIns
   111                          } else {
   112  e0bf a000                       ldy #0
   113  e0c1 a633                       ldx MEM_LEN + 1
   114                          - 
   115  e0c3 b130                       lda (MEM_SRC),y ; could unroll to any power of 2
   116  e0c5 912e                       sta (MEM_DST),y
   117  e0c7 c8                         iny
   118  e0c8 d0f9                       bne -
   119  e0ca ca                         dex
   120  e0cb f007                       beq .memcpyMultiPageRemaining
   121  e0cd e631                       inc MEM_SRC + 1
   122  e0cf e62f                       inc MEM_DST + 1
   123  e0d1 4cc3e0                     jmp -
   124                          .memcpyMultiPageRemaining ; remaining bytes
   125  e0d4 a632                       ldx MEM_LEN
   126  e0d6 f008                       beq .memcpyMultiPageEnd
   127                          - ; X bytes
   128  e0d8 b130                       lda (MEM_SRC),y
   129  e0da 912e                       sta (MEM_DST),y
   130  e0dc c8                         iny
   131  e0dd ca                         dex
   132  e0de d0f8                       bne -
   133                          .memcpyMultiPageEnd
   134                          }
   135                          
   136  e0e0 60                         rts
   137                          ; -----------------------------------------------------------------------------
   138                          
   139                          
   140                          ; -----------------------------------------------------------------------------
   141                          ; memcpyMultiPagePort: Copy an up to 2^15 bytes 
   142                          ; -----------------------------------------------------------------------------
   143                          ; Inputs:
   144                          ;       MEM_SRC: src address
   145                          ;       MEM_DST: dst address (port)
   146                          ;       MEM_LEN: length
   147                          ; -----------------------------------------------------------------------------
   148                          memcpyMultiPagePort:
   149                          
   150  e0e1 a000                       ldy #0
   151  e0e3 a633                       ldx MEM_LEN + 1
   152                          - 
   153  e0e5 b130                       lda (MEM_SRC),y ; could unroll to any power of 2
   154  e0e7 852e                       sta MEM_DST
   155  e0e9 c8                         iny
   156  e0ea d0f9                       bne -
   157  e0ec ca                         dex
   158  e0ed f005                       beq .memcpyMultiPagePortRemaining
   159  e0ef e631                       inc MEM_SRC + 1
   160  e0f1 4ce5e0                     jmp -
   161                          .memcpyMultiPagePortRemaining ; remaining bytes
   162  e0f4 a632                       ldx MEM_LEN
   163  e0f6 f008                       beq .memcpyMultiPagePortEnd
   164                          - ; X bytes
   165  e0f8 b130                       lda (MEM_SRC),y
   166  e0fa 852e                       sta MEM_DST
   167  e0fc c8                         iny
   168  e0fd ca                         dex
   169  e0fe d0f8                       bne -
   170                          .memcpyMultiPagePortEnd
   171  e100 60                         rts
   172                          ; -----------------------------------------------------------------------------
   173                          
   174                          
   175                          ; -----------------------------------------------------------------------------
   176                          ; memsetSinglePage: set a block of memory data
   177                          ; -----------------------------------------------------------------------------
   178                          ; Inputs:
   179                          ;        A:     value to set
   180                          ;        MEM_DST: start address
   181                          ;        Y:     bytes
   182                          ; -----------------------------------------------------------------------------
   183                          memsetSinglePage:
   184  e101 c000                       cpy #0
   185  e103 f007                       beq .doneCpy
   186                          -
   187  e105 88                         dey
   188  e106 912e                       sta (MEM_DST), y
   189  e108 c000                       cpy #0
   190  e10a d0f9                       bne -
   191                          .doneCpy
   192  e10c 60                         rts
   193                          
   194                          
   195                          ; -----------------------------------------------------------------------------
   196                          ; memsetMultiPage: set a block of memory data
   197                          ; -----------------------------------------------------------------------------
   198                          ; Inputs:
   199                          ;        A: value
   200                          ;        MEM_DST: start address
   201                          ;        MEM_LEN: length
   202                          ; -----------------------------------------------------------------------------
   203                          memsetMultiPage:
   204  e10d a633                       ldx MEM_LEN + 1
   205  e10f d005                       bne .doneSet
   206  e111 a432                       ldy MEM_LEN
   207  e113 4c01e1                     jmp memsetSinglePage
   208                          .doneSet
   209  e116 a000                       ldy #0
   210                          - 
   211  e118 912e                       sta (MEM_DST),y ; could unroll to any power of 2
   212  e11a c8                         iny
   213  e11b d0fb                       bne -
   214  e11d ca                         dex
   215  e11e f005                       beq .doneSet2
   216  e120 e62f                       inc MEM_DST + 1
   217  e122 4c18e1                     jmp -
   218                          .doneSet2 ; remaining bytes
   219  e125 a632                       ldx MEM_LEN
   220  e127 f006                       beq .doneSet3
   221                          - ; X bytes
   222  e129 912e                       sta (MEM_DST),y
   223  e12b c8                         iny
   224  e12c ca                         dex
   225  e12d d0fa                       bne -
   226                          .doneSet3
   227  e12f 60                         rts

; ******** Source: kernel.asm
   149                          

; ******** Source: ../lib\ut\tables.asm
     1                          ; 6502 - Useful tables
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          tableBitFromLeft:
    12  e130 8040201008040201   !byte $80,$40,$20,$10,$08,$04,$02,$01
    13                          tableInvBitFromLeft:
    14  e138 7fbfdfeff7fbfdfe   !byte $7f,$bf,$df,$ef,$f7,$fb,$fd,$fe
    15                          tableBitFromRight:
    16  e140 0102040810204080   !byte $01,$02,$04,$08,$10,$20,$40,$80
    17                          tableInvBitFromRight:
    18  e148 fefdfbf7efdfbf7f   !byte $fe,$fd,$fb,$f7,$ef,$df,$bf,$7f
    19                          tableBitsFromLeft:
    20  e150 80c0e0f0f8fcfeff   !byte $80,$c0,$e0,$f0,$f8,$fc,$fe,$ff

; ******** Source: kernel.asm
   150                          
   151                          
   152                          !ifndef HBC56_DISABLE_AY3891X {

; ******** Source: ../lib\sfx\ay3891x.asm
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                          }

; ******** Source: ../lib\sfx\ay3891x.asm
    10                          
    11                          
    12                          
    13                          !ifndef AY_IO_PORT { AY_IO_PORT = $40
    14                                  !warn "AY_IO_PORT not provided. Defaulting to ", AY_IO_PORT
    15                          }
    16                          
    17                          HAVE_AY3891X = 1
    18                          
    19                          ; -------------------------
    20                          ; Constants
    21                          ; -------------------------
    22                          AY_PSG0 = $00
    23                          AY_PSG1 = $04
    24                          
    25                          ; IO Ports
    26                          AY_S0 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG0
    27                          AY_S1 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG1
    28                          
    29                          AY_INACTIVE = $03
    30                          AY_READ     = $02
    31                          AY_WRITE    = $01
    32                          AY_ADDR     = $00
    33                          
    34                          AY_S0_READ  = AY_S0 | AY_READ
    35                          AY_S0_WRITE = AY_S0 | AY_WRITE
    36                          AY_S0_ADDR  = AY_S0 | AY_ADDR
    37                          
    38                          AY_S1_READ  = AY_S1 | AY_READ
    39                          AY_S1_WRITE = AY_S1 | AY_WRITE
    40                          AY_S1_ADDR  = AY_S1 | AY_ADDR
    41                          
    42                          ; Registers
    43                          AY_R0 = 0
    44                          AY_R1 = 1
    45                          AY_R2 = 2
    46                          AY_R3 = 3
    47                          AY_R4 = 4
    48                          AY_R5 = 5
    49                          AY_R6 = 6
    50                          AY_R7 = 7
    51                          AY_R8 = 8
    52                          AY_R9 = 9
    53                          AY_R10 = 10
    54                          AY_R11 = 11
    55                          AY_R12 = 12
    56                          AY_R13 = 13
    57                          AY_R14 = 14
    58                          AY_R15 = 15
    59                          AY_R16 = 16
    60                          AY_R17 = 17
    61                          
    62                          AY_CHA = 0
    63                          AY_CHB = 1
    64                          AY_CHC = 2
    65                          AY_CHN = 3
    66                          
    67                          AY_CHA_TONE_L   = AY_R0
    68                          AY_CHA_TONE_H   = AY_R1
    69                          AY_CHB_TONE_L   = AY_R2
    70                          AY_CHB_TONE_H   = AY_R3
    71                          AY_CHC_TONE_L   = AY_R4
    72                          AY_CHC_TONE_H   = AY_R5
    73                          AY_NOISE_GEN    = AY_R6
    74                          AY_ENABLES      = AY_R7
    75                          AY_CHA_AMPL     = AY_R8
    76                          AY_CHB_AMPL     = AY_R9
    77                          AY_CHC_AMPL     = AY_R10
    78                          AY_ENV_PERIOD_L = AY_R11
    79                          AY_ENV_PERIOD_H = AY_R12
    80                          AY_ENV_SHAPE    = AY_R13
    81                          AY_PORTA        = AY_R14
    82                          AY_PORTB        = AY_R15
    83                          
    84                          AY_ENV_SHAPE_CONTINUE  = $08
    85                          AY_ENV_SHAPE_ATTACK    = $04
    86                          AY_ENV_SHAPE_ALTERNATE = $02
    87                          AY_ENV_SHAPE_HOLD      = $01
    88                          
    89                          ;  /\  /\  /\  /\  /\ 
    90                          ; /  \/  \/  \/  \/  \
    91                          AY_ENV_SHAPE_TRIANGLE     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_ALTERNATE)
    92                          
    93                          ;  /------------------
    94                          ; /
    95                          AY_ENV_SHAPE_FADE_IN      = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_HOLD)
    96                          
    97                          ; \
    98                          ;  \__________________
    99                          AY_ENV_SHAPE_FADE_OUT     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_HOLD)
   100                          
   101                          ; \ |\ |\ |\ |\ |\ |\ |
   102                          ;  \| \| \| \| \| \| \|
   103                          AY_ENV_SHAPE_SAW1         = (AY_ENV_SHAPE_CONTINUE)
   104                          
   105                          ;  /| /| /| /| /| /| /|
   106                          ; / |/ |/ |/ |/ |/ |/ |
   107                          AY_ENV_SHAPE_SAW2         = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK)
   108                          
   109                          ;  /|
   110                          ; / |__________________
   111                          AY_ENV_SHAPE_FADE_IN_STOP = (AY_ENV_SHAPE_ATTACK)
   112                          
   113                          
   114                          AY_CLOCK_FREQ   = 2000000
   115                          
   116                          ayInit:
   117                                  ; disable everything
   118  e158 a9078d407fa9ff8d...        +ayWrite AY_PSG0, AY_ENABLES, $ff
   119  e162 a9078d447fa9ff8d...        +ayWrite AY_PSG1, AY_ENABLES, $ff
   120                          
   121  e16c a9088d407fa9008d...        +aySetVolume AY_PSG0, AY_CHA, 0
   122  e176 a9098d407fa9008d...        +aySetVolume AY_PSG0, AY_CHB, 0
   123  e180 a90a8d407fa9008d...        +aySetVolume AY_PSG0, AY_CHC, 0
   124                          
   125  e18a a9008d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHA, 0
   126  e19e a9028d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHB, 0
   127  e1b2 a9048d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHC, 0
   128                          
   129  e1c6 a90b8d407fa9008d...        +aySetEnvelopePeriod AY_PSG0, 0
   130  e1da a90d8d407fa9008d...        +aySetEnvShape AY_PSG0, 0
   131  e1e4 a90d8d407fa9008d...        +aySetNoise  AY_PSG0, 0
   132                          
   133  e1ee a9088d447fa9008d...        +aySetVolume AY_PSG1, AY_CHA, 0
   134  e1f8 a9098d447fa9008d...        +aySetVolume AY_PSG1, AY_CHB, 0
   135  e202 a90a8d447fa9008d...        +aySetVolume AY_PSG1, AY_CHC, 0
   136                          
   137  e20c a9008d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHA, 0
   138  e220 a9028d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHB, 0
   139  e234 a9048d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHC, 0
   140                          
   141  e248 a90b8d447fa9008d...        +aySetEnvelopePeriod AY_PSG1, 0
   142  e25c a90d8d447fa9008d...        +aySetEnvShape AY_PSG1, 0
   143  e266 a90d8d447fa9008d...        +aySetNoise  AY_PSG1, 0
   144  e270 60                         rts
   145                          
   146                          ; Note frequencies from https://pages.mtu.edu/~suits/notefreqs.html
   147                          
   148                          NOTE_FREQ_C0  = 16.35
   149                          NOTE_FREQ_CS0 = 17.32
   150                          NOTE_FREQ_D0  = 18.35
   151                          NOTE_FREQ_DS0 = 19.45
   152                          NOTE_FREQ_E0  = 20.6
   153                          NOTE_FREQ_F0  = 21.83
   154                          NOTE_FREQ_FS0 = 23.12
   155                          NOTE_FREQ_G0  = 24.5
   156                          NOTE_FREQ_GS0 = 25.96
   157                          NOTE_FREQ_A0  = 27.5
   158                          NOTE_FREQ_AS0 = 29.14
   159                          NOTE_FREQ_B0  = 30.87
   160                          NOTE_FREQ_C1  = 32.7
   161                          NOTE_FREQ_CS1 = 34.65
   162                          NOTE_FREQ_D1  = 36.71
   163                          NOTE_FREQ_DS1 = 38.89
   164                          NOTE_FREQ_E1  = 41.2
   165                          NOTE_FREQ_F1  = 43.65
   166                          NOTE_FREQ_FS1 = 46.25
   167                          NOTE_FREQ_G1  = 49
   168                          NOTE_FREQ_GS1 = 51.91
   169                          NOTE_FREQ_A1  = 55
   170                          NOTE_FREQ_AS1 = 58.27
   171                          NOTE_FREQ_B1  = 61.74
   172                          NOTE_FREQ_C2  = 65.41
   173                          NOTE_FREQ_CS2 = 69.3
   174                          NOTE_FREQ_D2  = 73.42
   175                          NOTE_FREQ_DS2 = 77.78
   176                          NOTE_FREQ_E2  = 82.41
   177                          NOTE_FREQ_F2  = 87.31
   178                          NOTE_FREQ_FS2 = 92.5
   179                          NOTE_FREQ_G2  = 98
   180                          NOTE_FREQ_GS2 = 103.83
   181                          NOTE_FREQ_A2  = 110
   182                          NOTE_FREQ_AS2 = 116.54
   183                          NOTE_FREQ_B2  = 123.47
   184                          NOTE_FREQ_C3  = 130.81
   185                          NOTE_FREQ_CS3 = 138.59
   186                          NOTE_FREQ_D3  = 146.83
   187                          NOTE_FREQ_DS3 = 155.56
   188                          NOTE_FREQ_E3  = 164.81
   189                          NOTE_FREQ_F3  = 174.61
   190                          NOTE_FREQ_FS3 = 185
   191                          NOTE_FREQ_G3  = 196
   192                          NOTE_FREQ_GS3 = 207.65
   193                          NOTE_FREQ_A3  = 220
   194                          NOTE_FREQ_AS3 = 233.08
   195                          NOTE_FREQ_B3  = 246.94
   196                          NOTE_FREQ_C4  = 261.63
   197                          NOTE_FREQ_CS4 = 277.18
   198                          NOTE_FREQ_D4  = 293.66
   199                          NOTE_FREQ_DS4 = 311.13
   200                          NOTE_FREQ_E4  = 329.63
   201                          NOTE_FREQ_F4  = 349.23
   202                          NOTE_FREQ_FS4 = 369.99
   203                          NOTE_FREQ_G4  = 392
   204                          NOTE_FREQ_GS4 = 415.3
   205                          NOTE_FREQ_A4  = 440
   206                          NOTE_FREQ_AS4 = 466.16
   207                          NOTE_FREQ_B4  = 493.88
   208                          NOTE_FREQ_C5  = 523.25
   209                          NOTE_FREQ_CS5 = 554.37
   210                          NOTE_FREQ_D5  = 587.33
   211                          NOTE_FREQ_DS5 = 622.25
   212                          NOTE_FREQ_E5  = 659.25
   213                          NOTE_FREQ_F5  = 698.46
   214                          NOTE_FREQ_FS5 = 739.99
   215                          NOTE_FREQ_G5  = 783.99
   216                          NOTE_FREQ_GS5 = 830.61
   217                          NOTE_FREQ_A5  = 880
   218                          NOTE_FREQ_AS5 = 932.33
   219                          NOTE_FREQ_B5  = 987.77
   220                          NOTE_FREQ_C6  = 1046.5
   221                          NOTE_FREQ_CS6 = 1108.73
   222                          NOTE_FREQ_D6  = 1174.66
   223                          NOTE_FREQ_DS6 = 1244.51
   224                          NOTE_FREQ_E6  = 1318.51
   225                          NOTE_FREQ_F6  = 1396.91
   226                          NOTE_FREQ_FS6 = 1479.98
   227                          NOTE_FREQ_G6  = 1567.98
   228                          NOTE_FREQ_GS6 = 1661.22
   229                          NOTE_FREQ_A6  = 1760
   230                          NOTE_FREQ_AS6 = 1864.66
   231                          NOTE_FREQ_B6  = 1975.53
   232                          NOTE_FREQ_C7  = 2093
   233                          NOTE_FREQ_CS7 = 2217.46
   234                          NOTE_FREQ_D7  = 2349.32
   235                          NOTE_FREQ_DS7 = 2489.02
   236                          NOTE_FREQ_E7  = 2637.02
   237                          NOTE_FREQ_F7  = 2793.83
   238                          NOTE_FREQ_FS7 = 2959.96
   239                          NOTE_FREQ_G7  = 3135.96
   240                          NOTE_FREQ_GS7 = 3322.44
   241                          NOTE_FREQ_A7  = 3520
   242                          NOTE_FREQ_AS7 = 3729.31
   243                          NOTE_FREQ_B7  = 3951.07
   244                          NOTE_FREQ_C8  = 4186.01
   245                          NOTE_FREQ_CS8 = 4434.92
   246                          NOTE_FREQ_D8  = 4698.63
   247                          NOTE_FREQ_DS8 = 4978.03
   248                          NOTE_FREQ_E8  = 5274.04
   249                          NOTE_FREQ_F8  = 5587.65
   250                          NOTE_FREQ_FS8 = 5919.91
   251                          NOTE_FREQ_G8  = 6271.93
   252                          NOTE_FREQ_GS8 = 6644.88
   253                          NOTE_FREQ_A8  = 7040
   254                          NOTE_FREQ_AS8 = 7458.62
   255                          NOTE_FREQ_B8  = 7902.13

; ******** Source: kernel.asm
   153                          
   154                          }
   155                          
   156                          !ifndef HBC56_DISABLE_TMS9918 {
   157                                  !ifndef TMS_MODEL { TMS_MODEL = 9918 }

; ******** Source: ../lib\gfx\tms9918.asm
     1                          ; 6502 - TMS9918 VDP
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS    = $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\gfx\tms9918.asm
    10                          
    11                          
    12                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }

; ******** Source: ../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                                  jmp .afterText
   153                          .textAddr
   154                                  !text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                                  lda .addr
   254                                  sta TMS_TMP_ADDRESS
   255                                  lda .addr + 1
   256                                  sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                                  lda .addr
   262                                  adc #<.offset
   263                                  sta TMS_TMP_ADDRESS
   264                                  lda .addr + 1
   265                                  adc #>.offset
   266                                  sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                                  jmp .afterText
   588                          .textAddr
   589                                  !text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                                  jmp .afterText
   611                          .textAddr
   612                                  !text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../lib\gfx\tms9918.asm
    13                          
    14                          
    15                          TMS_FONT_DATA:

; ******** Source: ../lib\gfx\fonts\hbc56font.asm
     1                          ; 6502 - HBC-56 Font
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          
    20                          
    21                          
    22                          
    23                          
    24                          
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32  e271 0000000000000000   !byte $00,$00,$00,$00,$00,$00,$00,$00 ; <SPACE>
    33  e279 1818181818001800   !byte $18,$18,$18,$18,$18,$00,$18,$00 ; !
    34  e281 6c6c6c0000000000   !byte $6C,$6C,$6C,$00,$00,$00,$00,$00 ; "
    35  e289 6c6cfe6cfe6c6c00   !byte $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
    36  e291 187ec07c06fc1800   !byte $18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
    37  e299 00c6cc183066c600   !byte $00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
    38  e2a1 386c3876dccc7600   !byte $38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
    39  e2a9 3030600000000000   !byte $30,$30,$60,$00,$00,$00,$00,$00 ; '
    40  e2b1 0c18303030180c00   !byte $0C,$18,$30,$30,$30,$18,$0C,$00 ; (
    41  e2b9 30180c0c0c183000   !byte $30,$18,$0C,$0C,$0C,$18,$30,$00 ; )
    42  e2c1 00663cff3c660000   !byte $00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
    43  e2c9 0018187e18180000   !byte $00,$18,$18,$7E,$18,$18,$00,$00 ; +
    44  e2d1 0000000000181830   !byte $00,$00,$00,$00,$00,$18,$18,$30 ; ,
    45  e2d9 0000007e00000000   !byte $00,$00,$00,$7E,$00,$00,$00,$00 ; -
    46  e2e1 0000000000181800   !byte $00,$00,$00,$00,$00,$18,$18,$00 ; .
    47  e2e9 060c183060c08000   !byte $06,$0C,$18,$30,$60,$C0,$80,$00 ; /
    48  e2f1 7ccedef6e6c67c00   !byte $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
    49  e2f9 1838181818187e00   !byte $18,$38,$18,$18,$18,$18,$7E,$00 ; 1
    50  e301 7cc6067cc0c0fe00   !byte $7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
    51  e309 fc06063c0606fc00   !byte $FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
    52  e311 0cccccccfe0c0c00   !byte $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
    53  e319 fec0fc0606c67c00   !byte $FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
    54  e321 7cc0c0fcc6c67c00   !byte $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
    55  e329 fe06060c18303000   !byte $FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
    56  e331 7cc6c67cc6c67c00   !byte $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
    57  e339 7cc6c67e06067c00   !byte $7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
    58  e341 0018180000181800   !byte $00,$18,$18,$00,$00,$18,$18,$00 ; :
    59  e349 0018180000181830   !byte $00,$18,$18,$00,$00,$18,$18,$30 ; ;
    60  e351 0c18306030180c00   !byte $0C,$18,$30,$60,$30,$18,$0C,$00 ; <
    61  e359 00007e007e000000   !byte $00,$00,$7E,$00,$7E,$00,$00,$00 ; =
    62  e361 30180c060c183000   !byte $30,$18,$0C,$06,$0C,$18,$30,$00 ; >
    63  e369 3c660c1818001800   !byte $3C,$66,$0C,$18,$18,$00,$18,$00 ; ?
    64  e371 7cc6dededec07e00   !byte $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
    65  e379 386cc6c6fec6c600   !byte $38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
    66  e381 fcc6c6fcc6c6fc00   !byte $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
    67  e389 7cc6c0c0c0c67c00   !byte $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
    68  e391 f8ccc6c6c6ccf800   !byte $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
    69  e399 fec0c0f8c0c0fe00   !byte $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
    70  e3a1 fec0c0f8c0c0c000   !byte $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
    71  e3a9 7cc6c0c0cec67c00   !byte $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
    72  e3b1 c6c6c6fec6c6c600   !byte $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
    73  e3b9 7e18181818187e00   !byte $7E,$18,$18,$18,$18,$18,$7E,$00 ; I
    74  e3c1 0606060606c67c00   !byte $06,$06,$06,$06,$06,$C6,$7C,$00 ; J
    75  e3c9 c6ccd8f0d8ccc600   !byte $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
    76  e3d1 c0c0c0c0c0c0fe00   !byte $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
    77  e3d9 c6eefefed6c6c600   !byte $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
    78  e3e1 c6e6f6decec6c600   !byte $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
    79  e3e9 7cc6c6c6c6c67c00   !byte $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
    80  e3f1 fcc6c6fcc0c0c000   !byte $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
    81  e3f9 7cc6c6c6d6de7c06   !byte $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
    82  e401 fcc6c6fcd8ccc600   !byte $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
    83  e409 7cc6c07c06c67c00   !byte $7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
    84  e411 ff18181818181800   !byte $FF,$18,$18,$18,$18,$18,$18,$00 ; T
    85  e419 c6c6c6c6c6c6fe00   !byte $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
    86  e421 c6c6c6c6c67c3800   !byte $C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
    87  e429 c6c6c6c6d6fe6c00   !byte $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
    88  e431 c6c66c386cc6c600   !byte $C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
    89  e439 c6c6c67c1830e000   !byte $C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
    90  e441 fe060c183060fe00   !byte $FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
    91  e449 3c30303030303c00   !byte $3C,$30,$30,$30,$30,$30,$3C,$00 ; [
    92  e451 c06030180c060200   !byte $C0,$60,$30,$18,$0C,$06,$02,$00 ; \
    93  e459 3c0c0c0c0c0c3c00   !byte $3C,$0C,$0C,$0C,$0C,$0C,$3C,$00 ; ]
    94  e461 10386cc600000000   !byte $10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
    95  e469 00000000000000ff   !byte $00,$00,$00,$00,$00,$00,$00,$FF ; _
    96  e471 18180c0000000000   !byte $18,$18,$0C,$00,$00,$00,$00,$00 ; `
    97  e479 00007c067ec67e00   !byte $00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
    98  e481 c0c0c0fcc6c6fc00   !byte $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
    99  e489 00007cc6c0c67c00   !byte $00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
   100  e491 0606067ec6c67e00   !byte $06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
   101  e499 00007cc6fec07c00   !byte $00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
   102  e4a1 1c36307830307800   !byte $1C,$36,$30,$78,$30,$30,$78,$00 ; f
   103  e4a9 00007ec6c67e06fc   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
   104  e4b1 c0c0fcc6c6c6c600   !byte $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
   105  e4b9 1800381818183c00   !byte $18,$00,$38,$18,$18,$18,$3C,$00 ; i
   106  e4c1 060006060606c67c   !byte $06,$00,$06,$06,$06,$06,$C6,$7C ; j
   107  e4c9 c0c0ccd8f8ccc600   !byte $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
   108  e4d1 3818181818183c00   !byte $38,$18,$18,$18,$18,$18,$3C,$00 ; l
   109  e4d9 0000ccfefed6d600   !byte $00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
   110  e4e1 0000fcc6c6c6c600   !byte $00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
   111  e4e9 00007cc6c6c67c00   !byte $00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
   112  e4f1 0000fcc6c6fcc0c0   !byte $00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
   113  e4f9 00007ec6c67e0606   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
   114  e501 0000fcc6c0c0c000   !byte $00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
   115  e509 00007ec07c06fc00   !byte $00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
   116  e511 18187e1818180e00   !byte $18,$18,$7E,$18,$18,$18,$0E,$00 ; t
   117  e519 0000c6c6c6c67e00   !byte $00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
   118  e521 0000c6c6c67c3800   !byte $00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
   119  e529 0000c6c6d6fe6c00   !byte $00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
   120  e531 0000c66c386cc600   !byte $00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
   121  e539 0000c6c6c67e06fc   !byte $00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
   122  e541 0000fe0c3860fe00   !byte $00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
   123  e549 0e18187018180e00   !byte $0E,$18,$18,$70,$18,$18,$0E,$00 ; {
   124  e551 1818180018181800   !byte $18,$18,$18,$00,$18,$18,$18,$00 ; |
   125  e559 7018180e18187000   !byte $70,$18,$18,$0E,$18,$18,$70,$00 ; }
   126  e561 76dc000000000000   !byte $76,$DC,$00,$00,$00,$00,$00,$00 ; ~

; ******** Source: ../lib\gfx\tms9918.asm
    16  e569 ffffffffffffffff   
    17                          
    18                          HAVE_TMS9918 = 1
    19                          
    20                          ; -------------------------
    21                          ; Constants
    22                          ; -------------------------
    23                          !ifndef TMS9918_IO_PORT { TMS9918_IO_PORT = $10
    24                                  !warn "TMS9918_IO_PORT not provided. Defaulting to ", TMS9918_IO_PORT
    25                          }
    26                          
    27                          !ifndef TMS9918_ZP_START { TMS9918_ZP_START = $30
    28                                  !warn "TMS9918_ZP_START not provided. Defaulting to ", TMS9918_ZP_START
    29                          }
    30                          
    31                          !ifndef TMS9918_RAM_START { TMS9918_RAM_START = $7ba0
    32                                  !warn "TMS9918_RAM_START not provided. Defaulting to ", TMS9918_RAM_START
    33                          }
    34                          
    35                          ; -----------------------------------------------------------------------------
    36                          ; Zero page
    37                          ; -----------------------------------------------------------------------------
    38                          TMS_TMP_ADDRESS         = TMS9918_ZP_START      ; 2 bytes
    39                          TMS9918_ZP_SIZE         = 2                     ; LAST ZP ADDRESS
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          .TMS9918_REG0_SHADOW_ADDR = TMS9918_RAM_START
    45                          .TMS9918_REG1_SHADOW_ADDR = TMS9918_RAM_START + 1
    46                          
    47                          TMS9918_CONSOLE_X         = TMS9918_RAM_START + 2
    48                          TMS9918_CONSOLE_Y         = TMS9918_RAM_START + 3
    49                          TMS9918_CONSOLE_SIZE_X    = TMS9918_RAM_START + 4
    50                          TMS9918_CONSOLE_LINE_LEN  = TMS9918_RAM_START + 5
    51                          .TMS9918_REGX             = TMS9918_RAM_START + 6
    52                          .TMS9918_REGY             = TMS9918_RAM_START + 7
    53                          .TMS9918_TMP_READ_ROW     = TMS9918_RAM_START + 8
    54                          .TMS9918_TMP_WRITE_ROW    = TMS9918_RAM_START + 9
    55                          
    56                          TMS9918_TMP_BUFFER        = TMS9918_RAM_START + 10 ; 40 bytes 
    57                          TMS9918_RAM_SIZE          = 50
    58                          
    59                          
    60                          
    61                          !if TMS9918_ZP_END < (TMS9918_ZP_START + TMS9918_ZP_SIZE) {
    62                                  !error "TMS9918_ZP requires ",TMS9918_ZP_SIZE," bytes. Allocated ",TMS9918_ZP_END - TMS9918_ZP_START
    63                          }
    64                          
    65                          !if TMS9918_RAM_END < (TMS9918_RAM_START + TMS9918_RAM_SIZE) {
    66                                  !error "TMS9918_RAM requires ",.TMS9918_RAM_SIZE," bytes. Allocated ",TMS9918_RAM_END - TMS9918_RAM_START
    67                          }
    68                          
    69                          
    70                          ; IO Ports
    71                          TMS9918_RAM     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT
    72                          TMS9918_REG     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT | $01
    73                          
    74                          
    75                          ; -----------------------------------------------------------------------------
    76                          ; VRAM addresses
    77                          ; -----------------------------------------------------------------------------
    78                          TMS_VRAM_NAME_ADDRESS           = $3800
    79                          TMS_VRAM_COLOR_ADDRESS          = $0000
    80                          TMS_VRAM_PATT_ADDRESS           = $2000
    81                          TMS_VRAM_SPRITE_ATTR_ADDRESS    = $3B00
    82                          TMS_VRAM_SPRITE_PATT_ADDRESS    = $1800
    83                          
    84                          ; -----------------------------------------------------------------------------
    85                          ; Register values
    86                          ; -----------------------------------------------------------------------------
    87                          TMS_R0_MODE_GRAPHICS_I          = $00
    88                          TMS_R0_MODE_GRAPHICS_II         = $02
    89                          TMS_R0_MODE_MULTICOLOR          = $00
    90                          TMS_R0_MODE_TEXT                = $00
    91                          TMS_R0_EXT_VDP_ENABLE           = $01
    92                          TMS_R0_EXT_VDP_DISABLE          = $00
    93                          
    94                          TMS_R1_RAM_16K                  = $80
    95                          TMS_R1_RAM_4K                   = $00
    96                          TMS_R1_DISP_BLANK               = $00
    97                          TMS_R1_DISP_ACTIVE              = $40
    98                          TMS_R1_INT_ENABLE               = $20
    99                          TMS_R1_INT_DISABLE              = $00
   100                          TMS_R1_MODE_GRAPHICS_I          = $00
   101                          TMS_R1_MODE_GRAPHICS_II         = $00
   102                          TMS_R1_MODE_MULTICOLOR          = $08
   103                          TMS_R1_MODE_TEXT                = $10
   104                          TMS_R1_SPRITE_8                 = $00
   105                          TMS_R1_SPRITE_16                = $02
   106                          TMS_R1_SPRITE_MAG1              = $00
   107                          TMS_R1_SPRITE_MAG2              = $01
   108                          
   109                          ; -----------------------------------------------------------------------------
   110                          ; Color palette
   111                          ; -----------------------------------------------------------------------------
   112                          TMS_TRANSPARENT         = $00
   113                          TMS_BLACK               = $01
   114                          TMS_MED_GREEN           = $02
   115                          TMS_LT_GREEN            = $03
   116                          TMS_DK_BLUE             = $04
   117                          TMS_LT_BLUE             = $05
   118                          TMS_DK_RED              = $06
   119                          TMS_CYAN                = $07
   120                          TMS_MED_RED             = $08
   121                          TMS_LT_RED              = $09
   122                          TMS_DK_YELLOW           = $0a
   123                          TMS_LT_YELLOW           = $0b
   124                          TMS_DK_GREEN            = $0c
   125                          TMS_MAGENTA             = $0d
   126                          TMS_GREY                = $0e
   127                          TMS_WHITE               = $0f
   128                          
   129                          TMS_GFX_TILE_WIDTH      = 8
   130                          TMS_GFX_TILE_HEIGHT     = 8
   131                          TMS_GFX_TILES_X         = 32
   132                          TMS_GFX_TILES_Y         = 24
   133                          TMS_GFX_PIXELS_X        = TMS_GFX_TILES_X * TMS_GFX_TILE_WIDTH
   134                          TMS_GFX_PIXELS_Y        = TMS_GFX_TILES_Y * TMS_GFX_TILE_HEIGHT
   135                          
   136                          TMS_TXT_TILE_WIDTH      = 6
   137                          TMS_TXT_TILE_HEIGHT     = 8
   138                          TMS_TXT_TILES_X         = 40
   139                          TMS_TXT_TILES_Y         = 24
   140                          TMS_TXT_PIXELS_X        = TMS_TXT_TILES_X * TMS_TXT_TILE_WIDTH
   141                          TMS_TXT_PIXELS_Y        = TMS_TXT_TILES_Y * TMS_TXT_TILE_HEIGHT
   142                          
   143                          TMS_SPRITE_SIZE         = 8
   144                          TMS_SPRITE_SIZE2X       = TMS_SPRITE_SIZE * 2
   145                          
   146                          !ifndef TMS_MODEL {
   147                                  !warn "Set TMS_MODEL to one of: 9918, 9929. Defaulting to 9918"
   148                                  TMS_MODEL = 9918
   149                          } 
   150                          
   151                          ; -------------------------
   152                          ; Constants
   153                          ; -------------------------
   154                          
   155                          !if TMS_MODEL = 9918 {
   156                                  TMS_FPS = 60
   157                          } else { !if TMS_MODEL = 9929 {
   158                                  TMS_FPS = 50
   159                          } else {
   160                                  !error "Unknown TMS_MODEL. Must be one of: 9918 or 9929"
   161                          }}
   162                          
   163                          ; -----------------------------------------------------------------------------
   164                          ; Default register values
   165                          ; -----------------------------------------------------------------------------
   166                          TMS_REGISTER_DATA:
   167  e571 00                 !byte TMS_R0_EXT_VDP_DISABLE
   168  e572 80                 !byte TMS_R1_RAM_16K
   169  e573 0e                 !byte TMS_VRAM_NAME_ADDRESS >> 10
   170  e574 00                 !byte TMS_VRAM_COLOR_ADDRESS >> 6
   171  e575 04                 !byte TMS_VRAM_PATT_ADDRESS >> 11
   172  e576 76                 !byte TMS_VRAM_SPRITE_ATTR_ADDRESS >> 7
   173  e577 03                 !byte TMS_VRAM_SPRITE_PATT_ADDRESS >> 11
   174  e578 11                 !byte TMS_BLACK << 4 | TMS_BLACK
   175                          
   176                          
   177                          ; -----------------------------------------------------------------------------
   178                          ; Delay subroutines required for TMS9918 CPU access windows
   179                          ; -----------------------------------------------------------------------------
   180                          ;      CONDITION          MODE    VDP DELAY       WAIT TIME          TOTAL TIME
   181                          ; -----------------------------------------------------------------------------
   182                          ;  Active Display Area   Text        2uS          0 - 1.1uS           2 - 3.1uS      
   183                          ;  Active Display Area   GFX I, II   2uS          0 - 5.95uS          2 - 8uS      
   184                          ;  4300uS after VSYNC    All         2uS             0uS                2uS      
   185                          ;  Reg 1 Blank Bit 0     All         2uS             0uS                2uS      
   186                          ;  Active Display Area   Multicolor  2uS          0 - 1.5uS           2 - 3.5uS      
   187                          ; -----------------------------------------------------------------------------
   188                          _tmsWaitData:
   189  e579 ea                         nop
   190  e57a ea                         nop
   191  e57b ea                         nop
   192  e57c ea                         nop
   193  e57d ea                         nop
   194  e57e ea                         nop
   195  e57f ea                         nop
   196  e580 ea                         nop
   197  e581 ea                         nop
   198                          _tmsWaitReg:
   199  e582 ea                         nop
   200  e583 ea                         nop
   201  e584 ea                         nop
   202  e585 60                         rts
   203                          
   204                          tmsSetAddressNextRow:
   205  e586 a524                       lda TMS_TMP_ADDRESS
   206  e588 18                         clc
   207  e589 6920                       adc #32
   208  e58b 8524                       sta TMS_TMP_ADDRESS
   209  e58d 9002                       bcc +
   210  e58f e625                       inc TMS_TMP_ADDRESS + 1
   211                          +
   212  e591 60                         rts
   213                          
   214                          ; -----------------------------------------------------------------------------
   215                          ; tmsSetAddressWrite: Set an address in the TMS9918 
   216                          ; -----------------------------------------------------------------------------
   217                          ; TMS_TMP_ADDRESS: Address to set
   218                          ; -----------------------------------------------------------------------------
   219                          tmsSetAddressWrite:
   220  e592 08                         php
   221  e593 78                         sei                     ; we can't be interrupted here
   222  e594 a524                       lda TMS_TMP_ADDRESS
   223  e596 8d117f                     sta TMS9918_REG
   224  e599 2082e5                     +tmsWaitReg
   225  e59c a525                       lda TMS_TMP_ADDRESS + 1
   226  e59e 0940                       ora #$40
   227  e5a0 8d117f                     sta TMS9918_REG
   228  e5a3 2082e5                     +tmsWaitReg
   229  e5a6 28                         plp
   230  e5a7 60                         rts
   231                          
   232                          ; -----------------------------------------------------------------------------
   233                          ; tmsSetAddressRead: Set an address to read from the TMS9918 
   234                          ; -----------------------------------------------------------------------------
   235                          ; TMS_TMP_ADDRESS: Address to read
   236                          ; -----------------------------------------------------------------------------
   237                          tmsSetAddressRead:
   238  e5a8 08                         php
   239  e5a9 78                         sei                     ; we can't be interrupted here
   240  e5aa a524                       lda TMS_TMP_ADDRESS
   241  e5ac 8d117f                     sta TMS9918_REG
   242  e5af 2082e5                     +tmsWaitReg
   243  e5b2 a525                       lda TMS_TMP_ADDRESS + 1
   244  e5b4 8d117f                     sta TMS9918_REG
   245  e5b7 2082e5                     +tmsWaitReg
   246  e5ba 28                         plp
   247  e5bb 60                         rts
   248                          
   249                          
   250                          ; -----------------------------------------------------------------------------
   251                          ; tmsSetRegister: Set a register value
   252                          ; -----------------------------------------------------------------------------
   253                          ; Inputs:
   254                          ;  A: The value to set
   255                          ;  X: The register (0 - 7)
   256                          ; -----------------------------------------------------------------------------
   257                          tmsSetRegister:
   258  e5bc 08                         php
   259  e5bd 78                         sei             ; we can't be interrupted here
   260  e5be 8d117f                     sta TMS9918_REG
   261  e5c1 2082e5                     +tmsWaitReg
   262  e5c4 8a                         txa
   263  e5c5 0980                       ora #$80
   264  e5c7 8d117f                     sta TMS9918_REG
   265  e5ca 2082e5                     +tmsWaitReg
   266  e5cd 28                         plp
   267  e5ce 60                         rts
   268                          
   269                          ; -----------------------------------------------------------------------------
   270                          ; tmsSetBackground: Set the background color (R7)
   271                          ; -----------------------------------------------------------------------------
   272                          ; Outputs:
   273                          ;  A: Color. High nibble = FG. Low nibble = BG
   274                          ; -----------------------------------------------------------------------------
   275                          tmsSetBackground:
   276  e5cf a207                       ldx #7
   277  e5d1 d0e9                       bne tmsSetRegister
   278                          
   279                          ; -----------------------------------------------------------------------------
   280                          ; tmsReg0Set: Set register 0
   281                          ; -----------------------------------------------------------------------------
   282                          ; Outputs:
   283                          ;  A: Field values to set (will be OR'd with existing Reg0)
   284                          ; -----------------------------------------------------------------------------
   285                          tmsReg0SetFields:
   286  e5d3 0d267b                     ora .TMS9918_REG0_SHADOW_ADDR
   287                          .tmsReg0SetFields:
   288  e5d6 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   289  e5d9 a200                       ldx #0
   290  e5db f0df                       beq tmsSetRegister
   291                                  
   292                          ; -----------------------------------------------------------------------------
   293                          ; tmsReg0Clear: Clear register 0 
   294                          ; -----------------------------------------------------------------------------
   295                          ; Outputs:
   296                          ;  A: Field values to cleared (will be XOR'd with existing Reg0)
   297                          ; -----------------------------------------------------------------------------
   298                          tmsReg0ClearFields:
   299  e5dd 49ff                       eor #$ff
   300  e5df 2d267b                     and .TMS9918_REG0_SHADOW_ADDR
   301  e5e2 4cd6e5                     jmp .tmsReg0SetFields
   302                          
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsReg1Set: Set register 0
   306                          ; -----------------------------------------------------------------------------
   307                          ; Outputs:
   308                          ;  A: Field values to set (will be OR'd with existing Reg1)
   309                          ; -----------------------------------------------------------------------------
   310                          tmsReg1SetFields:
   311  e5e5 0d277b                     ora .TMS9918_REG1_SHADOW_ADDR
   312                          .tmsReg1SetFields:
   313  e5e8 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   314  e5eb a201                       ldx #1
   315  e5ed d0cd                       bne tmsSetRegister
   316                                  
   317                          ; -----------------------------------------------------------------------------
   318                          ; tmsReg1Clear: Clear register 1
   319                          ; -----------------------------------------------------------------------------
   320                          ; Outputs:
   321                          ;  A: Field values to cleared (will be XOR'd with existing Reg1)
   322                          ; -----------------------------------------------------------------------------
   323                          tmsReg1ClearFields:
   324  e5ef 49ff                       eor #$ff
   325  e5f1 2d277b                     and .TMS9918_REG1_SHADOW_ADDR
   326  e5f4 4ce8e5                     jmp .tmsReg1SetFields
   327                          
   328                          
   329                          ; -----------------------------------------------------------------------------
   330                          ; tmsModeReset: Reset graphics Mode
   331                          ; -----------------------------------------------------------------------------
   332                          tmsModeReset:
   333  e5f7 a903                       lda #$03
   334  e5f9 20dde5                     jsr tmsReg0ClearFields
   335                          
   336  e5fc a918                       lda #$18
   337  e5fe 20efe5                     jsr tmsReg1ClearFields
   338                          
   339                                  ; if we were in Graphics II, then we need to reset
   340                                  ; the color and pattern table addresses
   341  e601 a900                       lda #0;(TMS_VRAM_COLOR_ADDRESS >> 6)
   342  e603 a203                       ldx #3
   343  e605 20bce5                     jsr tmsSetRegister
   344                          
   345  e608 a904                       lda #TMS_VRAM_PATT_ADDRESS >> 11
   346  e60a a204                       ldx #4
   347  e60c 20bce5                     jsr tmsSetRegister
   348  e60f 60                         rts
   349                          
   350                          ; -----------------------------------------------------------------------------
   351                          ; tmsModeGraphicsI: Set up for Graphics I mode
   352                          ; -----------------------------------------------------------------------------
   353                          tmsModeGraphicsI:
   354  e610 20f7e5                     jsr tmsModeReset
   355                          
   356  e613 a900                       lda #TMS_R0_MODE_GRAPHICS_I
   357  e615 20d3e5                     jsr tmsReg0SetFields
   358                          
   359  e618 a900                       lda #TMS_R1_MODE_GRAPHICS_I
   360  e61a 20e5e5                     jsr tmsReg1SetFields
   361                          
   362  e61d a920                       lda #32
   363  e61f 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   364  e622 60                         rts
   365                          
   366                          ; -----------------------------------------------------------------------------
   367                          ; tmsModeGraphicsII: Set up for Graphics II mode
   368                          ; -----------------------------------------------------------------------------
   369                          tmsModeGraphicsII:
   370  e623 20f7e5                     jsr tmsModeReset
   371                          
   372  e626 a902                       lda #TMS_R0_MODE_GRAPHICS_II
   373  e628 20d3e5                     jsr tmsReg0SetFields
   374                          
   375  e62b a900                       lda #TMS_R1_MODE_GRAPHICS_II
   376  e62d 20e5e5                     jsr tmsReg1SetFields
   377                          
   378                                  ; in Graphics II, Registers 3 and 4 work differently
   379                                  ;
   380                                  ; reg3 - Color table
   381                                  ;   $7f = $0000
   382                                  ;   $ff = $2000
   383                                  ;
   384                                  ; reg4 - Pattern table
   385                                  ;  $03 = $0000
   386                                  ;  $07 = $2000
   387                          
   388                                  ; set color table to $0000
   389  e630 a97f                       lda #$7f
   390  e632 a203                       ldx #3
   391  e634 20bce5                     jsr tmsSetRegister
   392                          
   393                                  ; set pattern table to $2000
   394  e637 a907                       lda #$07
   395  e639 a204                       ldx #4
   396  e63b 20bce5                     jsr tmsSetRegister
   397                          
   398  e63e a920                       lda #32
   399  e640 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   400                          
   401  e643 60                         rts
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsModeText: Set up for Text mode
   405                          ; -----------------------------------------------------------------------------
   406                          tmsModeText:
   407  e644 20f7e5                     jsr tmsModeReset
   408                          
   409  e647 a900                       lda #TMS_R0_MODE_TEXT
   410  e649 20d3e5                     jsr tmsReg0SetFields
   411                          
   412  e64c a910                       lda #TMS_R1_MODE_TEXT
   413  e64e 20e5e5                     jsr tmsReg1SetFields
   414                          
   415  e651 a928                       lda #40
   416  e653 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   417                          
   418  e656 60                         rts
   419                          
   420                          ; -----------------------------------------------------------------------------
   421                          ; tmsModeMulticolor: Set up for Multicolor mode
   422                          ; -----------------------------------------------------------------------------
   423                          tmsModeMulticolor:
   424  e657 20f7e5                     jsr tmsModeReset
   425                          
   426  e65a a900                       lda #TMS_R0_MODE_MULTICOLOR
   427  e65c 20d3e5                     jsr tmsReg0SetFields
   428                          
   429  e65f a908                       lda #TMS_R1_MODE_MULTICOLOR
   430  e661 20e5e5                     jsr tmsReg1SetFields
   431  e664 60                         rts
   432                          
   433                          ; -----------------------------------------------------------------------------
   434                          ; tmsInit: Initialise the registers
   435                          ; -----------------------------------------------------------------------------
   436                          tmsInit:
   437  e665 08                         php
   438  e666 78                         sei                             ; we can't be interrupted here
   439  e667 ad71e5                     lda TMS_REGISTER_DATA
   440  e66a 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   441  e66d ad72e5                     lda TMS_REGISTER_DATA + 1
   442  e670 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   443                          
   444  e673 a900                       lda #0
   445  e675 8d287b                     sta TMS9918_CONSOLE_X
   446  e678 8d297b                     sta TMS9918_CONSOLE_Y
   447                          
   448                                  ; set up the registers
   449  e67b a200                       ldx #0
   450                          
   451                          @regLoop
   452  e67d bd71e5                             lda TMS_REGISTER_DATA, x
   453  e680 8d117f                             sta TMS9918_REG
   454  e683 2082e5                             +tmsWaitReg
   455  e686 8a                                 txa
   456  e687 0980                               ora #$80
   457  e689 8d117f                             sta TMS9918_REG
   458  e68c 2082e5                             +tmsWaitReg
   459  e68f e8                                 inx
   460  e690 e008                               cpx #8
   461  e692 d0e9                               bne @regLoop
   462                                  
   463  e694 2010e6                     jsr tmsModeGraphicsI
   464                          
   465                                  ; load all data into VRAM
   466  e697 20f9e6                     jsr tmsInitPattTable
   467                          
   468  e69a 2039e7                     jsr tmsInitTextTable
   469                                  
   470  e69d a917                       +tmsColorFgBg TMS_BLACK, TMS_CYAN
   471  e69f 2054e7                     jsr tmsInitEntireColorTable
   472                          
   473  e6a2 2075e7                     jsr tmsInitSpriteTable
   474                          
   475  e6a5 28                         plp
   476                                  
   477  e6a6 60                         rts
   478                          
   479                          ; -----------------------------------------------------------------------------
   480                          ; _tmsSendPage: Send A for a kilobyte
   481                          ; -----------------------------------------------------------------------------
   482                          _tmsSendKb
   483  e6a7 20b0e6                     jsr _tmsSendPage
   484  e6aa 20b0e6                     jsr _tmsSendPage
   485  e6ad 20b0e6                     jsr _tmsSendPage
   486                                  ; flow through
   487                                  
   488                          ; -----------------------------------------------------------------------------
   489                          ; _tmsSendPage: Send A for a whole page
   490                          ; -----------------------------------------------------------------------------
   491                          _tmsSendPage:
   492  e6b0 a220                       ldx #32
   493                          _tmsSendX8:
   494  e6b2 8d107f2079e5               +tmsPut
   495  e6b8 8d107f2079e5               +tmsPut
   496  e6be 8d107f2079e5               +tmsPut
   497  e6c4 8d107f2079e5               +tmsPut
   498  e6ca 8d107f2079e5               +tmsPut
   499  e6d0 8d107f2079e5               +tmsPut
   500  e6d6 8d107f2079e5               +tmsPut
   501  e6dc 8d107f2079e5               +tmsPut
   502  e6e2 ca                         dex
   503  e6e3 d0cd                       bne _tmsSendX8
   504  e6e5 60                         rts
   505                          
   506                          ; -----------------------------------------------------------------------------
   507                          ; _tmsSendEmptyPage: Send an empty page of data
   508                          ; -----------------------------------------------------------------------------
   509                          _tmsSendEmptyPage:
   510  e6e6 a900                       lda #0
   511  e6e8 f0c6                       beq _tmsSendPage ; rts in here
   512                          
   513                          ; -----------------------------------------------------------------------------
   514                          ; tmsSendBytes: Send bytes to the TMS (up to 1 page)
   515                          ; -----------------------------------------------------------------------------
   516                          ; Inputs:
   517                          ;   TMS_TMP_ADDRESS:    Holds source address
   518                          ;   X:                  Number of bytes (1 to 256)
   519                          ; -----------------------------------------------------------------------------
   520                          tmsSendBytes:
   521  e6ea a000                       ldy #0
   522                          -
   523  e6ec b124                       lda (TMS_TMP_ADDRESS), Y
   524  e6ee 8d107f2079e5               +tmsPut
   525  e6f4 c8                         iny
   526  e6f5 ca                         dex
   527  e6f6 d0f4                       bne -
   528  e6f8 60                         rts
   529                          
   530                          ; -----------------------------------------------------------------------------
   531                          ; tmsInitPattTable: Initialise the pattern table
   532                          ; -----------------------------------------------------------------------------
   533                          tmsInitPattTable:
   534                                  
   535                          
   536                                  ; pattern table
   537  e6f9 0878a9008d117f20...        +tmsSetAddrPattTable
   538                          
   539                                  ; (0 - 31) all empty
   540  e70c 20e6e6                     jsr _tmsSendEmptyPage
   541                          
   542  e70f a9718524a9e28525...        +tmsSendData TMS_FONT_DATA, $300
   543                          
   544                                  ; (128 - 159) all empty
   545  e72c 20e6e6                     jsr _tmsSendEmptyPage
   546                          
   547                                  ; (160 - 191) all empty
   548  e72f 20e6e6                     jsr _tmsSendEmptyPage
   549                          
   550                                  ; (192 - 223) all empty
   551  e732 20e6e6                     jsr _tmsSendEmptyPage
   552                          
   553                                  ; (224 - 255) all empty
   554  e735 20e6e6                     jsr _tmsSendEmptyPage
   555                          
   556                                  
   557                          
   558  e738 60                         rts
   559                          
   560                          ; -----------------------------------------------------------------------------
   561                          ; tmsInitTextTable: Initialise the text (tilemap) table
   562                          ; -----------------------------------------------------------------------------
   563                          tmsInitTextTable:
   564                                  
   565                          
   566                                  ; text table table
   567  e739 0878a9008d117f20...        +tmsSetAddrNameTable
   568                          
   569                          
   570  e74c a900                       lda #0
   571  e74e a27e                       ldx #(42 * 3)
   572  e750 20b2e6                     jsr _tmsSendX8
   573                          
   574  e753 60                         rts
   575                          
   576                          
   577                          ; -----------------------------------------------------------------------------
   578                          ; tmsInitEntireColorTable: Initialise the full color table
   579                          ; -----------------------------------------------------------------------------
   580                          ; Inputs:
   581                          ;   A: Color (fg/bg) to initialise
   582                          
   583                          tmsInitEntireColorTable:
   584  e754 a220                       ldx #32
   585                          
   586                          ; tmsInitColorTable: Initialise the color table
   587                          
   588                          ; Inputs:
   589                          ;   A: Color (fg/bg) to initialise
   590                          ;   X: Number of elements to initialise (1 to 32)
   591                          ; -----------------------------------------------------------------------------
   592                          tmsInitColorTable:
   593                                  
   594  e756 48                         pha
   595                          
   596                                  ; color table
   597  e757 0878a9008d117f20...        +tmsSetAddrColorTable
   598                          
   599  e76a 68                         pla
   600                          -
   601  e76b 8d107f2079e5               +tmsPut
   602  e771 ca                         dex
   603  e772 d0f7                       bne -
   604                          
   605  e774 60                         rts
   606                          
   607                          ; -----------------------------------------------------------------------------
   608                          ; tmsInitSpriteTable: Initialise the sprite table
   609                          ; -----------------------------------------------------------------------------
   610                          tmsInitSpriteTable:
   611                                  
   612                          
   613                                  ; sprites table
   614  e775 0878a9008d117f20...        +tmsSetAddrSpriteAttrTable
   615                          
   616  e788 a220                       ldx #32
   617                          -
   618                                  ; Vertical position
   619  e78a a9d08d107f2079e5           +tmsPut $D0        ; 208 ($D0) stops processing of sprites
   620  e792 a9008d107f2079e5           +tmsPut $00        ; Horizontal position
   621                          
   622                                  ; Index (A still 0)
   623  e79a 8d107f2079e5               +tmsPut
   624                                  ; Early Clock / Color  (A still 0)
   625  e7a0 8d107f2079e5               +tmsPut
   626  e7a6 ca                         dex
   627  e7a7 d0e1                       bne -
   628                          
   629                                  
   630                          
   631  e7a9 60                         rts
   632                          
   633                          ; -----------------------------------------------------------------------------
   634                          ; tmsTileXyAtPixelXy: Return tile position at pixel position
   635                          ; -----------------------------------------------------------------------------
   636                          ; Inputs:
   637                          ;  X: Pixel position X
   638                          ;  Y: Pixel position Y
   639                          ; Outputs:
   640                          ;  X: Tile position X
   641                          ;  Y: Tile position Y
   642                          ; -----------------------------------------------------------------------------
   643                          tmsTileXyAtPixelXy:
   644  e7aa 48                         pha
   645  e7ab 8a                         txa
   646  e7ac 4a4a4a                     +div8
   647  e7af aa                         tax
   648                          
   649  e7b0 98                         tya
   650  e7b1 4a4a4a                     +div8
   651  e7b4 a8                         tay
   652  e7b5 68                         pla
   653  e7b6 60                         rts
   654                          
   655                          ; -----------------------------------------------------------------------------
   656                          ; tmsHex8: Output an 8-bit byte as hexadecimal
   657                          ; -----------------------------------------------------------------------------
   658                          ; Inputs:
   659                          ;  A: The value to output
   660                          ; -----------------------------------------------------------------------------
   661                          tmsHex8:
   662  e7b7 48                         pha
   663  e7b8 4a4a4a4a                   +lsr4
   664  e7bc aa                         tax
   665  e7bd bdd4e7                     lda .H2, x
   666  e7c0 8d107f2079e5               +tmsPut 
   667  e7c6 68                         pla
   668  e7c7 290f                       and #$0f
   669  e7c9 aa                         tax
   670  e7ca bdd4e7                     lda .H2, x
   671  e7cd 8d107f2079e5               +tmsPut 
   672                                  
   673  e7d3 60                         rts
   674                          
   675  e7d4 3031323334353637....H2 !text "0123456789abcdef"
   676                          
   677                          
   678                          ; -----------------------------------------------------------------------------
   679                          ; tmsSetSpriteTmpAddress: Set TMS_TMP_ADDRESS for a given sprite attributes
   680                          ; -----------------------------------------------------------------------------
   681                          ; Inputs:
   682                          ;   A: sprite index (0-31)
   683                          ; -----------------------------------------------------------------------------
   684                          tmsSetSpriteTmpAddress:
   685  e7e4 0a                         asl
   686  e7e5 0a                         asl
   687  e7e6 8524                       sta TMS_TMP_ADDRESS
   688                          
   689  e7e8 a93b                       lda #>TMS_VRAM_SPRITE_ATTR_ADDRESS
   690  e7ea 8525                       sta TMS_TMP_ADDRESS + 1
   691  e7ec 60                         rts
   692                          
   693                          ; -----------------------------------------------------------------------------
   694                          ; tmsSetPosTmpAddress: Set TMS_TMP_ADDRESS for a given text position
   695                          ; -----------------------------------------------------------------------------
   696                          ; Inputs:
   697                          ;   X: X position (0 - 31)
   698                          ;   Y: Y position (0 - 23)
   699                          ; -----------------------------------------------------------------------------
   700                          tmsSetPosTmpAddress:
   701  e7ed a938                       lda #>TMS_VRAM_NAME_ADDRESS
   702  e7ef 8525                       sta TMS_TMP_ADDRESS + 1
   703                                  
   704                                  ; this can be better. rotate and save, perhaps
   705                          
   706  e7f1 98                         tya
   707  e7f2 4a4a4a                     +div8
   708  e7f5 18                         clc
   709  e7f6 6525                       adc TMS_TMP_ADDRESS + 1
   710  e7f8 8525                       sta TMS_TMP_ADDRESS + 1
   711  e7fa 98                         tya
   712  e7fb 2907                       and #$07
   713  e7fd 0a0a0a0a0a                 +mul32
   714  e802 8524                       sta TMS_TMP_ADDRESS
   715  e804 8a                         txa
   716  e805 0524                       ora TMS_TMP_ADDRESS
   717  e807 8524                       sta TMS_TMP_ADDRESS
   718  e809 60                         rts
   719                          
   720                          ; -----------------------------------------------------------------------------
   721                          ; tmsSetPosTmpAddressText: Set TMS_TMP_ADDRESS for a given text position
   722                          ; -----------------------------------------------------------------------------
   723                          ; Inputs:
   724                          ;   X: X position (0 - 39)
   725                          ;   Y: Y position (0 - 23)
   726                          ; -----------------------------------------------------------------------------
   727                          tmsSetPosTmpAddressText:
   728  e80a a938                       lda #>TMS_VRAM_NAME_ADDRESS
   729  e80c 8525                       sta TMS_TMP_ADDRESS + 1
   730  e80e a900                       lda #<TMS_VRAM_NAME_ADDRESS
   731  e810 8524                       sta TMS_TMP_ADDRESS
   732                          
   733                          .tmsSetPosTmpAddressTextLoop
   734  e812 c000                       cpy #0
   735  e814 f00e                       beq ++
   736  e816 18                         clc
   737  e817 a524                       lda TMS_TMP_ADDRESS
   738  e819 6928                       adc #40
   739  e81b 8524                       sta TMS_TMP_ADDRESS
   740  e81d 9002                       bcc +
   741  e81f e625                       inc TMS_TMP_ADDRESS + 1
   742                          +
   743  e821 88                         dey
   744  e822 d0ee                       bne .tmsSetPosTmpAddressTextLoop
   745                          ++
   746  e824 18                         clc
   747  e825 8a                         txa
   748  e826 6524                       adc TMS_TMP_ADDRESS
   749  e828 8524                       sta TMS_TMP_ADDRESS
   750  e82a 9002                       bcc +
   751  e82c e625                       inc TMS_TMP_ADDRESS + 1
   752                          +
   753  e82e 60                         rts
   754                          
   755                          
   756                          tmsConsoleScrollLine:
   757  e82f a900                       lda #0
   758  e831 8d2f7b                     sta .TMS9918_TMP_WRITE_ROW
   759  e834 a901                       lda #1
   760  e836 8d2e7b                     sta .TMS9918_TMP_READ_ROW
   761                          .nextRow:
   762                          
   763  e839 ac2e7b                     ldy .TMS9918_TMP_READ_ROW
   764  e83c a200                       ldx #0
   765  e83e a928                       lda #40
   766  e840 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   767  e843 f006                       beq +
   768  e845 20ede7                     jsr tmsSetPosTmpAddress
   769  e848 4c4ee8                     jmp ++
   770                          +
   771  e84b 200ae8                     jsr tmsSetPosTmpAddressText
   772                          ++
   773  e84e 20a8e5                     jsr tmsSetAddressRead
   774                          
   775  e851 207fe8                     jsr .tmsBufferIn
   776                          
   777  e854 a200                       ldx #0
   778  e856 ac2f7b                     ldy .TMS9918_TMP_WRITE_ROW
   779  e859 a200                       ldx #0
   780  e85b a928                       lda #40
   781  e85d cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   782  e860 f006                       beq +
   783  e862 20ede7                     jsr tmsSetPosTmpAddress
   784  e865 4c6be8                     jmp ++
   785                          +
   786  e868 200ae8                     jsr tmsSetPosTmpAddressText
   787                          ++
   788  e86b 2092e5                     jsr tmsSetAddressWrite
   789                          
   790  e86e 2091e8                     jsr .tmsBufferOut
   791                          
   792                          
   793  e871 ee2f7b                     inc .TMS9918_TMP_WRITE_ROW
   794  e874 ee2e7b                     inc .TMS9918_TMP_READ_ROW
   795                          
   796  e877 ad2e7b                     lda .TMS9918_TMP_READ_ROW
   797  e87a c919                       cmp #25
   798                          
   799  e87c d0bb                       bne .nextRow
   800                          
   801                          
   802                                  ; copy to buffer 32 bytes at a time, write back  24 rows for gfx, 30 "rows" for text
   803  e87e 60                         rts
   804                          
   805                          .tmsBufferIn:
   806  e87f a200                       ldx #0
   807                          -
   808  e881 ad107f2079e5               +tmsGet
   809  e887 9d307b                     sta TMS9918_TMP_BUFFER, x
   810  e88a e8                         inx
   811  e88b ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   812  e88e d0f1                       bne -
   813  e890 60                         rts
   814                          
   815                          .tmsBufferOut:
   816  e891 a200                       ldx #0
   817                          
   818                          -
   819  e893 bd307b                     lda TMS9918_TMP_BUFFER, x
   820  e896 8d107f2079e5               +tmsPut
   821  e89c e8                         inx
   822  e89d ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   823  e8a0 d0f1                       bne -
   824  e8a2 60                         rts
   825                          
   826                          ; -----------------------------------------------------------------------------
   827                          ; tmsIncPosConsole: Increment console position
   828                          ; -----------------------------------------------------------------------------
   829                          tmsIncPosConsole:
   830  e8a3 ee287b                     inc TMS9918_CONSOLE_X
   831  e8a6 ad287b                     lda TMS9918_CONSOLE_X
   832  e8a9 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   833  e8ac d008                       bne +
   834  e8ae a900                       lda #0
   835  e8b0 8d287b                     sta TMS9918_CONSOLE_X
   836  e8b3 ee297b                     inc TMS9918_CONSOLE_Y
   837                          +
   838  e8b6 ad297b                     lda TMS9918_CONSOLE_Y
   839  e8b9 c918                       cmp #24
   840  e8bb 9006                       bcc +
   841  e8bd ce297b                     dec TMS9918_CONSOLE_Y
   842  e8c0 4c2fe8                     jmp tmsConsoleScrollLine
   843                          +
   844  e8c3 60                         rts
   845                          
   846                          
   847                          ; -----------------------------------------------------------------------------
   848                          ; tmsDecPosConsole: Increment console position
   849                          ; -----------------------------------------------------------------------------
   850                          tmsDecPosConsole:
   851  e8c4 ce287b                     dec TMS9918_CONSOLE_X
   852  e8c7 1017                       bpl ++
   853  e8c9 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
   854  e8cc 8d287b                     sta TMS9918_CONSOLE_X
   855  e8cf ce287b                     dec TMS9918_CONSOLE_X
   856  e8d2 a900                       lda #0
   857  e8d4 cd297b                     cmp TMS9918_CONSOLE_Y
   858  e8d7 d004                       bne +
   859  e8d9 8d287b                     sta TMS9918_CONSOLE_X
   860  e8dc 60                         rts        
   861                          +
   862  e8dd ce297b                     dec TMS9918_CONSOLE_Y
   863                          ++
   864  e8e0 60                         rts
   865                          
   866                          
   867                          ; -----------------------------------------------------------------------------
   868                          ; tmsConsoleHome: Set cursor position top left
   869                          ; -----------------------------------------------------------------------------
   870                          tmsConsoleHome:
   871  e8e1 9c287b                     stz TMS9918_CONSOLE_X
   872  e8e4 9c297b                     stz TMS9918_CONSOLE_Y
   873                          
   874                                  ; flow through
   875                          
   876                          ; -----------------------------------------------------------------------------
   877                          ; tmsSetPosConsole: Set cursor position to console position
   878                          ; -----------------------------------------------------------------------------
   879                          tmsSetPosConsole:
   880  e8e7 ae287b                     ldx TMS9918_CONSOLE_X
   881  e8ea ac297b                     ldy TMS9918_CONSOLE_Y
   882                          
   883                                  ; flow through
   884                          
   885                          ; -----------------------------------------------------------------------------
   886                          ; tmsSetPosWrite: Set cursor position
   887                          ; -----------------------------------------------------------------------------
   888                          ; Inputs:
   889                          ;   X: X position (0 - 31)
   890                          ;   Y: Y position (0 - 23)
   891                          ; -----------------------------------------------------------------------------
   892                          tmsSetPosWrite:
   893  e8ed a910                       lda #TMS_R1_MODE_TEXT
   894  e8ef 2c277b                     bit .TMS9918_REG1_SHADOW_ADDR
   895  e8f2 d006                       bne tmsSetPosWriteText
   896  e8f4 20ede7                     jsr tmsSetPosTmpAddress
   897  e8f7 4c92e5                     jmp tmsSetAddressWrite
   898                          
   899                          ; -----------------------------------------------------------------------------
   900                          ; tmsSetPosWrite: Set cursor position (text mode)
   901                          ; -----------------------------------------------------------------------------
   902                          ; Inputs:
   903                          ;   X: X position (0 - 39)
   904                          ;   Y: Y position (0 - 23)
   905                          ; -----------------------------------------------------------------------------
   906                          tmsSetPosWriteText:
   907  e8fa 200ae8                     jsr tmsSetPosTmpAddressText
   908  e8fd 4c92e5                     jmp tmsSetAddressWrite
   909                          
   910                          ; -----------------------------------------------------------------------------
   911                          ; tmsSetPosRead: Set cursor position to read from
   912                          ; -----------------------------------------------------------------------------
   913                          ; Inputs:
   914                          ;   X: X position (0 - 31)
   915                          ;   Y: Y position (0 - 23)
   916                          ; -----------------------------------------------------------------------------
   917                          tmsSetPosRead:
   918  e900 20ede7                     jsr tmsSetPosTmpAddress
   919  e903 4ca8e5                     jmp tmsSetAddressRead
   920                          
   921                          
   922                          ; -----------------------------------------------------------------------------
   923                          ; tmsSetPatternTmpAddress: Set TMS_TMP_ADDRESS for a given pattern definition
   924                          ; -----------------------------------------------------------------------------
   925                          ; Inputs:
   926                          ;   A: Pattern number
   927                          ;   Y: Y offset (row) in the pattern
   928                          ; -----------------------------------------------------------------------------
   929                          tmsSetPatternTmpAddressBank0:
   930                          tmsSetPatternTmpAddress:
   931  e906 48                         pha
   932  e907 a920                       lda #>TMS_VRAM_PATT_ADDRESS
   933  e909 8525                       sta TMS_TMP_ADDRESS + 1
   934                                  
   935  e90b 68                         pla
   936  e90c 48                         pha
   937                          
   938  e90d 4a4a4a4a4a                 +div32
   939  e912 18                         clc
   940  e913 6525                       adc TMS_TMP_ADDRESS + 1
   941  e915 8525                       sta TMS_TMP_ADDRESS + 1
   942  e917 68                         pla
   943  e918 291f                       and #$1f
   944  e91a 0a0a0a                     +mul8
   945  e91d 8524                       sta TMS_TMP_ADDRESS
   946  e91f 98                         tya
   947  e920 0524                       ora TMS_TMP_ADDRESS
   948  e922 8524                       sta TMS_TMP_ADDRESS
   949  e924 60                         rts
   950                          
   951                          ; -----------------------------------------------------------------------------
   952                          ; tmsSetPatternTmpAddressBank1: Set TMS_TMP_ADDRESS for a given pattern 
   953                          ;                               definition in bank 1 (GFX II)
   954                          ; -----------------------------------------------------------------------------
   955                          ; Inputs:
   956                          ;   A: Pattern number
   957                          ;   Y: Y offset (row) in the pattern
   958                          ; -----------------------------------------------------------------------------
   959                          tmsSetPatternTmpAddressBank1:
   960  e925 2006e9                     jsr tmsSetPatternTmpAddress
   961  e928 a525                       lda TMS_TMP_ADDRESS + 1
   962  e92a 18                         clc
   963  e92b 6908                       adc #8
   964  e92d 8525                       sta TMS_TMP_ADDRESS + 1
   965  e92f 60                         rts
   966                          
   967                          ; -----------------------------------------------------------------------------
   968                          ; tmsSetPatternTmpAddressBank2: Set TMS_TMP_ADDRESS for a given pattern 
   969                          ;                               definition in bank 2 (GFX II)
   970                          ; -----------------------------------------------------------------------------
   971                          ; Inputs:
   972                          ;   A: Pattern number
   973                          ;   Y: Y offset (row) in the pattern
   974                          ; -----------------------------------------------------------------------------
   975                          tmsSetPatternTmpAddressBank2:
   976  e930 2006e9                     jsr tmsSetPatternTmpAddress
   977  e933 a525                       lda TMS_TMP_ADDRESS + 1
   978  e935 18                         clc
   979  e936 6910                       adc #16
   980  e938 8525                       sta TMS_TMP_ADDRESS + 1
   981  e93a 60                         rts        
   982                          
   983                          ; -----------------------------------------------------------------------------
   984                          ; tmsSetPatternWrite: Set pattern definition to write to
   985                          ; -----------------------------------------------------------------------------
   986                          ; Inputs:
   987                          ;   A: Pattern number
   988                          ;   Y: Y offset (row) in the pattern
   989                          ; -----------------------------------------------------------------------------
   990                          tmsSetPatternWrite:
   991  e93b 2006e9                     jsr tmsSetPatternTmpAddress
   992  e93e 4c92e5                     jmp tmsSetAddressWrite
   993                          
   994                          ; -----------------------------------------------------------------------------
   995                          ; tmsSetPatternRead: Set pattern definition to read from
   996                          ; -----------------------------------------------------------------------------
   997                          ; Inputs:
   998                          ;   A: Pattern number
   999                          ;   Y: Y offset (row) in the pattern
  1000                          ; -----------------------------------------------------------------------------
  1001                          tmsSetPatternRead:
  1002  e941 2006e9                     jsr tmsSetPatternTmpAddress
  1003  e944 4ca8e5                     jmp tmsSetAddressRead
  1004                          
  1005                          
  1006                          ; -----------------------------------------------------------------------------
  1007                          ; tmsPrint: Print a null-terminated string
  1008                          ; -----------------------------------------------------------------------------
  1009                          ; Inputs:
  1010                          ;  STR_ADDR: Contains address of null-terminated string
  1011                          ; Prerequisites:
  1012                          ;  TMS address already set using +tmsSetAddressWrite
  1013                          ; -----------------------------------------------------------------------------
  1014                          tmsPrint:
  1015  e947 a000                       ldy #0
  1016                          -
  1017  e949 2079e5                     +tmsWaitData
  1018  e94c b134                       lda (STR_ADDR), y
  1019  e94e f009                       beq +
  1020  e950 8d107f2079e5               +tmsPut 
  1021  e956 c8                         iny
  1022  e957 d0f0                       bne -
  1023                          +
  1024  e959 60                         rts
  1025                          
  1026                          
  1027                          ; -----------------------------------------------------------------------------
  1028                          ; tmsConsoleOut: Print a null-terminated string
  1029                          ; -----------------------------------------------------------------------------
  1030                          ; Inputs:
  1031                          ;  'A': Character to output to console
  1032                          ; -----------------------------------------------------------------------------
  1033                          tmsConsoleOut:
  1034  e95a 8e2c7b                     stx .TMS9918_REGX
  1035  e95d 8c2d7b                     sty .TMS9918_REGY
  1036  e960 08                         php
  1037  e961 78                         sei
  1038  e962 c90d                       cmp #$0d ; enter
  1039  e964 f021                       beq .tmsConsoleNewline
  1040  e966 c90a                       cmp #$0a ; enter
  1041  e968 f01d                       beq .tmsConsoleNewline
  1042                          
  1043  e96a c908                       cmp #$08 ; backspace
  1044  e96c f01f                       beq .tmsConsoleBackspace
  1045                          
  1046  e96e 48                         pha
  1047  e96f 20e7e8                     jsr tmsSetPosConsole
  1048  e972 68                         pla
  1049  e973 8d107f2079e5               +tmsPut
  1050  e979 20a3e8                     jsr tmsIncPosConsole
  1051  e97c ee2b7b                     inc TMS9918_CONSOLE_LINE_LEN
  1052                          
  1053                          .endConsoleOut
  1054  e97f 28                         plp
  1055  e980 ac2d7b                     ldy .TMS9918_REGY
  1056  e983 ae2c7b                     ldx .TMS9918_REGX
  1057  e986 60                         rts
  1058                          
  1059                          .tmsConsoleNewline
  1060  e987 20a3e9                     jsr tmsConsoleNewline
  1061  e98a 4c7fe9                     jmp .endConsoleOut
  1062                          
  1063                          .tmsConsoleBackspace
  1064  e98d 20cae9                     jsr tmsConsoleBackspace
  1065  e990 4c7fe9                     jmp .endConsoleOut
  1066                          
  1067                          
  1068                          ; -----------------------------------------------------------------------------
  1069                          ; tmsConsolePrint: Print a null-terminated string (console mode)
  1070                          ; -----------------------------------------------------------------------------
  1071                          ; Inputs:
  1072                          ;  STR_ADDR: Contains address of null-terminated string
  1073                          ; Prerequisites:
  1074                          ;  TMS address already set using +tmsSetAddressWrite
  1075                          ; -----------------------------------------------------------------------------
  1076                          tmsConsolePrint:
  1077  e993 a000                       ldy #0
  1078                          -
  1079  e995 2079e5                     +tmsWaitData
  1080  e998 b134                       lda (STR_ADDR), y
  1081  e99a f006                       beq +
  1082  e99c 205ae9                     jsr tmsConsoleOut
  1083  e99f c8                         iny
  1084  e9a0 d0f3                       bne -
  1085                          +
  1086  e9a2 60                         rts
  1087                          
  1088                          ; -----------------------------------------------------------------------------
  1089                          ; tmsConsoleNewline: Output a newline to the console (scrolls if on last line)
  1090                          ; -----------------------------------------------------------------------------
  1091                          tmsConsoleNewline:
  1092  e9a3 20e7e8                     jsr tmsSetPosConsole
  1093  e9a6 a9208d107f2079e5           +tmsPut ' '
  1094  e9ae ad287b                     lda TMS9918_CONSOLE_X
  1095  e9b1 d008                       bne +
  1096  e9b3 ad2b7b                     lda TMS9918_CONSOLE_LINE_LEN
  1097  e9b6 f003                       beq +
  1098  e9b8 60                         rts
  1099  e9b9 f000                       beq +
  1100                          +
  1101  e9bb ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
  1102  e9be 8d287b                     sta TMS9918_CONSOLE_X
  1103  e9c1 ce287b                     dec TMS9918_CONSOLE_X
  1104  e9c4 9c2b7b                     stz TMS9918_CONSOLE_LINE_LEN
  1105  e9c7 4ca3e8                     jmp tmsIncPosConsole
  1106                          
  1107                          
  1108                          ; -----------------------------------------------------------------------------
  1109                          ; tmsConsoleBackspace: Output a backspace to the console
  1110                          ; -----------------------------------------------------------------------------
  1111                          tmsConsoleBackspace:
  1112  e9ca 20c4e8                     jsr tmsDecPosConsole
  1113  e9cd a920205ae9                 +tmsConsoleOut ' '
  1114  e9d2 a9208d107f2079e5           +tmsPut ' '
  1115  e9da ce2b7b                     dec TMS9918_CONSOLE_LINE_LEN
  1116  e9dd 4cc4e8                     jmp tmsDecPosConsole

; ******** Source: kernel.asm
   158                          
   159                          }
   160                          
   161                          !ifndef HBC56_DISABLE_SFXMAN {
   162                                  !src "sfx/sfxman.asm"
   163                          }
   164                          
   165                          !ifndef HBC56_DISABLE_LCD {
   166                                  !ifndef LCD_MODEL { LCD_MODEL = 12864 }

; ******** Source: ../lib\gfx\bitmap.asm
     1                          ; 6502 - Bitmap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Bitmap object has the following structure
    12                          ;
    13                          ; Width
    14                          ; Height
    15                          
    16                          HAVE_BITMAP = 1
    17                          
    18                          !ifndef BITMAP_ZP_START { BITMAP_ZP_START = $28
    19                                  !warn "BITMAP_ZP_START not provided. Defaulting to ", BITMAP_ZP_START
    20                          }
    21                          
    22                          !ifndef BITMAP_RAM_START { BITMAP_RAM_START = $7b80
    23                                  !warn "BITMAP_RAM_START not provided. Defaulting to ", BITMAP_RAM_START
    24                          }
    25                          
    26                          ; -------------------------
    27                          ; Zero page
    28                          ; -------------------------
    29                          PIX_ADDR                = BITMAP_ZP_START
    30                          BITMAP_ADDR_H           = BITMAP_ZP_START+2
    31                          BITMAP_ZP_SIZE          = 4
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; High RAM
    35                          ; -----------------------------------------------------------------------------
    36                          
    37                          BITMAP_X       = BITMAP_RAM_START + 1
    38                          BITMAP_Y       = BITMAP_RAM_START + 2
    39                          BITMAP_X1      = BITMAP_X
    40                          BITMAP_Y1      = BITMAP_Y
    41                          BITMAP_X2      = BITMAP_RAM_START + 3
    42                          BITMAP_Y2      = BITMAP_RAM_START + 4
    43                          
    44                          BITMAP_LINE_STYLE     = BITMAP_RAM_START + 7
    45                          BITMAP_LINE_STYLE_ODD = BITMAP_RAM_START + 8
    46                          
    47                          BITMAP_TMP1    = BITMAP_RAM_START + 9
    48                          BITMAP_TMP2    = BITMAP_RAM_START + 10
    49                          BITMAP_TMP3    = BITMAP_RAM_START + 11
    50                          BITMAP_TMP4    = BITMAP_RAM_START + 12
    51                          BITMAP_TMP5    = BITMAP_RAM_START + 13
    52                          BITMAP_TMP6    = BITMAP_RAM_START + 14
    53                          
    54                          BITMAP_RAM_SIZE = 16
    55                          
    56                          
    57                          !if BITMAP_ZP_END < (BITMAP_ZP_START + BITMAP_ZP_SIZE) {
    58                                  !error "BITMAP_ZP requires ",BITMAP_ZP_SIZE," bytes. Allocated ",BITMAP_ZP_END - BITMAP_ZP_START
    59                          }
    60                          
    61                          !if BITMAP_RAM_END < (BITMAP_RAM_START + BITMAP_RAM_SIZE) {
    62                                  !error "BITMAP_RAM requires ",BITMAP_RAM_SIZE," bytes. Allocated ",BITMAP_RAM_END - BITMAP_RAM_START
    63                          }
    64                          
    65                          
    66                          
    67                          ; -----------------------------------------------------------------------------
    68                          ; bitmapClear: Clear the bitmap
    69                          ; -----------------------------------------------------------------------------
    70                          ; Inputs:
    71                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
    72                          ; -----------------------------------------------------------------------------
    73                          bitmapClear:
    74  e9e0 a9ff                       lda #$ff
    75  e9e2 8d1d7b                     sta BITMAP_LINE_STYLE
    76  e9e5 a900                       lda #0
    77                                  
    78                                  ; flow through.... danger?
    79                                  
    80                                  
    81                          ; -----------------------------------------------------------------------------
    82                          ; bitmapFill: Fill the bitmap with value in A
    83                          ; -----------------------------------------------------------------------------
    84                          ; Inputs:
    85                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
    86                          ;  A: The value to fill
    87                          ; -----------------------------------------------------------------------------
    88                          bitmapFill:
    89  e9e7 8d1f7b                     sta BITMAP_TMP1
    90  e9ea a520                       lda BITMAP_ADDR_H
    91  e9ec 851f                       sta PIX_ADDR + 1
    92  e9ee a200                       ldx #0
    93  e9f0 861e                       stx PIX_ADDR
    94                          
    95  e9f2 ad1f7b                     lda BITMAP_TMP1 
    96  e9f5 a000                       ldy #0
    97  e9f7 a204                       ldx #4
    98                          -
    99  e9f9 911e                       sta (PIX_ADDR), y
   100  e9fb c8                         iny
   101  e9fc d0fb                       bne -
   102  e9fe e61f                       inc PIX_ADDR + 1
   103  ea00 ca                         dex
   104  ea01 d0f6                       bne -
   105                                  
   106  ea03 60                         rts
   107                                  
   108                                  
   109                          ; -----------------------------------------------------------------------------
   110                          ; bitmapXor: XOR (invert) the entire bitmap
   111                          ; -----------------------------------------------------------------------------
   112                          ; Inputs:
   113                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   114                          ; -----------------------------------------------------------------------------
   115                          bitmapXor:
   116  ea04 a520                       lda BITMAP_ADDR_H
   117  ea06 851f                       sta PIX_ADDR + 1
   118  ea08 a200                       ldx #0
   119  ea0a 861e                       stx PIX_ADDR
   120                          
   121  ea0c a000                       ldy #0
   122  ea0e a204                       ldx #4
   123                          -
   124  ea10 a9ff                       lda #$ff
   125  ea12 511e                       eor (PIX_ADDR), y
   126  ea14 911e                       sta (PIX_ADDR), y
   127                                  
   128  ea16 c8                         iny
   129  ea17 d0f7                       bne -
   130  ea19 e61f                       inc PIX_ADDR + 1
   131  ea1b ca                         dex
   132  ea1c d0f2                       bne -
   133                                  
   134  ea1e 60                         rts
   135                                  
   136                          ; -----------------------------------------------------------------------------
   137                          ; _bitmapOffset: Set up the offset to the buffer based on X/Y (Internal use)
   138                          ; -----------------------------------------------------------------------------
   139                          ; Inputs:
   140                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   141                          ;  BITMAP_X: X position (0 to 127)
   142                          ;  BITMAP_Y: Y position (0 to 63)
   143                          ; Outputs:
   144                          ;  PIX_ADDR: Set to byte at column 0 of row BITMAP_Y
   145                          ;  Y:            Y offset of byte within row (0 to 63)
   146                          ;  X:            Bit offset within the byte
   147                          ; -----------------------------------------------------------------------------
   148                          _bitmapOffset:
   149                          
   150  ea1f a520                       lda BITMAP_ADDR_H
   151  ea21 851f                       sta PIX_ADDR + 1
   152  ea23 a200                       ldx #0
   153  ea25 861e                       stx PIX_ADDR
   154                                  
   155  ea27 ad187b                     lda BITMAP_Y
   156  ea2a 4a                         lsr
   157  ea2b 4a                         lsr
   158  ea2c 4a                         lsr
   159  ea2d 4a                         lsr
   160  ea2e 18                         clc
   161  ea2f 651f                       adc PIX_ADDR + 1
   162  ea31 851f                       sta PIX_ADDR + 1
   163                                  
   164  ea33 ad187b                     lda BITMAP_Y
   165  ea36 290f                       and #$0f
   166  ea38 0a                         asl
   167  ea39 0a                         asl
   168  ea3a 0a                         asl
   169  ea3b 0a                         asl
   170  ea3c 851e                       sta PIX_ADDR
   171                                  
   172  ea3e ad177b                     lda BITMAP_X
   173  ea41 4a                         lsr
   174  ea42 4a                         lsr
   175  ea43 4a                         lsr
   176  ea44 a8                         tay       ; Y contains start byte offset in row
   177                                  
   178  ea45 ad177b                     lda BITMAP_X
   179  ea48 2907                       and #$07
   180  ea4a aa                         tax   ; X contains bit offset within byte (0 - 7)       
   181  ea4b 60                         rts
   182                                  
   183                          ; -----------------------------------------------------------------------------
   184                          ; bitmapSetPixel: Set a pixel
   185                          ; -----------------------------------------------------------------------------
   186                          ; Inputs:
   187                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   188                          ;  BITMAP_X: X position (0 to 127)
   189                          ;  BITMAP_Y: Y position (0 to 63)
   190                          ; -----------------------------------------------------------------------------
   191                          bitmapSetPixel:
   192                          
   193  ea4c 201fea                     jsr _bitmapOffset
   194                                  
   195  ea4f bd30e1                     lda tableBitFromLeft, x
   196                                  
   197  ea52 111e                       ora (PIX_ADDR), y
   198  ea54 911e                       sta (PIX_ADDR), y
   199                                  
   200  ea56 60                         rts     
   201                                  
   202                          ; -----------------------------------------------------------------------------
   203                          ; bitmapClearPixel: Clear a pixel
   204                          ; -----------------------------------------------------------------------------
   205                          ; Inputs:
   206                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   207                          ;  BITMAP_X: X position (0 to 127)
   208                          ;  BITMAP_Y: Y position (0 to 63)
   209                          ; -----------------------------------------------------------------------------
   210                          bitmapClearPixel:
   211                          
   212  ea57 201fea                     jsr _bitmapOffset
   213                                  
   214  ea5a bd38e1                     lda tableInvBitFromLeft, x
   215                          
   216  ea5d 311e                       and (PIX_ADDR), y
   217  ea5f 911e                       sta (PIX_ADDR), y
   218                                  
   219  ea61 60                         rts
   220                                  
   221                                  
   222                          ; -----------------------------------------------------------------------------
   223                          ; bitmapXorPixel: XOR a pixel
   224                          ; -----------------------------------------------------------------------------
   225                          ; Inputs:
   226                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   227                          ;  BITMAP_X: X position (0 to 127)
   228                          ;  BITMAP_Y: Y position (0 to 63)
   229                          ; -----------------------------------------------------------------------------
   230                          bitmapXorPixel:
   231                          
   232  ea62 201fea                     jsr _bitmapOffset
   233                                  
   234  ea65 bd30e1                     lda tableBitFromLeft, x
   235                          
   236  ea68 511e                       eor (PIX_ADDR), y
   237  ea6a 911e                       sta (PIX_ADDR), y
   238                                  
   239  ea6c 60                         rts
   240                                  
   241                          ; -----------------------------------------------------------------------------
   242                          ; bitmapLineH: Output a horizontal line
   243                          ; -----------------------------------------------------------------------------
   244                          ; Inputs:
   245                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   246                          ;  BITMAP_X1: Start X position (0 to 127)
   247                          ;  BITMAP_X2: End X position (0 to 127)
   248                          ;  BITMAP_Y:  Y position (0 to 63)
   249                          ; -----------------------------------------------------------------------------
   250                          bitmapLineH:
   251                          
   252                                  END_OFFSET   = BITMAP_TMP3
   253                                  START_BYTE   = BITMAP_TMP1
   254                                  END_BYTE     = BITMAP_TMP2
   255                                  TMP_STYLE    = BITMAP_TMP5
   256                          
   257  ea6d ad197b                     lda BITMAP_X2
   258  ea70 4a                         lsr
   259  ea71 4a                         lsr
   260  ea72 4a                         lsr
   261  ea73 8d217b                     sta END_OFFSET  ; END_OFFSET contains end byte offset within the row
   262                          
   263  ea76 201fea                     jsr _bitmapOffset
   264                          
   265  ea79 ad1d7b                     lda BITMAP_LINE_STYLE
   266  ea7c 8d237b                     sta TMP_STYLE
   267                                  
   268  ea7f a9ff                       lda #$ff
   269                                  
   270                          ; shift the bits to the right for the pixel offset
   271                          -
   272  ea81 e000                       cpx #0
   273  ea83 f013                       beq ++
   274  ea85 4e237b                     lsr TMP_STYLE
   275  ea88 900a                       bcc +
   276  ea8a 48                         pha
   277  ea8b a980                       lda #$80
   278  ea8d 0d237b                     ora TMP_STYLE
   279  ea90 8d237b                     sta TMP_STYLE
   280  ea93 68                         pla     
   281                          +
   282  ea94 ca                         dex
   283  ea95 4a                         lsr
   284  ea96 b0e9                       bcs -  ; carry is always set
   285                          ++
   286  ea98 8d1f7b                     sta START_BYTE
   287                          
   288  ea9b ad197b                     lda BITMAP_X2
   289  ea9e 2907                       and #$07
   290                                  
   291  eaa0 aa                         tax   ; X contains bit offset within byte (0 - 7)       
   292                                  
   293  eaa1 a9ff                       lda #$ff
   294                                  
   295                          ; shift the bits to the left for the pixel offset
   296                          -
   297  eaa3 e007                       cpx #7
   298  eaa5 f004                       beq +
   299  eaa7 e8                         inx
   300  eaa8 0a                         asl    
   301  eaa9 b0f8                       bcs -  ; carry is always set
   302                          +
   303  eaab 8d207b                     sta END_BYTE
   304                                  
   305  eaae ad1f7b                     lda START_BYTE
   306  eab1 cc217b                     cpy END_OFFSET
   307  eab4 d015                       bne ++
   308  eab6 2d207b                     and END_BYTE  ; combine if within the same byte
   309                                  
   310  eab9 48                         pha
   311  eaba 49ff                       eor #$ff
   312  eabc 311e                       and (PIX_ADDR), y
   313  eabe 8d227b                     sta BITMAP_TMP4
   314  eac1 68                         pla
   315  eac2 2d237b                     and TMP_STYLE
   316  eac5 0d227b                     ora BITMAP_TMP4
   317  eac8 911e                       sta (PIX_ADDR), y
   318                                  
   319  eaca 60                         rts
   320                          ++
   321  eacb 48                         pha
   322  eacc 49ff                       eor #$ff
   323  eace 311e                       and (PIX_ADDR), y
   324  ead0 8d227b                     sta BITMAP_TMP4
   325  ead3 68                         pla
   326  ead4 2d237b                     and TMP_STYLE
   327  ead7 0d227b                     ora BITMAP_TMP4
   328  eada 911e                       sta (PIX_ADDR), y
   329                          -
   330  eadc a9ff                       lda #$ff
   331  eade c8                         iny
   332  eadf cc217b                     cpy END_OFFSET
   333  eae2 d003                       bne +
   334  eae4 2d207b                     and END_BYTE  ; combine if within the same byte
   335                          +
   336  eae7 48                         pha
   337  eae8 49ff                       eor #$ff
   338  eaea 311e                       and (PIX_ADDR), y
   339  eaec 8d227b                     sta BITMAP_TMP4
   340  eaef 68                         pla
   341  eaf0 2d237b                     and TMP_STYLE
   342  eaf3 0d227b                     ora BITMAP_TMP4
   343  eaf6 911e                       sta (PIX_ADDR), y
   344                          
   345  eaf8 cc217b                     cpy END_OFFSET
   346  eafb d0df                       bne -   
   347                                  
   348  eafd 60                         rts
   349                                  
   350                                  
   351                          ; -----------------------------------------------------------------------------
   352                          ; bitmapLineV: Output a horizontal line
   353                          ; -----------------------------------------------------------------------------
   354                          ; Inputs:
   355                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   356                          ;  BITMAP_Y1: Start Y position (0 to 63)
   357                          ;  BITMAP_Y2: End Y position (0 to 63)
   358                          ;  BITMAP_X:  Y position (0 to 127)
   359                          ; -----------------------------------------------------------------------------
   360                          bitmapLineV:
   361                          
   362                                  COL_BYTE     = BITMAP_TMP1
   363                                  STYLE_BYTE   = BITMAP_TMP2
   364                          
   365  eafe 201fea                     jsr _bitmapOffset
   366                                  
   367  eb01 ad1d7b                     lda BITMAP_LINE_STYLE
   368  eb04 8d207b                     sta STYLE_BYTE
   369                                  
   370  eb07 bd30e1                     lda tableBitFromLeft, x
   371                          
   372  eb0a 8d1f7b                     sta COL_BYTE    
   373                                  
   374  eb0d ae187b                     ldx BITMAP_Y1
   375                          -
   376  eb10 a980                       lda #$80
   377  eb12 2c207b                     bit STYLE_BYTE
   378  eb15 d00c                       bne +
   379                                  ; draw a 0
   380  eb17 ad1f7b                     lda COL_BYTE
   381  eb1a 49ff                       eor #$ff
   382  eb1c 311e                       and (PIX_ADDR), y       
   383  eb1e 911e                       sta (PIX_ADDR), y
   384  eb20 4c2aeb                     jmp ++
   385                          +       ; draw a 1
   386  eb23 ad1f7b                     lda COL_BYTE    
   387  eb26 111e                       ora (PIX_ADDR), y       
   388  eb28 911e                       sta (PIX_ADDR), y
   389                          ++
   390                                          
   391  eb2a ec1a7b                     cpx BITMAP_Y2
   392  eb2d f017                       beq ++
   393  eb2f 0e207b                     asl STYLE_BYTE
   394  eb32 9003                       bcc +
   395  eb34 ee207b                     inc STYLE_BYTE
   396                          +
   397  eb37 e8                         inx
   398  eb38 a910                       lda #16
   399  eb3a 18                         clc
   400  eb3b 651e                       adc PIX_ADDR
   401  eb3d 9002                       bcc +
   402  eb3f e61f                       inc PIX_ADDR + 1
   403                          +
   404  eb41 851e                       sta PIX_ADDR
   405  eb43 18                         clc
   406  eb44 90ca                       bcc -
   407                          ++
   408                                  
   409  eb46 60                         rts
   410                          
   411                          ; -----------------------------------------------------------------------------
   412                          ; bitmapLine: Output an arbitrary line
   413                          ; -----------------------------------------------------------------------------
   414                          ; Inputs:
   415                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   416                          ;  BITMAP_X1: 
   417                          ;  BITMAP_Y1: 
   418                          ;  BITMAP_X2: 
   419                          ;  BITMAP_Y2: 
   420                          ; -----------------------------------------------------------------------------
   421                          bitmapLine:
   422                          
   423                                  LINE_WIDTH = BITMAP_TMP1
   424                                  LINE_HEIGHT = BITMAP_TMP2
   425                                  
   426                                  ; get width
   427  eb47 ad197b                     lda BITMAP_X2
   428  eb4a 38                         sec
   429  eb4b ed177b                     sbc BITMAP_X1
   430                                  
   431  eb4e 1012                       bpl +
   432  eb50 ad177b                     lda BITMAP_X1
   433  eb53 48                         pha
   434  eb54 ad197b                     lda BITMAP_X2
   435  eb57 8d177b                     sta BITMAP_X1
   436  eb5a 68                         pla
   437  eb5b 8d197b                     sta BITMAP_X2
   438  eb5e 38                         sec
   439  eb5f ed177b                     sbc BITMAP_X1   
   440                          +       
   441  eb62 8d1f7b                     sta LINE_WIDTH
   442                          
   443                                  ; get height
   444  eb65 ad1a7b                     lda BITMAP_Y2
   445  eb68 38                         sec
   446  eb69 ed187b                     sbc BITMAP_Y1
   447                          
   448  eb6c 1012                       bpl +
   449  eb6e ad187b                     lda BITMAP_Y1
   450  eb71 48                         pha
   451  eb72 ad1a7b                     lda BITMAP_Y2
   452  eb75 8d187b                     sta BITMAP_Y1
   453  eb78 68                         pla
   454  eb79 8d1a7b                     sta BITMAP_Y2
   455  eb7c 38                         sec
   456  eb7d ed187b                     sbc BITMAP_Y1   
   457                          +       
   458  eb80 8d207b                     sta LINE_HEIGHT
   459                                  
   460  eb83 cd1f7b                     cmp LINE_WIDTH
   461  eb86 b003                       bcs .goTall
   462  eb88 4c8eeb                     jmp _bitmapLineWide
   463                          .goTall
   464  eb8b 4cdfeb                     jmp _bitmapLineTall
   465                                  
   466                                  ; rts in above subroutines
   467                                  
   468                          ; ----------------------------------------------------------------------------
   469                          
   470                          _bitmapLineWide:  ; a line that is wider than it is tall
   471                                  
   472                                  D = BITMAP_TMP6
   473                                  
   474                                  Y = BITMAP_TMP3
   475                                  
   476  eb8e ad207b                     lda LINE_HEIGHT
   477  eb91 0a                         asl
   478  eb92 38                         sec
   479  eb93 ed1f7b                     sbc LINE_WIDTH
   480  eb96 8d247b                     sta D
   481                                  
   482  eb99 ad177b                     lda BITMAP_X
   483  eb9c 48                         pha
   484                                  
   485  eb9d ad187b                     lda BITMAP_Y1
   486  eba0 8d217b                     sta Y
   487                                  
   488                          -
   489  eba3 204cea                     jsr bitmapSetPixel
   490  eba6 ad247b                     lda D
   491  eba9 1007                       bpl +
   492  ebab ad207b                     lda LINE_HEIGHT
   493  ebae 0a                         asl
   494  ebaf 4cc2eb                     jmp ++
   495                          +
   496  ebb2 ee187b                 inc BITMAP_Y1
   497  ebb5 ad1f7b                     lda LINE_WIDTH
   498  ebb8 38                         sec
   499  ebb9 ed207b                     sbc LINE_HEIGHT
   500  ebbc 0a                         asl
   501  ebbd 49ff                       eor #$ff
   502  ebbf 18                         clc
   503  ebc0 6901                       adc #1
   504                          ++
   505  ebc2 18                         clc
   506  ebc3 6d247b                     adc D
   507  ebc6 8d247b                     sta D
   508  ebc9 ee177b                     inc BITMAP_X
   509  ebcc ad197b                     lda BITMAP_X2
   510  ebcf cd177b                     cmp BITMAP_X
   511  ebd2 b0cf                       bcs -
   512                                  
   513  ebd4 ad217b                     lda Y
   514  ebd7 8d187b                     sta BITMAP_Y1
   515                                  
   516  ebda 68                         pla
   517  ebdb 8d177b                     sta BITMAP_X
   518                                  
   519  ebde 60                         rts
   520                                  
   521                          _bitmapLineTall:  ; a line that is taller than it is wide
   522                                  
   523                                  D = BITMAP_TMP6
   524                                  
   525                                  X = BITMAP_TMP3
   526                                  
   527  ebdf ad1f7b                     lda LINE_WIDTH
   528  ebe2 0a                         asl
   529  ebe3 38                         sec
   530  ebe4 ed207b                     sbc LINE_HEIGHT
   531  ebe7 8d247b                     sta D
   532                                  
   533  ebea ad187b                     lda BITMAP_Y
   534  ebed 48                         pha
   535                                  
   536  ebee ad177b                     lda BITMAP_X1
   537  ebf1 8d217b                     sta X
   538                                  
   539                          -
   540  ebf4 204cea                     jsr bitmapSetPixel
   541  ebf7 ad247b                     lda D
   542  ebfa 1007                       bpl +
   543  ebfc ad1f7b                     lda LINE_WIDTH
   544  ebff 0a                         asl
   545  ec00 4c13ec                     jmp ++
   546                          +
   547  ec03 ee177b                 inc BITMAP_X1
   548  ec06 ad207b                     lda LINE_HEIGHT
   549  ec09 38                         sec
   550  ec0a ed1f7b                     sbc LINE_WIDTH
   551  ec0d 0a                         asl
   552  ec0e 49ff                       eor #$ff
   553  ec10 18                         clc
   554  ec11 6901                       adc #1
   555                          ++
   556  ec13 18                         clc
   557  ec14 6d247b                     adc D
   558  ec17 8d247b                     sta D
   559  ec1a ee187b                     inc BITMAP_Y
   560  ec1d ad1a7b                     lda BITMAP_Y2
   561  ec20 cd187b                     cmp BITMAP_Y
   562  ec23 b0cf                       bcs -
   563                          
   564  ec25 ad217b                     lda X
   565  ec28 8d177b                     sta BITMAP_X1
   566                                  
   567  ec2b 68                         pla
   568  ec2c 8d187b                     sta BITMAP_Y
   569                                  
   570  ec2f 60                         rts
   571                                  
   572                          ; -----------------------------------------------------------------------------
   573                          ; bitmapRect: Output a rectangle outline
   574                          ; -----------------------------------------------------------------------------
   575                          ; Inputs:
   576                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   577                          ;  BITMAP_X1: 
   578                          ;  BITMAP_Y1: 
   579                          ;  BITMAP_X2: 
   580                          ;  BITMAP_Y2: 
   581                          ; -----------------------------------------------------------------------------
   582                          bitmapRect:
   583  ec30 206dea                     jsr bitmapLineH
   584  ec33 20feea                     jsr bitmapLineV
   585                                  
   586  ec36 ad177b                     lda BITMAP_X1
   587  ec39 48                         pha
   588  ec3a ad197b                     lda BITMAP_X2
   589  ec3d 8d177b                     sta BITMAP_X1
   590                          
   591  ec40 20feea                     jsr bitmapLineV
   592                                  
   593  ec43 68                         pla
   594  ec44 8d177b                     sta BITMAP_X1
   595                          
   596  ec47 ad187b                     lda BITMAP_Y1
   597  ec4a 48                         pha
   598  ec4b ad1a7b                     lda BITMAP_Y2
   599  ec4e 8d187b                     sta BITMAP_Y1
   600                                  
   601  ec51 206dea                     jsr bitmapLineH
   602                          
   603  ec54 68                         pla
   604  ec55 8d187b                     sta BITMAP_Y1
   605                                  
   606  ec58 60                         rts
   607                                  
   608                          ; -----------------------------------------------------------------------------
   609                          ; bitmapFilledRect: Output a filled rectangle
   610                          ; -----------------------------------------------------------------------------
   611                          ; Inputs:
   612                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   613                          ;  BITMAP_X1: 
   614                          ;  BITMAP_Y1: 
   615                          ;  BITMAP_X2: 
   616                          ;  BITMAP_Y2: 
   617                          ; -----------------------------------------------------------------------------
   618                          bitmapFilledRect:
   619  ec59 ad187b                     lda BITMAP_Y1
   620  ec5c 48                         pha
   621  ec5d ad1d7b                     lda BITMAP_LINE_STYLE
   622  ec60 48                         pha
   623                                  
   624                          -
   625  ec61 206dea                     jsr bitmapLineH
   626  ec64 ee187b                     inc BITMAP_Y1
   627                          
   628  ec67 68                         pla
   629  ec68 8d1d7b                     sta BITMAP_LINE_STYLE
   630  ec6b 48                         pha
   631                                  
   632  ec6c ad1a7b                     lda BITMAP_Y2
   633  ec6f cd187b                     cmp BITMAP_Y1
   634  ec72 f014                       beq +
   635                          
   636  ec74 206dea                     jsr bitmapLineH
   637  ec77 ee187b                     inc BITMAP_Y1
   638                                  
   639  ec7a ad1e7b                     lda BITMAP_LINE_STYLE_ODD
   640  ec7d 8d1d7b                     sta BITMAP_LINE_STYLE
   641                                  
   642  ec80 ad1a7b                     lda BITMAP_Y2
   643  ec83 cd187b                     cmp BITMAP_Y1
   644  ec86 d0d9                       bne -
   645                          +       
   646                          
   647  ec88 68                         pla
   648  ec89 8d1d7b                     sta BITMAP_LINE_STYLE
   649  ec8c 68                         pla
   650  ec8d 8d187b                     sta BITMAP_Y1
   651                                  

; ******** Source: kernel.asm
   167  ec90 60                 

; ******** Source: ../lib\lcd\lcd.asm
     1                          ; 6502 LCD - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          !ifndef LCD_IO_PORT { LCD_IO_PORT = $02
    11                                  !warn "LCD_IO_PORT not provided. Defaulting to ", LCD_IO_PORT
    12                          }
    13                          
    14                          !ifndef LCD_ZP_START { LCD_ZP_START = $38
    15                                  !warn "LCD_ZP_START not provided. Defaulting to ", LCD_ZP_START
    16                          }
    17                          
    18                          !ifndef LCD_RAM_START { LCD_RAM_START = $7c00
    19                                  !warn "LCD_RAM_START not provided. Defaulting to ", LCD_RAM_START
    20                          }
    21                          
    22                          HAVE_LCD = 1
    23                          
    24                          ; -------------------------
    25                          ; Zero page
    26                          ; -------------------------
    27                          LCD_TMP1        = LCD_ZP_START
    28                          LCD_TMP2        = LCD_ZP_START + 1
    29                          LCD_ZP_SIZE     = 2
    30                          
    31                          
    32                          ; -------------------------
    33                          ; High RAM
    34                          ; -------------------------
    35                          .LCD_BUFFER_ADDR        = LCD_RAM_START
    36                          .LCD_REGY_TMP           = LCD_RAM_START + 40
    37                          LCD_RAM_SIZE            = 42
    38                          
    39                          
    40                          !if LCD_ZP_END < (LCD_ZP_START + LCD_ZP_SIZE) {
    41                                  !error "LCD_ZP requires ",LCD_ZP_SIZE," bytes. Allocated ",LCD_ZP_END - LCD_ZP_START
    42                          }
    43                          
    44                          !if LCD_RAM_END < (LCD_RAM_START + LCD_RAM_SIZE) {
    45                                  !error "LCD_RAM requires ",LCD_RAM_SIZE," bytes. Allocated ",LCD_RAM_END - LCD_RAM_START
    46                          }
    47                          
    48                          
    49                          
    50                          ; -------------------------
    51                          ; Contants
    52                          ; -------------------------
    53                          
    54                          ; IO Ports
    55                          LCD_CMD         = IO_PORT_BASE_ADDRESS | LCD_IO_PORT
    56                          LCD_DATA        = IO_PORT_BASE_ADDRESS | LCD_IO_PORT | $01
    57                          
    58                          ; Commands
    59                          LCD_CMD_CLEAR                   = %00000001
    60                          LCD_CMD_HOME                    = %00000010
    61                          
    62                          LCD_CMD_ENTRY_MODE              = %00000100
    63                          LCD_CMD_ENTRY_MODE_INCREMENT    = %00000010
    64                          LCD_CMD_ENTRY_MODE_DECREMENT    = %00000000
    65                          LCD_CMD_ENTRY_MODE_SHIFT        = %00000001
    66                          
    67                          LCD_CMD_DISPLAY                 = %00001000
    68                          LCD_CMD_DISPLAY_ON              = %00000100
    69                          LCD_CMD_DISPLAY_CURSOR          = %00000010
    70                          LCD_CMD_DISPLAY_CURSOR_BLINK    = %00000001
    71                          
    72                          LCD_CMD_SHIFT                   = %00010000
    73                          LCD_CMD_SHIFT_CURSOR            = %00000000
    74                          LCD_CMD_SHIFT_DISPLAY           = %00001000
    75                          LCD_CMD_SHIFT_LEFT              = %00000000
    76                          LCD_CMD_SHIFT_RIGHT             = %00000100
    77                          
    78                          LCD_CMD_SET_CGRAM_ADDR          = $40
    79                          LCD_CMD_SET_DRAM_ADDR           = $80
    80                          
    81                          LCD_CMD_FUNCTIONSET             = $20
    82                          LCD_CMD_8BITMODE                = $10
    83                          LCD_CMD_2LINE                   = $08
    84                          
    85                          !ifndef LCD_MODEL {
    86                                  !warn "Set LCD_MODEL to one of: 1602, 2004 or 12864. Defaulting to 1602"
    87                                  LCD_MODEL = 1602
    88                          }
    89                          

; ******** Source: ../lib\lcd\lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                                  jmp +
    18                          .textAddr
    19                                  !text str,0
    20                          +
    21                                  lda #<.textAddr
    22                                  sta STR_ADDR_L
    23                                  lda #>.textAddr
    24                                  sta STR_ADDR_H
    25                                  jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                                  pha
    37                                  lda #c
    38                                  jsr lcdChar
    39                                  pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                                  jmp .afterText
    51                          .textAddr
    52                                  !text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: ../lib\lcd\lcd.asm
    90                          
    91                          
    92                          ; -------------------------
    93                          ; Constants
    94                          ; -------------------------
    95                          !if LCD_MODEL = 1602 {
    96                                  LCD_ROWS = 2
    97                                  LCD_COLUMNS = 16
    98                                  LCD_GRAPHICS = 0
    99                                  LCD_ADDR_LINE1 = 0x00
   100                                  LCD_ADDR_LINE2 = 0x40
   101                          } else { !if LCD_MODEL = 2004 {
   102                                  LCD_ROWS = 4
   103                                  LCD_COLUMNS = 20
   104                                  LCD_GRAPHICS = 0
   105                                  LCD_ADDR_LINE1 = 0x00
   106                                  LCD_ADDR_LINE2 = 0x40
   107                                  LCD_ADDR_LINE3 = 0x14
   108                                  LCD_ADDR_LINE4 = 0x54
   109                          } else { !if LCD_MODEL = 12864 {
   110                                  LCD_ROWS = 4
   111                                  LCD_COLUMNS = 16
   112                                  LCD_GRAPHICS = 1
   113                                  LCD_ADDR_LINE1 = 0x00
   114                                  LCD_ADDR_LINE2 = 0x10
   115                                  LCD_ADDR_LINE3 = 0x08
   116                                  LCD_ADDR_LINE4 = 0x18

; ******** Source: ../lib\lcd\lcd12864b.asm
     1                          ; 6502 12864B LCD - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          HAVE_GRAPHICS_LCD = 1
    12                          
    13                          ; -------------------------
    14                          ; Constants
    15                          ; -------------------------
    16                          LCD_CMD_12864B_EXTENDED         = $04
    17                          LCD_CMD_EXT_GRAPHICS_ENABLE     = $02
    18                          LCD_CMD_EXT_GRAPHICS_ADDR       = $80
    19                          
    20                          
    21                          LCD_BASIC           = LCD_INITIALIZE
    22                          LCD_EXTENDED        = LCD_INITIALIZE | LCD_CMD_12864B_EXTENDED
    23                          
    24                          ;---------------------------
    25                          
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; lcdGraphicsMode: Initialise the LCD graphics mode
    29                          ; -----------------------------------------------------------------------------
    30                          lcdGraphicsMode:
    31  ec91 20aeed                     jsr lcdWait
    32  ec94 a93c                       lda #LCD_EXTENDED
    33  ec96 8d027f                     sta LCD_CMD
    34                          
    35  ec99 20aeed                     jsr lcdWait
    36  ec9c a93e                       lda #LCD_EXTENDED | LCD_CMD_EXT_GRAPHICS_ENABLE
    37  ec9e 8d027f                     sta LCD_CMD
    38  eca1 60                         rts
    39                          
    40                          ; -----------------------------------------------------------------------------
    41                          ; lcdTextMode: Initialise the LCD text mode
    42                          ; -----------------------------------------------------------------------------
    43                          lcdTextMode:
    44  eca2 20aeed                     jsr lcdWait
    45  eca5 a93c                       lda #LCD_EXTENDED
    46  eca7 8d027f                     sta LCD_CMD
    47                          
    48  ecaa 20aeed                     jsr lcdWait
    49  ecad a93c                       lda #LCD_EXTENDED
    50  ecaf 8d027f                     sta LCD_CMD
    51  ecb2 60                         rts
    52                          
    53                          
    54                          ; -----------------------------------------------------------------------------
    55                          ; lcdSetRow: Set LCD address to graphics row
    56                          ; -----------------------------------------------------------------------------
    57                          ; Inputs:
    58                          ;  Y: Row of the LCD (0 - 63)
    59                          ; -----------------------------------------------------------------------------
    60                          lcdGraphicsSetRow:
    61  ecb3 48                         pha
    62                          
    63                                  ; set y address (0 - 31)
    64  ecb4 20aeed                     jsr lcdWait
    65  ecb7 98                         tya
    66  ecb8 291f                       and #$1f  ; only want 0-31
    67  ecba 0980                       ora #LCD_CMD_EXT_GRAPHICS_ADDR
    68  ecbc 8d027f                     sta LCD_CMD
    69                          
    70                                  ; set x address - either 0 or 8
    71  ecbf 20aeed                     jsr lcdWait
    72  ecc2 98                         tya
    73  ecc3 2920                       and #$20
    74  ecc5 4a                         lsr
    75  ecc6 4a                         lsr
    76  ecc7 0980                       ora #LCD_CMD_EXT_GRAPHICS_ADDR
    77  ecc9 8d027f                     sta LCD_CMD
    78                          
    79  eccc 68                         pla
    80  eccd 60                         rts
    81                          
    82                          
    83                          ; -----------------------------------------------------------------------------
    84                          ; lcdImage: Output a full-screen image from memory (XY upper-left)
    85                          ; -----------------------------------------------------------------------------
    86                          ; Inputs:
    87                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
    88                          ; -----------------------------------------------------------------------------
    89                          lcdImage:
    90                          
    91  ecce a520                       lda BITMAP_ADDR_H
    92  ecd0 851f                       sta PIX_ADDR + 1
    93  ecd2 a200                       ldx #0
    94  ecd4 861e                       stx PIX_ADDR
    95                          
    96                          .imageLoop:
    97                          
    98                                  ; x in the range 0-63
    99                          
   100                                  ; set y address
   101  ecd6 20aeed                     jsr lcdWait
   102  ecd9 8a                         txa
   103  ecda 291f                       and #$1f  ; only want 0-31
   104  ecdc 0980                       ora #LCD_CMD_EXT_GRAPHICS_ADDR
   105  ecde 8d027f                     sta LCD_CMD
   106                          
   107                                  ; set x address - either 0 or 8
   108  ece1 20aeed                     jsr lcdWait
   109  ece4 8a                         txa
   110  ece5 2920                       and #$20
   111  ece7 4a                         lsr
   112  ece8 4a                         lsr
   113  ece9 0980                       ora #LCD_CMD_EXT_GRAPHICS_ADDR
   114  eceb 8d027f                     sta LCD_CMD
   115                          
   116                          
   117  ecee a000                       ldy #0
   118                          .imgRowLoop
   119  ecf0 20aeed                     jsr lcdWait
   120                                  
   121  ecf3 b11e                       lda (PIX_ADDR), y
   122  ecf5 8d037f                     sta LCD_DATA
   123                                  
   124  ecf8 c8                         iny
   125  ecf9 c010                       cpy #16
   126  ecfb d0f3                       bne .imgRowLoop
   127                                  
   128  ecfd a51e                       lda PIX_ADDR
   129  ecff 18                         clc
   130  ed00 6910                       adc #16
   131  ed02 9002                       bcc +
   132  ed04 e61f                       inc PIX_ADDR + 1
   133                          +
   134  ed06 851e                       sta PIX_ADDR
   135                          
   136  ed08 e8                         inx
   137  ed09 e040                       cpx #64
   138  ed0b d0c9                       bne .imageLoop
   139                          
   140  ed0d 60                         rts
   141                                  
   142                                  
   143                          ; -----------------------------------------------------------------------------
   144                          ; lcdImageVflip: Output a full-screen image from memory (XY lower-left)
   145                          ; -----------------------------------------------------------------------------
   146                          ; Inputs:
   147                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   148                          ; -----------------------------------------------------------------------------
   149                          lcdImageVflip:
   150                          
   151  ed0e a520                       lda BITMAP_ADDR_H
   152  ed10 18                         clc
   153  ed11 6903                       adc #3
   154  ed13 851f                       sta PIX_ADDR + 1
   155  ed15 a2f0                       ldx #240
   156  ed17 861e                       stx PIX_ADDR
   157  ed19 a200                       ldx #0
   158                          
   159                          .imageLoopV:
   160                          
   161                                  ; x in the range 0-63
   162                          
   163                                  ; set y address
   164  ed1b 20aeed                     jsr lcdWait
   165  ed1e 8a                         txa
   166  ed1f 291f                       and #$1f  ; only want 0-31
   167  ed21 0980                       ora #LCD_CMD_EXT_GRAPHICS_ADDR
   168  ed23 8d027f                     sta LCD_CMD
   169                          
   170                                  ; set x address - either 0 or 8
   171  ed26 20aeed                     jsr lcdWait
   172  ed29 8a                         txa
   173  ed2a 2920                       and #$20
   174  ed2c 4a                         lsr
   175  ed2d 4a                         lsr
   176  ed2e 0980                       ora #LCD_CMD_EXT_GRAPHICS_ADDR
   177  ed30 8d027f                     sta LCD_CMD
   178                          
   179                          
   180  ed33 a000                       ldy #0
   181                          .imgRowLoopV
   182  ed35 20aeed                     jsr lcdWait
   183                                  
   184  ed38 b11e                       lda (PIX_ADDR), y
   185  ed3a 8d037f                     sta LCD_DATA
   186                                  
   187  ed3d c8                         iny
   188  ed3e c010                       cpy #16
   189  ed40 d0f3                       bne .imgRowLoopV
   190                                  
   191  ed42 a51e                       lda PIX_ADDR
   192  ed44 38                         sec
   193  ed45 e910                       sbc #16
   194  ed47 b004                       bcs +
   195  ed49 a9f0                       lda #240
   196  ed4b c61f                       dec PIX_ADDR + 1
   197                          +
   198  ed4d 851e                       sta PIX_ADDR
   199                          
   200  ed4f e8                         inx
   201  ed50 e040                       cpx #64
   202  ed52 d0c7                       bne .imageLoopV
   203                          
   204  ed54 60                         rts

; ******** Source: ../lib\lcd\lcd.asm
   117                          
   118                          } else {
   119                                  !error "Unknown LCD_MODEL. Must be one of: 1602, 2004 or 12864"
   120                          }}}
   121                          
   122                          
   123                          LCD_INITIALIZE  = LCD_CMD_FUNCTIONSET | LCD_CMD_8BITMODE | LCD_CMD_2LINE
   124                          DISPLAY_MODE    = LCD_CMD_DISPLAY | LCD_CMD_DISPLAY_ON
   125                          
   126                          ASCII_NEWLINE = 10
   127                          
   128                          ; -----------------------------------------------------------------------------
   129                          ; lcdInit: Initialise the LCD
   130                          ; -----------------------------------------------------------------------------
   131                          lcdInit:
   132  ed55 20aeed                     jsr lcdWait
   133  ed58 a938                       lda #LCD_INITIALIZE
   134  ed5a 8d027f                     sta LCD_CMD
   135  ed5d 2067ed                     jsr lcdClear
   136  ed60 2070ed                     jsr lcdHome
   137  ed63 2082ed                     jsr lcdDisplayOff
   138  ed66 60                         rts
   139                          
   140                          
   141                          ; -----------------------------------------------------------------------------
   142                          ; lcdClear: Clears the LCD
   143                          ; -----------------------------------------------------------------------------
   144                          lcdClear:
   145  ed67 20aeed                     jsr lcdWait
   146  ed6a a901                       lda #LCD_CMD_CLEAR
   147  ed6c 8d027f                     sta LCD_CMD
   148  ed6f 60                         rts     
   149                          
   150                          ; -----------------------------------------------------------------------------
   151                          ; lcdHome: Return to the start address
   152                          ; -----------------------------------------------------------------------------
   153                          lcdHome:
   154  ed70 20aeed                     jsr lcdWait
   155  ed73 a902                       lda #LCD_CMD_HOME
   156  ed75 8d027f                     sta LCD_CMD
   157  ed78 60                         rts     
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; lcdDisplayOn: Turn the display on
   161                          ; -----------------------------------------------------------------------------
   162                          lcdDisplayOn:
   163  ed79 20aeed                     jsr lcdWait
   164  ed7c a90c                       lda #DISPLAY_MODE
   165  ed7e 8d027f                     sta LCD_CMD
   166  ed81 60                         rts
   167                          
   168                          ; -----------------------------------------------------------------------------
   169                          ; lcdDisplayOff: Turn the display off
   170                          ; -----------------------------------------------------------------------------
   171                          lcdDisplayOff:
   172  ed82 20aeed                     jsr lcdWait
   173  ed85 a908                       lda #LCD_CMD_DISPLAY
   174  ed87 8d027f                     sta LCD_CMD
   175  ed8a 60                         rts
   176                          
   177                          ; -----------------------------------------------------------------------------
   178                          ; lcdCursorOn: Show cursor
   179                          ; -----------------------------------------------------------------------------
   180                          lcdCursorOn:
   181  ed8b 20aeed                     jsr lcdWait
   182  ed8e a90e                       lda #DISPLAY_MODE | LCD_CMD_DISPLAY_CURSOR
   183  ed90 8d027f                     sta LCD_CMD
   184  ed93 60                         rts     
   185                          
   186                          ; -----------------------------------------------------------------------------
   187                          ; lcdCursorOff: Hide cursor
   188                          ; -----------------------------------------------------------------------------
   189                          lcdCursorOff:
   190  ed94 20aeed                     jsr lcdWait
   191  ed97 a90c                       lda #DISPLAY_MODE
   192  ed99 8d027f                     sta LCD_CMD
   193  ed9c 60                         rts     
   194                          
   195                          ; -----------------------------------------------------------------------------
   196                          ; lcdCursorBlinkOn: Show cursor
   197                          ; -----------------------------------------------------------------------------
   198                          lcdCursorBlinkOn:
   199  ed9d 20aeed                     jsr lcdWait
   200  eda0 a90f                       lda #DISPLAY_MODE | LCD_CMD_DISPLAY_CURSOR | LCD_CMD_DISPLAY_CURSOR_BLINK
   201  eda2 8d027f                     sta LCD_CMD
   202  eda5 60                         rts     
   203                          
   204                          ; -----------------------------------------------------------------------------
   205                          ; lcdDetect: Do we have an LCD plugged in?
   206                          ; -----------------------------------------------------------------------------
   207                          ; Outputs:
   208                          ;  C: 1 if exists. 0 if not
   209                          ; -----------------------------------------------------------------------------
   210                          lcdDetect:
   211  eda6 18                         clc
   212  eda7 ad027f                     lda LCD_CMD
   213  edaa d001                       bne +
   214  edac 38                         sec
   215                          +
   216  edad 60                         rts
   217                          
   218                          
   219                          ; -----------------------------------------------------------------------------
   220                          ; lcdWait: Wait until the LCD is no longer busy
   221                          ; -----------------------------------------------------------------------------
   222                          ; Outputs:
   223                          ;  A: Current LCD address
   224                          ; -----------------------------------------------------------------------------
   225                          lcdWait:
   226  edae ad027f                     lda LCD_CMD
   227  edb1 30fb                       bmi lcdWait  ; branch if bit 7 is set
   228  edb3 60                         rts
   229                          
   230                          ; -----------------------------------------------------------------------------
   231                          ; lcdWaitPreserve: Wait until the LCD is no longer busy Preserves A, address in x
   232                          ; -----------------------------------------------------------------------------
   233                          lcdWaitPreserve:
   234  edb4 ac027f                     ldy LCD_CMD
   235  edb7 30fb                       bmi lcdWaitPreserve; branch if bit 7 is set
   236  edb9 60                         rts
   237                          
   238                          ; -----------------------------------------------------------------------------
   239                          ; lcdRead: Read a character from the LCD
   240                          ; -----------------------------------------------------------------------------
   241                          ; Outputs:
   242                          ;  A: Character read
   243                          ; -----------------------------------------------------------------------------
   244                          lcdRead:
   245  edba 20aeed                     jsr lcdWait
   246  edbd ad037f                     lda LCD_DATA
   247  edc0 60                         rts
   248                          
   249                          ; -----------------------------------------------------------------------------
   250                          ; lcdPrint: Print a null-terminated string
   251                          ; -----------------------------------------------------------------------------
   252                          ; Inputs:
   253                          ;  STR_ADDR: Contains address of null-terminated string
   254                          ; -----------------------------------------------------------------------------
   255                          lcdPrint:
   256  edc1 a000                       ldy #0
   257                          -
   258  edc3 20aeed                     jsr lcdWait
   259  edc6 b134                       lda (STR_ADDR), y
   260  edc8 f012                       beq ++
   261  edca c90a                       cmp #ASCII_NEWLINE ; check for newline
   262  edcc d007                       bne +
   263  edce 209fef                     jsr lcdNextLine
   264  edd1 c8                         iny
   265  edd2 4cc3ed                     jmp -
   266                          + 
   267  edd5 8d037f                     sta LCD_DATA
   268  edd8 c8                         iny
   269  edd9 4cc3ed                     jmp -
   270                          ++
   271  eddc 60                         rts
   272                          
   273                          ; -----------------------------------------------------------------------------
   274                          ; lcdChar: Output a character
   275                          ; -----------------------------------------------------------------------------
   276                          ; Inputs:
   277                          ;  A: The character to output
   278                          ; -----------------------------------------------------------------------------
   279                          lcdChar:
   280  eddd 20b4ed                     jsr lcdWaitPreserve
   281  ede0 8d037f                     sta LCD_DATA
   282  ede3 60                         rts
   283                          
   284                          ; -----------------------------------------------------------------------------
   285                          ; lcdCharScroll: Output a character, scroll if required
   286                          ; -----------------------------------------------------------------------------
   287                          ; Inputs:
   288                          ;  A: The character to output
   289                          ; -----------------------------------------------------------------------------
   290                          lcdCharScroll:
   291  ede4 20b4ed                     jsr lcdWaitPreserve
   292  ede7 8d037f                     sta LCD_DATA
   293                          
   294                                  ; Y is previous address
   295  edea 20b6ee                     jsr lcdCurrentLine
   296  eded 8528                       sta LCD_TMP1
   297  edef 20b4ed                     jsr lcdWaitPreserve
   298  edf2 20b6ee                     jsr lcdCurrentLine
   299  edf5 4528                       eor LCD_TMP1
   300  edf7 f007                       beq +
   301  edf9 e628                       inc LCD_TMP1
   302  edfb a528                       lda LCD_TMP1
   303  edfd 4c50ef                     jmp lcdGotoLine
   304                          +
   305  ee00 60                         rts
   306                          
   307                          ; -----------------------------------------------------------------------------
   308                          ; lcdBackspace: Backspace a character
   309                          ; -----------------------------------------------------------------------------
   310                          lcdBackspace:
   311  ee01 20b4ed                     jsr lcdWaitPreserve
   312                                  ; Y is previous address
   313  ee04 20b6ee                     jsr lcdCurrentLine
   314  ee07 8528                       sta LCD_TMP1
   315                          
   316  ee09 a910                       lda #LCD_CMD_SHIFT | LCD_CMD_SHIFT_LEFT
   317  ee0b 8d027f                     sta LCD_CMD
   318  ee0e 20aeed                     jsr lcdWait
   319  ee11 20b4ed                     jsr lcdWaitPreserve
   320  ee14 20b6ee                     jsr lcdCurrentLine
   321  ee17 4528                       eor LCD_TMP1
   322  ee19 f009                       beq +
   323  ee1b c628                       dec LCD_TMP1
   324  ee1d 3005                       bmi +
   325  ee1f a528                       lda LCD_TMP1
   326  ee21 4cb9ee                     jmp lcdGotoLineEnd
   327                          +
   328  ee24 20aeed                     jsr lcdWait
   329  ee27 a920                       lda #' '
   330  ee29 8d037f                     sta LCD_DATA
   331  ee2c 20aeed                     jsr lcdWait
   332  ee2f a910                       lda #LCD_CMD_SHIFT | LCD_CMD_SHIFT_LEFT
   333  ee31 8d027f                     sta LCD_CMD
   334                          
   335  ee34 60                         rts
   336                          
   337                          ; -----------------------------------------------------------------------------
   338                          ; lcdInt8: Output an 8-bit integer
   339                          ; -----------------------------------------------------------------------------
   340                          ; Inputs:
   341                          ;  A: The value to output
   342                          ; -----------------------------------------------------------------------------
   343                          lcdInt8:
   344                          
   345                          .B = LCD_TMP1
   346                          .C = LCD_TMP2
   347                          
   348  ee35 48                         pha
   349  ee36 a201                       ldx #1
   350  ee38 8629                       stx .C
   351  ee3a e8                         inx
   352  ee3b a040                       ldy #$40
   353                          --
   354  ee3d 8428                       sty .B
   355  ee3f 4a                         lsr
   356                          -
   357  ee40 2a                         rol
   358  ee41 b005                       bcs +
   359  ee43 dd68ee                     cmp .A, x
   360  ee46 9004                       bcc ++
   361                          + 
   362  ee48 fd68ee                     sbc .A, x
   363  ee4b 38                         sec
   364                          ++ 
   365  ee4c 2628                       rol .B
   366  ee4e 90f0                       bcc -
   367  ee50 a8                         tay
   368  ee51 e429                       cpx .C
   369  ee53 a528                       lda .B
   370  ee55 9004                       bcc +
   371  ee57 f007                       beq ++
   372  ee59 8629                       stx .C
   373                          +
   374  ee5b 4930                       eor #$30
   375  ee5d 20dded                     jsr lcdChar
   376                          ++
   377  ee60 98                         tya
   378  ee61 a010                       ldy #$10
   379  ee63 ca                         dex
   380  ee64 10d7                       bpl --
   381  ee66 68                         pla
   382  ee67 60                         rts
   383                          
   384  ee68 80a0c8             .A !byte 128,160,200
   385                          
   386                          
   387                          ; -----------------------------------------------------------------------------
   388                          ; lcdHex8: Output an 8-bit byte as hexadecimal
   389                          ; -----------------------------------------------------------------------------
   390                          ; Inputs:
   391                          ;  A: The value to output
   392                          ; -----------------------------------------------------------------------------
   393                          lcdHex8:
   394  ee6b 48                         pha
   395  ee6c 4a                         lsr
   396  ee6d 4a                         lsr
   397  ee6e 4a                         lsr
   398  ee6f 4a                         lsr
   399  ee70 aa                         tax
   400  ee71 bd84ee                     lda .H, x
   401  ee74 20dded                     jsr lcdChar
   402  ee77 68                         pla
   403  ee78 48                         pha
   404  ee79 290f                       and #$0f
   405  ee7b aa                         tax
   406  ee7c bd84ee                     lda .H, x
   407  ee7f 20dded                     jsr lcdChar
   408  ee82 68                         pla
   409  ee83 60                         rts
   410                          
   411  ee84 3031323334353637....H !text "0123456789abcdef"
   412                          
   413                          
   414                          !if LCD_ROWS > 2 {
   415                          
   416                          lcdCurrentLine4:
   417  ee94 c018                       cpy #LCD_ADDR_LINE4
   418  ee96 b00e                       bcs .lcdLine4
   419  ee98 c010                       cpy #LCD_ADDR_LINE2
   420  ee9a b017                       bcs .lcdLine2
   421  ee9c c008                       cpy #LCD_ADDR_LINE3
   422  ee9e b003                       bcs .lcdLine3
   423  eea0 4cb0ee                     jmp .lcdLine1
   424                          
   425                          .lcdLine3
   426  eea3 a903                       lda #3
   427  eea5 60                         rts
   428                          
   429                          .lcdLine4
   430  eea6 a904                       lda #4
   431  eea8 60                         rts
   432                          
   433                          } ; LCD_ROWS > 2
   434                          
   435                          lcdCurrentLine2:
   436  eea9 c010                       cpy #LCD_ADDR_LINE1+LCD_COLUMNS;16;LCD_ADDR_LINE2
   437  eeab 9003                       bcc .lcdLine1
   438  eead 4cb3ee                     jmp .lcdLine2
   439                          
   440                          .lcdLine1
   441  eeb0 a901                       lda #1
   442  eeb2 60                         rts
   443                          
   444                          .lcdLine2
   445  eeb3 a902                       lda #2
   446  eeb5 60                         rts
   447                          
   448                          ; -----------------------------------------------------------------------------
   449                          ; lcdCurrentLine: Return the current line/row
   450                          ; -----------------------------------------------------------------------------
   451                          lcdCurrentLine:
   452                          !if LCD_ROWS > 2 {
   453  eeb6 4c94ee                     jmp lcdCurrentLine4
   454                          } else {
   455                                  jmp lcdCurrentLine2
   456                          }
   457                          
   458                          
   459                          
   460                          ; -----------------------------------------------------------------------------
   461                          ; lcdGotoLineEnd: Go to end of line in 'A'
   462                          ; -----------------------------------------------------------------------------
   463                          lcdGotoLineEnd:
   464                          !if LCD_ROWS > 2 {
   465  eeb9 c904                       cmp #4
   466  eebb f071                       beq lcdLineFourEnd
   467  eebd c903                       cmp #3
   468  eebf f04b                       beq lcdLineThreeEnd
   469                          }
   470  eec1 c902                       cmp #2
   471  eec3 f025                       beq lcdLineTwoEnd
   472  eec5 4cc8ee                     jmp lcdLineOneEnd
   473                          
   474                          
   475                          ; -----------------------------------------------------------------------------
   476                          ; lcdLineOneEnd: Move cursor to end of line 1
   477                          ; -----------------------------------------------------------------------------
   478                          lcdLineOneEnd:
   479  eec8 48                         pha
   480                          !if LCD_MODEL = 12864 {
   481  eec9 a987                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS/2) - 1
   482  eecb 8d027f                     sta LCD_CMD
   483  eece 20baed                     jsr lcdRead
   484  eed1 48                         pha
   485  eed2 a987                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS/2) - 1
   486  eed4 8d027f                     sta LCD_CMD
   487  eed7 a920                       lda #' '
   488  eed9 20dded                     jsr lcdChar
   489  eedc 20dded                     jsr lcdChar
   490  eedf a987                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS/2) - 1
   491  eee1 8d027f                     sta LCD_CMD
   492  eee4 68                         pla
   493  eee5 20dded                     jsr lcdChar
   494                          } else {
   495                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS) - 2
   496                                  sta LCD_CMD
   497                                  jsr lcdRead
   498                                  pha
   499                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS) - 2
   500                                  sta LCD_CMD
   501                                  lda #' '
   502                                  jsr lcdChar
   503                                  jsr lcdChar
   504                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS) - 2
   505                                  sta LCD_CMD
   506                                  pla
   507                                  jsr lcdChar
   508                          }
   509  eee8 68                         pla
   510  eee9 60                         rts
   511                          
   512                          ; -----------------------------------------------------------------------------
   513                          ; lcdLineTwoEnd: Move cursor to end of line 2
   514                          ; -----------------------------------------------------------------------------
   515                          lcdLineTwoEnd:
   516  eeea 48                         pha
   517                          !if LCD_MODEL = 12864 {
   518  eeeb a997                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS/2) - 1
   519  eeed 8d027f                     sta LCD_CMD
   520  eef0 20baed                     jsr lcdRead
   521  eef3 48                         pha
   522  eef4 a997                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS/2) - 1
   523  eef6 8d027f                     sta LCD_CMD
   524  eef9 a920                       lda #' '
   525  eefb 20dded                     jsr lcdChar
   526  eefe 20dded                     jsr lcdChar
   527  ef01 a997                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS/2) - 1
   528  ef03 8d027f                     sta LCD_CMD
   529  ef06 68                         pla
   530  ef07 20dded                     jsr lcdChar
   531                          } else {
   532                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS) - 2
   533                                  sta LCD_CMD
   534                                  jsr lcdRead
   535                                  pha
   536                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS) - 2
   537                                  sta LCD_CMD
   538                                  lda #' '
   539                                  jsr lcdChar
   540                                  jsr lcdChar
   541                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS) - 2
   542                                  sta LCD_CMD
   543                                  pla
   544                                  jsr lcdChar
   545                          }
   546  ef0a 68                         pla
   547  ef0b 60                         rts
   548                          
   549                          
   550                           !if LCD_ROWS > 2 {
   551                          ; -----------------------------------------------------------------------------
   552                          ; lcdLineThreeEnd: Move cursor to end of line 3
   553                          ; -----------------------------------------------------------------------------
   554                          lcdLineThreeEnd:
   555  ef0c 48                         pha
   556                          !if LCD_MODEL = 12864 {
   557  ef0d a98f                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS/2) - 1
   558  ef0f 8d027f                     sta LCD_CMD
   559  ef12 20baed                     jsr lcdRead
   560  ef15 48                         pha
   561  ef16 a98f                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS/2) - 1
   562  ef18 8d027f                     sta LCD_CMD
   563  ef1b a920                       lda #' '
   564  ef1d 20dded                     jsr lcdChar
   565  ef20 20dded                     jsr lcdChar
   566  ef23 a98f                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS/2) - 1
   567  ef25 8d027f                     sta LCD_CMD
   568  ef28 68                         pla
   569  ef29 20dded                     jsr lcdChar
   570                          } else {
   571                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS) - 2
   572                                  sta LCD_CMD
   573                                  jsr lcdRead
   574                                  pha
   575                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS) - 2
   576                                  sta LCD_CMD
   577                                  lda #' '
   578                                  jsr lcdChar
   579                                  jsr lcdChar
   580                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS) - 2
   581                                  sta LCD_CMD
   582                                  pla
   583                                  jsr lcdChar
   584                          }
   585  ef2c 68                         pla
   586  ef2d 60                         rts
   587                          
   588                          ; -----------------------------------------------------------------------------
   589                          ; lcdLineFourEnd: Move cursor to end of line 4
   590                          ; -----------------------------------------------------------------------------
   591                          lcdLineFourEnd:
   592  ef2e 48                         pha
   593                          !if LCD_MODEL = 12864 {
   594  ef2f a99f                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS/2) - 1
   595  ef31 8d027f                     sta LCD_CMD
   596  ef34 20baed                     jsr lcdRead
   597  ef37 48                         pha
   598  ef38 a99f                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS/2) - 1
   599  ef3a 8d027f                     sta LCD_CMD
   600  ef3d a920                       lda #' '
   601  ef3f 20dded                     jsr lcdChar
   602  ef42 20dded                     jsr lcdChar
   603  ef45 a99f                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS/2) - 1
   604  ef47 8d027f                     sta LCD_CMD
   605  ef4a 68                         pla
   606  ef4b 20dded                     jsr lcdChar
   607                          } else {
   608                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS) - 2
   609                                  sta LCD_CMD
   610                                  jsr lcdRead
   611                                  pha
   612                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS) - 2
   613                                  sta LCD_CMD
   614                                  lda #' '
   615                                  jsr lcdChar
   616                                  jsr lcdChar
   617                                  lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS) - 2
   618                                  sta LCD_CMD
   619                                  pla
   620                                  jsr lcdChar
   621                          }
   622  ef4e 68                         pla
   623  ef4f 60                         rts
   624                          
   625                          
   626                          } ; LCD_ROWS > 2
   627                          
   628                          ; -----------------------------------------------------------------------------
   629                          ; lcdGotoLine: Go to line in 'A'
   630                          ; -----------------------------------------------------------------------------
   631                          lcdGotoLine:
   632                          !if LCD_ROWS > 2 {
   633  ef50 c904                       cmp #4
   634  ef52 f027                       beq lcdLineFour
   635  ef54 c903                       cmp #3
   636  ef56 f01b                       beq lcdLineThree
   637                          }
   638  ef58 c902                       cmp #2
   639  ef5a f00f                       beq lcdLineTwo
   640  ef5c c901                       cmp #1
   641  ef5e f003                       beq lcdLineOne
   642  ef60 4cb3ef                     jmp lcdScrollUp
   643                          
   644                          
   645                          ; -----------------------------------------------------------------------------
   646                          ; lcdLineOne: Move cursor to line 1
   647                          ; -----------------------------------------------------------------------------
   648                          lcdLineOne:
   649  ef63 48                         pha
   650  ef64 a980                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1)
   651  ef66 8d027f                     sta LCD_CMD
   652  ef69 68                         pla
   653  ef6a 60                         rts
   654                          
   655                          ; -----------------------------------------------------------------------------
   656                          ; lcdLineTwo: Move cursor to line 2
   657                          ; -----------------------------------------------------------------------------
   658                          lcdLineTwo:
   659  ef6b 48                         pha
   660  ef6c a990                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2)
   661  ef6e 8d027f                     sta LCD_CMD
   662  ef71 68                         pla
   663  ef72 60                         rts
   664                          
   665                          
   666                           !if LCD_ROWS > 2 {
   667                          ; -----------------------------------------------------------------------------
   668                          ; lcdLineThree: Move cursor to line 3
   669                          ; -----------------------------------------------------------------------------
   670                          lcdLineThree:
   671  ef73 48                         pha
   672  ef74 a988                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3)
   673  ef76 8d027f                     sta LCD_CMD
   674  ef79 68                         pla
   675  ef7a 60                         rts
   676                          
   677                          ; -----------------------------------------------------------------------------
   678                          ; lcdLineFour: Move cursor to line 4
   679                          ; -----------------------------------------------------------------------------
   680                          lcdLineFour:
   681  ef7b 48                         pha
   682  ef7c a998                       lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4)
   683  ef7e 8d027f                     sta LCD_CMD
   684  ef81 68                         pla
   685  ef82 60                         rts
   686                           
   687                          ; -----------------------------------------------------------------------------
   688                          ; lcdNextLine4: Move cursor to next line (4-row LCD version)
   689                          ; -----------------------------------------------------------------------------
   690                          lcdNextLine4:
   691  ef83 20aeed                     jsr lcdWait
   692                                  ; A now contains address
   693  ef86 c918                       cmp #LCD_ADDR_LINE4
   694  ef88 b029                       bcs lcdScrollUp
   695  ef8a c910                       cmp #LCD_ADDR_LINE2
   696  ef8c b0e5                       bcs lcdLineThree
   697  ef8e c908                       cmp #LCD_ADDR_LINE3
   698  ef90 b0e9                       bcs lcdLineFour
   699                                  
   700  ef92 4c6bef                     jmp lcdLineTwo
   701                           }
   702                           
   703                          
   704                          ; -----------------------------------------------------------------------------
   705                          ; lcdNextLine2: Move cursor to next line (2-row LCD version)
   706                          ; -----------------------------------------------------------------------------
   707                          lcdNextLine2:
   708  ef95 20aeed                     jsr lcdWait
   709                                  ; A now contains address
   710  ef98 c910                       cmp #LCD_ADDR_LINE2
   711  ef9a b017                       bcs lcdScrollUp
   712  ef9c 4c6bef                     jmp lcdLineTwo
   713                          
   714                          ; -----------------------------------------------------------------------------
   715                          ; lcdNextLine: Move cursor to next line
   716                          ; -----------------------------------------------------------------------------
   717                          lcdNextLine:
   718                          !if LCD_ROWS > 2 {
   719  ef9f 4c83ef                     jmp lcdNextLine4
   720                          } else {
   721                                  jmp lcdNextLine2
   722                          }
   723                          
   724                          ; -----------------------------------------------------------------------------
   725                          ; lcdReadLine: Reads a line from the display
   726                          ; -----------------------------------------------------------------------------
   727                          ; Inputs:
   728                          ;  STR_ADDR: Contains address to output null-terminated line to
   729                          ; -----------------------------------------------------------------------------
   730                          lcdReadLine:
   731  efa2 a000                       ldy #0
   732                          -
   733  efa4 20baed                     jsr lcdRead
   734  efa7 9134                       sta (STR_ADDR), y
   735  efa9 c8                         iny
   736  efaa c010                       cpy #LCD_COLUMNS
   737  efac d0f6                       bne -
   738  efae a900                       lda #0
   739  efb0 9134                       sta (STR_ADDR), y
   740  efb2 60                         rts
   741                          
   742                          ; -----------------------------------------------------------------------------
   743                          ; lcdScrollUp: Scroll the LCD up one line
   744                          ; -----------------------------------------------------------------------------
   745                          lcdScrollUp:
   746  efb3 48                         pha
   747                          
   748  efb4 2094ed                     jsr lcdCursorOff
   749                          
   750  efb7 a958                       lda #<.LCD_BUFFER_ADDR
   751  efb9 8534                       sta STR_ADDR_L
   752  efbb a97b                       lda #>.LCD_BUFFER_ADDR
   753  efbd 8535                       sta STR_ADDR_H
   754                          
   755  efbf 20aeed                     jsr lcdWait
   756  efc2 206bef                     jsr lcdLineTwo
   757  efc5 20a2ef                     jsr lcdReadLine
   758  efc8 20aeed                     jsr lcdWait
   759  efcb 2063ef                     jsr lcdLineOne
   760  efce 20c1ed                     jsr lcdPrint
   761  efd1 20aeed                     jsr lcdWait
   762                          
   763                          !if LCD_ROWS > 2 {
   764                          
   765  efd4 2073ef                     jsr lcdLineThree
   766  efd7 20a2ef                     jsr lcdReadLine
   767  efda 20aeed                     jsr lcdWait
   768  efdd 206bef                     jsr lcdLineTwo
   769  efe0 20c1ed                     jsr lcdPrint
   770                                  
   771  efe3 20aeed                     jsr lcdWait
   772  efe6 207bef                     jsr lcdLineFour
   773  efe9 20a2ef                     jsr lcdReadLine
   774  efec 20aeed                     jsr lcdWait
   775  efef 2073ef                     jsr lcdLineThree
   776  eff2 20c1ed                     jsr lcdPrint
   777                                  
   778  eff5 20aeed                     jsr lcdWait
   779  eff8 207bef                     jsr lcdLineFour
   780                          } else {
   781                                  jsr lcdLineTwo
   782                          }
   783                          
   784  effb a210                       ldx #LCD_COLUMNS
   785                          -
   786  effd 48a92020dded68             +lcdChar ' '
   787  f004 ca                         dex
   788  f005 d0f6                       bne -
   789  f007 20aeed                     jsr lcdWait
   790                          !if LCD_ROWS > 2 {
   791  f00a 207bef                     jsr lcdLineFour
   792                          } else {
   793                                  jsr lcdLineTwo
   794                          }
   795                          
   796  f00d 209ded                     jsr lcdCursorBlinkOn
   797                          
   798  f010 68                         pla
   799  f011 60                         rts
   800                          
   801                          ; -----------------------------------------------------------------------------
   802                          ; lcdConsoleOut: Print a null-terminated string
   803                          ; -----------------------------------------------------------------------------
   804                          ; Inputs:
   805                          ;  'A': Character to output to console
   806                          ; -----------------------------------------------------------------------------
   807                          lcdConsoleOut:
   808  f012 8c807b                     sty .LCD_REGY_TMP
   809  f015 c90a                       cmp #ASCII_RETURN
   810  f017 f013                       beq .newline
   811  f019 c908                       cmp #ASCII_BACKSPACE
   812  f01b f015                       beq .backspace
   813  f01d c90d                       cmp #ASCII_CR   ; omit these
   814  f01f f007                       beq .endOut
   815  f021 c900                       cmp #0
   816  f023 f003                       beq .endOut
   817                          
   818                                  ; regular character
   819  f025 20e4ed                     jsr lcdCharScroll ; outputs A to the LCD - auto-scrolls too :)
   820                          
   821                          .endOut:
   822  f028 ac807b                     ldy .LCD_REGY_TMP
   823  f02b 60                         rts
   824                          
   825                          .newline
   826  f02c 209fef                     jsr lcdNextLine ; scroll to the next line... scroll screen if on last line
   827  f02f 4c28f0                     jmp .endOut
   828                          
   829                          .backspace
   830  f032 2001ee                     jsr lcdBackspace 
   831  f035 4c28f0                     jmp .endOut
   832                          
   833                          ; -----------------------------------------------------------------------------
   834                          ; lcdConsolePrint: Print a null-terminated string (console mode)
   835                          ; -----------------------------------------------------------------------------
   836                          ; Inputs:
   837                          ;  STR_ADDR: Contains address of null-terminated string
   838                          ; -----------------------------------------------------------------------------
   839                          lcdConsolePrint:
   840  f038 a000                       ldy #0
   841                          -
   842  f03a b134                       lda (STR_ADDR), y
   843  f03c f006                       beq +
   844  f03e 2012f0                     jsr lcdConsoleOut
   845  f041 c8                         iny
   846  f042 d0f6                       bne -
   847                          +
   848  f044 60                         rts
   849                          

; ******** Source: kernel.asm
   168                          

; ******** Source: ../lib\gfx\tilemap.asm
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          ; Tilemap structure
    11                          ; ---------------------
    12                          ; BufferAddressH   (Page-aligned buffer - MSB)
    13                          ; Size
    14                          ; TilesetAddressH  (Page-aligned tilset - MSB)
    15                          ; InvertAddressH   (Page-aligned invert flags - MSB) (optional)
    16                          ; DirtyAddressH    (Page-aligned dirty flags - MSB)  (optional)
    17                          

; ******** Source: ../lib\gfx\tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                                  !if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                                  !if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                                  !if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                                  !if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                                  !if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                                  !if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                                  !if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                                  !if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                                  !if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                                  lda #<.tilemapStructAddr
    25                                  sta TILEMAP_ADDR
    26                                  lda #>.tilemapStructAddr
    27                                  sta TILEMAP_ADDR + 1
    28                          
    29                                  lda #>.bufferAddr
    30                                  sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                                  lda #.sizeFlags
    32                                  sta .tilemapStructAddr + TILEMAP_SIZE
    33                                  lda #>.tilesetAddr
    34                                  sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                                  lda #>.invertAddr
    36                                  sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                                  lda #>.dirtyAddr
    38                                  sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                                  lda #.tileSizePx
    40                                  sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                                  jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                                  +tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                                  lda #<.tilemapStructAddr
    51                                  sta TILEMAP_ADDR
    52                                  lda #>.tilemapStructAddr
    53                                  sta TILEMAP_ADDR + 1
    54                          
    55                                  jsr tilemapSetActive

; ******** Source: ../lib\gfx\tilemap.asm
    19                          
    20                          HAVE_TILEMAP = 1
    21                          
    22                          
    23                          !ifndef TILEMAP_ZP_START { TILEMAP_ZP_START = $20
    24                                  !warn "TILEMAP_ZP_START not provided. Defaulting to ", TILEMAP_ZP_START
    25                          }
    26                          
    27                          !ifndef TILEMAP_RAM_START { TILEMAP_RAM_START = $7a00
    28                                  !warn "TILEMAP_RAM_START not provided. Defaulting to ", TILEMAP_RAM_START
    29                          }
    30                          
    31                          !if (TILEMAP_RAM_START & $ff) != 0 {
    32                                  !error "TILEMAP_RAM_START must be on a page boundary"
    33                          }
    34                          
    35                          ; -------------------------
    36                          ; Tilemap structure
    37                          ; -------------------------
    38                          TILEMAP_BUFFER_ADDR     = 0                             ; High byte of page-aligned buffer
    39                          TILEMAP_SIZE            = 1     ; Size flags
    40                          TILEMAP_TILES_ADDR      = 2
    41                          TILEMAP_INVERT_ADDR     = 3     ; High byte of tilemap
    42                          TILEMAP_DIRTY_ADDR      = 4
    43                          TILEMAP_WIDTH_TILES     = 5
    44                          TILEMAP_HEIGHT_TILES    = 6
    45                          TILEMAP_TILE_SIZE_PX    = 7
    46                          TILEMAP_STRUCTURE_SIZE  = TILEMAP_TILE_SIZE_PX
    47                          
    48                          
    49                          ; -------------------------
    50                          ; Zero page
    51                          ; -------------------------
    52                          TILEMAP_ADDR            = TILEMAP_ZP_START
    53                          TILEMAP_TMP_BUFFER_ADDR = TILEMAP_ZP_START + 2
    54                          TILEMAP_TMP_TILES_ADDR  = TILEMAP_ZP_START + 4
    55                          TILEMAP_ZP_SIZE         = 6
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; High RAM
    59                          ; -----------------------------------------------------------------------------
    60                          TILEMAP_DEFAULT_BUFFER_ADDRESS = TILEMAP_RAM_START
    61                          
    62                          TILEMAP_TMP_BUF_ROW     = TILEMAP_RAM_START + $80
    63                          TILEMAP_TMP_BUF_COL     = TILEMAP_RAM_START + $81
    64                          TILEMAP_TMP_TILE_ROW    = TILEMAP_RAM_START + $82
    65                          TILEMAP_TMP_OUTPUT_ROW  = TILEMAP_RAM_START + $83
    66                          TILEMAP_TMP_1           = TILEMAP_RAM_START + $84
    67                          TILEMAP_TMP_2           = TILEMAP_RAM_START + $85
    68                          TILEMAP_TMP_TILES_W     = TILEMAP_RAM_START + $86
    69                          TILEMAP_TMP_TILES_H     = TILEMAP_RAM_START + $87
    70                          TILEMAP_TMP_TILE_SIZE   = TILEMAP_RAM_START + $88
    71                          
    72                          TILEMAP_FIXED_ADDRESS   = TILEMAP_RAM_START + $100
    73                          
    74                          TILEMAP_RAM_SIZE        = (TILEMAP_FIXED_ADDRESS + TILEMAP_STRUCTURE_SIZE) - TILEMAP_RAM_START
    75                          
    76                          
    77                          
    78                          !if TILEMAP_ZP_END < (TILEMAP_ZP_START + TILEMAP_ZP_SIZE) {
    79                                  !error "TILEMAP_ZP requires ",TILEMAP_ZP_SIZE," bytes. Allocated ",TILEMAP_ZP_END - TILEMAP_ZP_START
    80                          }
    81                          
    82                          !if TILEMAP_RAM_END < (TILEMAP_RAM_START + TILEMAP_RAM_SIZE) {
    83                                  !error "TILEMAP_RAM requires ",TILEMAP_RAM_SIZE," bytes. Allocated ",TILEMAP_RAM_END - TILEMAP_RAM_START
    84                          }
    85                          
    86                          ; -------------------------
    87                          ; Contants
    88                          ; -------------------------
    89                          TILEMAP_SIZE_X_16       = %00000000
    90                          TILEMAP_SIZE_X_32       = %00000001
    91                          TILEMAP_SIZE_X_64       = %00000010
    92                          TILEMAP_SIZE_Y_8        = %00000000
    93                          TILEMAP_SIZE_Y_16       = %00000100
    94                          TILEMAP_SIZE_Y_32       = %00001000
    95                          
    96                          TILE_SIZE               = 8     ; size of each tile (in px)
    97                          
    98                          
    99                          
   100                          
   101                          ; -----------------------------------------------------------------------------
   102                          ; tilemapInit: Initialise a tilemap
   103                          ; -----------------------------------------------------------------------------
   104                          ; Inputs:
   105                          ;  TILEMAP_ADDR: Address of tilemap structure
   106                          ; -----------------------------------------------------------------------------
   107                          tilemapInit:
   108  f045 a000                       ldy #0
   109  f047 8432                       sty MEM_LEN
   110  f049 8433                       sty MEM_LEN + 1
   111  f04b 842e                       sty MEM_DST
   112  f04d b118                       lda (TILEMAP_ADDR), y  ; buffer address H
   113  f04f 852f                       sta MEM_DST + 1
   114  f051 851b                       sta TILEMAP_TMP_BUFFER_ADDR + 1
   115                          
   116  f053 a001                       ldy #TILEMAP_SIZE
   117                          
   118                          @MIN_WIDTH=16
   119                          @MIN_HEIGHT=8
   120                          
   121  f055 a910                       lda #@MIN_WIDTH         ; minimum width
   122  f057 8d817a                     sta TILEMAP_TMP_BUF_COL ; temporary storage for x tiles
   123  f05a a908                       lda #@MIN_HEIGHT        ; minimum height
   124  f05c 8d807a                     sta TILEMAP_TMP_BUF_ROW ; temporary storage for y tiles
   125                          
   126  f05f a900                       lda #0
   127  f061 8533                       sta MEM_LEN + 1
   128  f063 a980                       lda #(@MIN_WIDTH * @MIN_HEIGHT) ; base size (16 x 8)
   129  f065 8532                       sta MEM_LEN                     ; size in bytes
   130  f067 b118                       lda (TILEMAP_ADDR), y           ; size flags
   131  f069 8d847a                     sta TILEMAP_TMP_1
   132  f06c f038                       beq ++
   133                          
   134                          
   135                                  ; check size flags, multiple size
   136  f06e a903                       lda #TILEMAP_SIZE_X_32 | TILEMAP_SIZE_X_64
   137  f070 2c847a                     bit TILEMAP_TMP_1
   138  f073 f015                       beq +
   139  f075 0632                       asl MEM_LEN
   140  f077 2633                       rol MEM_LEN  + 1
   141  f079 0e817a                     asl TILEMAP_TMP_BUF_COL
   142  f07c a902                       lda #TILEMAP_SIZE_X_64
   143  f07e 2c847a                     bit TILEMAP_TMP_1
   144  f081 f007                       beq +
   145  f083 0632                       asl MEM_LEN
   146  f085 2633                       rol MEM_LEN  + 1
   147  f087 0e817a                     asl TILEMAP_TMP_BUF_COL
   148                          +
   149  f08a a90c                       lda #TILEMAP_SIZE_Y_16 | TILEMAP_SIZE_Y_32
   150  f08c 2c847a                     bit TILEMAP_TMP_1
   151  f08f f015                       beq ++
   152  f091 0632                       asl MEM_LEN
   153  f093 2633                       rol MEM_LEN  + 1
   154  f095 0e807a                     asl TILEMAP_TMP_BUF_ROW
   155  f098 a908                       lda #TILEMAP_SIZE_Y_32
   156  f09a 2c847a                     bit TILEMAP_TMP_1
   157  f09d f007                       beq ++
   158  f09f 0632                       asl MEM_LEN
   159  f0a1 2633                       rol MEM_LEN  + 1
   160  f0a3 0e807a                     asl TILEMAP_TMP_BUF_ROW
   161                          ++
   162                                  ; MEM_DST and MEM_LEN are set. clear the buffer.
   163  f0a6 a900                       lda #$00
   164  f0a8 200de1                     jsr memsetMultiPage
   165                          
   166  f0ab ad817a                     lda TILEMAP_TMP_BUF_COL
   167  f0ae a005                       ldy #TILEMAP_WIDTH_TILES
   168  f0b0 9118                       sta (TILEMAP_ADDR), y
   169                          
   170  f0b2 ad807a                     lda TILEMAP_TMP_BUF_ROW
   171  f0b5 a006                       ldy #TILEMAP_HEIGHT_TILES
   172  f0b7 9118                       sta (TILEMAP_ADDR), y
   173                          
   174                                  ; todo: invert & dirty
   175                          
   176  f0b9 20bdf0                     jsr tilemapSetActive
   177                          
   178  f0bc 60                         rts
   179                          
   180                          ; -----------------------------------------------------------------------------
   181                          ; tilemapSetActive: Set the current/active tilemap
   182                          ; -----------------------------------------------------------------------------
   183                          ; Inputs:
   184                          ;  TILEMAP_ADDR: Address of tilemap structure
   185                          ; -----------------------------------------------------------------------------
   186                          tilemapSetActive:
   187  f0bd a005                       ldy #TILEMAP_WIDTH_TILES
   188  f0bf b118                       lda (TILEMAP_ADDR), y
   189  f0c1 8d867a                     sta TILEMAP_TMP_TILES_W
   190                          
   191  f0c4 a006                       ldy #TILEMAP_HEIGHT_TILES
   192  f0c6 b118                       lda (TILEMAP_ADDR), y
   193  f0c8 8d877a                     sta TILEMAP_TMP_TILES_H
   194                          
   195  f0cb a007                       ldy #TILEMAP_TILE_SIZE_PX
   196  f0cd b118                       lda (TILEMAP_ADDR), y
   197  f0cf 8d887a                     sta TILEMAP_TMP_TILE_SIZE
   198  f0d2 60                         rts
   199                          
   200                          
   201                          !if LCD_GRAPHICS=1 {
   202                          
   203                          ; -----------------------------------------------------------------------------
   204                          ; tilemapRenderRowToLcd: Render a row of the current/active tilemap
   205                          ; -----------------------------------------------------------------------------
   206                          ; Prerequisites:
   207                          ;  tilemapSetActive called for the tilemap
   208                          ; Inputs:
   209                          ;  y: Row to render (0-7)
   210                          ; -----------------------------------------------------------------------------
   211                          tilemapRenderRowToLcd:
   212  f0d3 98                         tya
   213  f0d4 2907                       and #$07
   214  f0d6 8d807a                     sta TILEMAP_TMP_BUF_ROW
   215  f0d9 8d857a                     sta TILEMAP_TMP_2
   216  f0dc 0a                         asl
   217  f0dd 0a                         asl
   218  f0de 0a                         asl
   219  f0df 8d837a                     sta TILEMAP_TMP_OUTPUT_ROW
   220                          
   221  f0e2 ee857a                     inc TILEMAP_TMP_2
   222                          
   223                                  ; set the working tilemap buffer address
   224  f0e5 a000                       ldy #TILEMAP_BUFFER_ADDR
   225  f0e7 b118                       lda (TILEMAP_ADDR), y
   226  f0e9 851b                       sta TILEMAP_TMP_BUFFER_ADDR + 1
   227                          
   228                                  ; reset temp variables to zero
   229  f0eb a900                       lda #0
   230  f0ed 851a                       sta TILEMAP_TMP_BUFFER_ADDR ; LSB
   231  f0ef 851c                       sta TILEMAP_TMP_TILES_ADDR  ; LSB
   232  f0f1 8d817a                     sta TILEMAP_TMP_BUF_COL
   233  f0f4 8d827a                     sta TILEMAP_TMP_TILE_ROW
   234                          
   235  f0f7 4c18f1                     jmp .tilemapRenderFrom
   236                          
   237                          
   238                          ; -----------------------------------------------------------------------------
   239                          ; tilemapRenderToLcd: Render the current/active tilemap
   240                          ; -----------------------------------------------------------------------------
   241                          ; Prerequisites:
   242                          ;  tilemapSetActive called for the tilemap
   243                          ; -----------------------------------------------------------------------------
   244                          tilemapRenderToLcd:
   245                          
   246  f0fa ad877a                     lda TILEMAP_TMP_TILES_H
   247  f0fd 8d857a                     sta TILEMAP_TMP_2
   248                          
   249                                  ; set the working tilemap buffer address
   250  f100 a000                       ldy #TILEMAP_BUFFER_ADDR
   251  f102 b118                       lda (TILEMAP_ADDR), y
   252  f104 851b                       sta TILEMAP_TMP_BUFFER_ADDR + 1
   253                                  
   254                                  ; reset temp variables to zero
   255  f106 a900                       lda #0
   256  f108 851a                       sta TILEMAP_TMP_BUFFER_ADDR ; LSB
   257  f10a 851c                       sta TILEMAP_TMP_TILES_ADDR  ; LSB
   258  f10c 8d807a                     sta TILEMAP_TMP_BUF_ROW
   259  f10f 8d817a                     sta TILEMAP_TMP_BUF_COL
   260  f112 8d827a                     sta TILEMAP_TMP_TILE_ROW
   261  f115 8d837a                     sta TILEMAP_TMP_OUTPUT_ROW
   262                          
   263                          .tilemapRenderFrom
   264  f118 ac837a                     ldy TILEMAP_TMP_OUTPUT_ROW
   265  f11b 20b3ec                     jsr lcdGraphicsSetRow
   266                          
   267                                  ; iterate over the buffer rows and columns
   268                          @renderRow
   269                          ;!byte $db
   270                          
   271  f11e a900                       lda #0
   272  f120 8d847a                     sta TILEMAP_TMP_1
   273                          
   274                                  ; set the working tileset address
   275  f123 a002                       ldy #TILEMAP_TILES_ADDR
   276  f125 b118                       lda (TILEMAP_ADDR), y
   277  f127 851d                       sta TILEMAP_TMP_TILES_ADDR + 1
   278                          
   279                                  ; get tile offset
   280  f129 ad807a                     lda TILEMAP_TMP_BUF_ROW
   281  f12c 0a                         asl
   282  f12d 0a                         asl
   283  f12e 0a                         asl
   284  f12f 0a                         asl
   285  f130 18                         clc
   286  f131 6d817a                     adc TILEMAP_TMP_BUF_COL
   287  f134 a8                         tay
   288                          
   289                          
   290                                  ; load the tile index
   291  f135 b11a                       lda (TILEMAP_TMP_BUFFER_ADDR), y
   292                          
   293                                  ; multiply by 8 to get an offset into the tileset buffer
   294                                  ; storing overflow in TILEMAP_TMP_1
   295  f137 0a                         asl
   296  f138 2e847a                     rol TILEMAP_TMP_1
   297  f13b 0a                         asl 
   298  f13c 2e847a                     rol TILEMAP_TMP_1
   299  f13f 0a                         asl
   300  f140 2e847a                     rol TILEMAP_TMP_1
   301                          
   302                                  ; add the tile row offset (the row of the current tile)
   303                                  ; and set as y index
   304  f143 0d827a                     ora TILEMAP_TMP_TILE_ROW
   305  f146 a8                         tay
   306                          
   307                                  ; load the overflow and add to the MSB of the tileset address
   308  f147 ad847a                     lda TILEMAP_TMP_1
   309  f14a 18                         clc
   310  f14b 651d                       adc TILEMAP_TMP_TILES_ADDR + 1
   311  f14d 851d                       sta TILEMAP_TMP_TILES_ADDR + 1
   312                          
   313  f14f 20aeed                     jsr lcdWait
   314                          
   315                                  ; load the byte from the tile
   316  f152 b11c                       lda (TILEMAP_TMP_TILES_ADDR), y
   317                          
   318                                  ; output the byte
   319  f154 8d037f                     sta LCD_DATA
   320                          
   321                                  ; increment column and check against # columns
   322  f157 ee817a                     inc TILEMAP_TMP_BUF_COL
   323  f15a ad867a                     lda TILEMAP_TMP_TILES_W
   324  f15d cd817a                     cmp TILEMAP_TMP_BUF_COL
   325  f160 d0bc                       bne @renderRow
   326                          
   327                                  ; increment tile row (row within tile) and check against tile size
   328  f162 a900                       lda #0
   329  f164 8d817a                     sta TILEMAP_TMP_BUF_COL
   330  f167 ee827a                     inc TILEMAP_TMP_TILE_ROW
   331  f16a ee837a                     inc TILEMAP_TMP_OUTPUT_ROW
   332  f16d ac837a                     ldy TILEMAP_TMP_OUTPUT_ROW
   333                          
   334  f170 20b3ec                     jsr lcdGraphicsSetRow
   335                          
   336  f173 ad887a                     lda TILEMAP_TMP_TILE_SIZE
   337  f176 cd827a                     cmp TILEMAP_TMP_TILE_ROW
   338  f179 d0a3                       bne @renderRow
   339                          
   340                                  ; increment row and check against # rows
   341  f17b a900                       lda #0
   342  f17d 8d827a                     sta TILEMAP_TMP_TILE_ROW
   343  f180 ee807a                     inc TILEMAP_TMP_BUF_ROW
   344  f183 ad857a                     lda TILEMAP_TMP_2
   345  f186 cd807a                     cmp TILEMAP_TMP_BUF_ROW
   346  f189 d093                       bne @renderRow
   347                          
   348  f18b 60                         rts
   349                          

; ******** Source: kernel.asm
   169                          
   170                          }
   171                          
   172                          !ifndef HBC56_DISABLE_UART {

; ******** Source: ../lib\ser\uart.asm
     1                          ; 6502 - MC68B50 UART
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          HAVE_UART = 1
    11                          
    12                          ; -------------------------
    13                          ; Constants
    14                          ; -------------------------
    15                          !ifndef UART_IO_PORT { UART_IO_PORT = $20
    16                                  !warn "UART_IO_PORT not provided. Defaulting to ", UART_IO_PORT
    17                          }
    18                          
    19                          !ifndef UART_ZP_START { UART_ZP_START = $40
    20                                  !warn "UART_ZP_START not provided. Defaulting to ", UART_ZP_START
    21                          }
    22                          
    23                          !ifndef UART_RAM_START { UART_RAM_START = $7c80
    24                                  !warn "UART_RAM_START not provided. Defaulting to ", UART_RAM_START
    25                          }
    26                          
    27                          
    28                          ; -----------------------------------------------------------------------------
    29                          ; Zero page
    30                          ; -----------------------------------------------------------------------------
    31                          UART_RX_BUFFER_HEAD  = UART_ZP_START            ; head of circular buffer
    32                          UART_RX_BUFFER_TAIL  = UART_ZP_START + 1        ; tail of circular buffer
    33                          UART_RX_BUFFER_BYTES = UART_ZP_START + 2        ; bytes in buffer
    34                          UART_RX_FLAGS        = UART_ZP_START + 3        ; flags
    35                          @UART_ZP_END         = UART_ZP_START + 4
    36                          
    37                          !if (.UART_ZP_SIZE < @UART_ZP_END - UART_ZP_START) {
    38                                  !error "UART ZP allocation insufficient. Allocated: ", .UART_ZP_SIZE, " Require: ", (@UART_ZP_END - UART_ZP_START)
    39                          }
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          UART_RX_BUFFER       = UART_RAM_START
    45                          UART_RX_BUFFER_SIZE  = $100
    46                          
    47                          @UART_RAM_END        = UART_RAM_START + UART_RX_BUFFER_SIZE
    48                          
    49                          !if (.UART_RAM_SIZE < @UART_RAM_END - UART_RAM_START) {
    50                                  !error "UART RAM allocation insufficient. Allocated: ", .UART_RAM_SIZE, " Require: ", (@UART_RAM_END - UART_RAM_START)
    51                          }
    52                          
    53                          
    54                          ; IO Ports
    55                          UART_REG      = IO_PORT_BASE_ADDRESS | UART_IO_PORT
    56                          UART_DATA     = IO_PORT_BASE_ADDRESS | UART_IO_PORT | $01
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; Constants
    60                          ; -----------------------------------------------------------------------------
    61                          UART_CTL_MASTER_RESET       = %00000011
    62                          UART_CTL_CLOCK_DIV_16       = %00000001
    63                          UART_CTL_CLOCK_DIV_64       = %00000010
    64                          UART_CTL_WORD_7BIT_EPB_2SB  = %00000000
    65                          UART_CTL_WORD_7BIT_OPB_2SB  = %00000100
    66                          UART_CTL_WORD_7BIT_EPB_1SB  = %00001000
    67                          UART_CTL_WORD_7BIT_OPB_1SB  = %00001100
    68                          UART_CTL_WORD_8BIT_2SB      = %00010000
    69                          UART_CTL_WORD_8BIT_1SB      = %00010100
    70                          UART_CTL_WORD_8BIT_EPAR_1SB = %00011000
    71                          UART_CTL_WORD_8BIT_OPAR_1SB = %00011100
    72                          UART_CTL_RX_INT_ENABLE      = %10000000
    73                          
    74                          UART_STATUS_RX_REG_FULL     = %00000001
    75                          UART_STATUS_TX_REG_EMPTY    = %00000010
    76                          UART_STATUS_CARRIER_DETECT  = %00000100
    77                          UART_STATUS_CLEAR_TO_SEND   = %00001000
    78                          UART_STATUS_FRAMING_ERROR   = %00010000
    79                          UART_STATUS_RCVR_OVERRUN    = %00100000
    80                          UART_STATUS_PARITY_ERROR    = %01000000
    81                          UART_STATUS_IRQ             = %10000000
    82                          
    83                          UART_FLOWCTRL_XON           = $11
    84                          UART_FLOWCTRL_XOFF          = $13
    85                          
    86                          UART_RX_BUFFER_XOFF_SIZE    = 192
    87                          UART_RX_BUFFER_XON_SIZE     = 4
    88                          
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; uartInit: Initialise the UART
    92                          ; -----------------------------------------------------------------------------
    93                          uartInit:
    94  f18c a900                       lda #0
    95  f18e 852a                       sta UART_RX_BUFFER_HEAD
    96  f190 852b                       sta UART_RX_BUFFER_TAIL
    97  f192 852c                       sta UART_RX_BUFFER_BYTES
    98  f194 852d                       sta UART_RX_FLAGS
    99                          
   100  f196 a903                       lda #UART_CTL_MASTER_RESET
   101  f198 8d207f                     sta UART_REG
   102  f19b ea                         nop
   103  f19c ea                         nop
   104                          
   105  f19d a992                       lda #(UART_CTL_CLOCK_DIV_64 | UART_CTL_WORD_8BIT_2SB | UART_CTL_RX_INT_ENABLE)
   106  f19f 8d207f                     sta UART_REG
   107  f1a2 ea                         nop
   108  f1a3 ea                         nop
   109                          
   110  f1a4 20ccf1                     jsr uartFlowCtrlXon
   111                          
   112  f1a7 60                         rts
   113                          
   114                          ; -----------------------------------------------------------------------------
   115                          ; uartIrq: Standard UART IRQ handler
   116                          ; -----------------------------------------------------------------------------
   117                          uartIrq:
   118  f1a8 a901                       lda #UART_STATUS_RX_REG_FULL
   119  f1aa 2c207f                     bit UART_REG
   120  f1ad f01c                       beq @endFlowControlCheck
   121  f1af ea                         nop
   122  f1b0 ea                         nop
   123                          
   124  f1b1 da                         phx
   125  f1b2 a62a                       ldx UART_RX_BUFFER_HEAD
   126  f1b4 ad217f                     lda UART_DATA
   127  f1b7 9d827b                     sta UART_RX_BUFFER, x
   128  f1ba e62a                       inc UART_RX_BUFFER_HEAD
   129  f1bc e62c                       inc UART_RX_BUFFER_BYTES
   130  f1be fa                         plx
   131                          
   132                          @flowControlCheck
   133                                  ; check flow control
   134  f1bf ff2d09                     bbs7 UART_RX_FLAGS, @endFlowControlCheck    ; if already xoff, just leave
   135  f1c2 a9c0                       lda #UART_RX_BUFFER_XOFF_SIZE               ; otherwise, should we ask for xoff?
   136  f1c4 c52c                       cmp UART_RX_BUFFER_BYTES
   137  f1c6 b003                       bcs @endFlowControlCheck                    ; all good
   138  f1c8 20d7f1                     jsr uartFlowCtrlXoff                        ; stop please.
   139                          
   140                          @endFlowControlCheck
   141  f1cb 60                         rts
   142                          
   143                          ; -----------------------------------------------------------------------------
   144                          ; uartFlowCtrlXon: Allow client to send data
   145                          ; -----------------------------------------------------------------------------
   146                          uartFlowCtrlXon:
   147  f1cc 772d                       rmb7 UART_RX_FLAGS        
   148  f1ce a911                       lda #UART_FLOWCTRL_XON
   149  f1d0 ea                         nop
   150  f1d1 ea                         nop
   151  f1d2 ea                         nop
   152  f1d3 ea                         nop
   153  f1d4 4c0df2                     jmp uartOut
   154                          
   155                          ; -----------------------------------------------------------------------------
   156                          ; uartFlowCtrlXoff: Stop client to sending data
   157                          ; -----------------------------------------------------------------------------
   158                          uartFlowCtrlXoff
   159  f1d7 f72d                       smb7 UART_RX_FLAGS
   160  f1d9 a913                       lda #UART_FLOWCTRL_XOFF
   161  f1db ea                         nop
   162  f1dc ea                         nop
   163  f1dd 4c13f2                     jmp uartOutNoBsCheck
   164                          
   165                          ; -----------------------------------------------------------------------------
   166                          ; uartInWait: Input a byte from the UART (wait forever)
   167                          ; -----------------------------------------------------------------------------
   168                          ; Outputs:
   169                          ;   A: Value of the buffer
   170                          ; -----------------------------------------------------------------------------
   171                          uartInWait:
   172  f1e0 a52a                       lda UART_RX_BUFFER_HEAD
   173  f1e2 c52b                       cmp UART_RX_BUFFER_TAIL
   174  f1e4 f0fa                       beq uartInWait
   175  f1e6 08                         php
   176  f1e7 78                         sei
   177  f1e8 8008                       bra .uartIncheckFlowControl
   178                          
   179                          ; -----------------------------------------------------------------------------
   180                          ; uartInNoWait: Input a byte from the UART (don't wait)
   181                          ; -----------------------------------------------------------------------------
   182                          ; Outputs:
   183                          ;   A: Value of the buffer
   184                          ;   C: Set if a byte is read
   185                          ; -----------------------------------------------------------------------------
   186                          uartInNoWait:
   187  f1ea 08                         php
   188  f1eb 78                         sei
   189  f1ec a52a                       lda UART_RX_BUFFER_HEAD
   190  f1ee c52b                       cmp UART_RX_BUFFER_TAIL
   191  f1f0 f018                       beq @noData
   192                          
   193                          .uartIncheckFlowControl
   194                                  ; check flow control
   195  f1f2 7f2d09                     bbr7 UART_RX_FLAGS, @readUartValue  ; if already xon, just exit again
   196  f1f5 a904                       lda #UART_RX_BUFFER_XON_SIZE        ; otherwise, should we ask for xon?
   197  f1f7 c52c                       cmp UART_RX_BUFFER_BYTES
   198  f1f9 9003                       bcc @readUartValue                  ; all good
   199  f1fb 20ccf1                     jsr uartFlowCtrlXon                 ; continue sending please.
   200                          
   201                          @readUartValue
   202  f1fe a62b                       ldx UART_RX_BUFFER_TAIL
   203  f200 bd827b                     lda UART_RX_BUFFER, x
   204  f203 e62b                       inc UART_RX_BUFFER_TAIL
   205  f205 c62c                       dec UART_RX_BUFFER_BYTES
   206  f207 28                         plp
   207  f208 38                         sec
   208  f209 60                         rts
   209                          @noData
   210  f20a 28                         plp
   211  f20b 18                         clc
   212  f20c 60                         rts
   213                          
   214                          
   215                          ; -----------------------------------------------------------------------------
   216                          ; uartOut: Output a byte to the UART
   217                          ; -----------------------------------------------------------------------------
   218                          ; Inputs:
   219                          ;   A: Value to output
   220                          ; -----------------------------------------------------------------------------
   221                          uartOut:
   222  f20d c908                       cmp #$08        ; bs
   223  f20f d002                       bne uartOutNoBsCheck
   224  f211 a97f                       lda #$7f        ; del
   225                          uartOutNoBsCheck:
   226  f213 48                         pha
   227  f214 a902                       lda #UART_STATUS_TX_REG_EMPTY
   228                          
   229                          @aciaTestSend
   230  f216 2c207f                     bit UART_REG
   231  f219 ea                         nop
   232  f21a ea                         nop
   233  f21b d002                       bne +
   234  f21d 80f7                       bra @aciaTestSend
   235                          
   236                          +
   237  f21f 68                         pla
   238  f220 8d217f                     sta UART_DATA
   239  f223 60                         rts
   240                          
   241                          
   242                          ; -----------------------------------------------------------------------------
   243                          ; uartOutString: Output a string to the UART
   244                          ; -----------------------------------------------------------------------------
   245                          ; Inputs:
   246                          ;   A: Value to output
   247                          ; -----------------------------------------------------------------------------
   248                          uartOutString:
   249  f224 a000                       ldy #0
   250                          -
   251  f226 b134                       lda (STR_ADDR), y
   252  f228 f006                       beq +
   253  f22a 2013f2                     jsr uartOutNoBsCheck
   254  f22d c8                         iny
   255  f22e d0f6                       bne -
   256                          +
   257  f230 60                         rts

; ******** Source: kernel.asm
   173                          
   174                          }
   175                          
   176                          !ifndef HBC56_DISABLE_NES {

; ******** Source: ../lib\inp\nes.asm
     1                          ; 6502 NES Controllers - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef NES_IO_PORT { NES_IO_PORT = $82
    12                                  !warn "NES_IO_PORT not provided. Defaulting to ", NES_IO_PORT
    13                          }
    14                          
    15                          !ifndef NES_RAM_START { NES_RAM_START = $7ea1
    16                                  !warn "NES_RAM_START not provided. Defaulting to ", NES_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          NES_TMP        = NES_RAM_START
    23                          NES_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if NES_RAM_END < (NES_RAM_START + NES_RAM_SIZE) {
    27                                  !error "NES_RAM requires ",NES_RAM_SIZE," bytes. Allocated ",NES_RAM_END - NES_RAM_START
    28                          }
    29                          
    30                          
    31                          ; IO Ports
    32                          NES1_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT
    33                          NES2_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT | $01
    34                          
    35                          
    36                          NES_RIGHT       = %00000001
    37                          NES_LEFT        = %00000010
    38                          NES_DOWN        = %00000100
    39                          NES_UP          = %00001000
    40                          NES_START       = %00010000
    41                          NES_SELECT      = %00100000
    42                          NES_B           = %01000000
    43                          NES_A           = %10000000
    44                          
    45                          ; -----------------------------------------------------------------------------
    46                          ; nesWaitForPress: Wait for a NES button press (either port)
    47                          ; -----------------------------------------------------------------------------
    48                          nesWaitForPress:
    49  f231 a9ff                       lda #$ff
    50                          @notPressed
    51  f233 cd827f                     cmp NES1_IO_ADDR
    52  f236 d005                       bne @pressed
    53  f238 cd837f                     cmp NES2_IO_ADDR
    54  f23b f0f6                       beq @notPressed
    55                          @pressed
    56  f23d 60                         rts
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; nes1Pressed: Is a button pressed?
    60                          ; -----------------------------------------------------------------------------
    61                          ; Inputs:
    62                          ;   A: Button to test
    63                          ; Outputs:
    64                          ;   Carry set if pressed, Carry clear if not
    65                          nes1Pressed:
    66  f23e 2c827f                     bit NES1_IO_ADDR
    67  f241 18                         clc
    68  f242 d001                       bne +
    69  f244 38                         sec
    70                          +
    71  f245 60                         rts
    72                          
    73                          ; -----------------------------------------------------------------------------
    74                          ; nes2Pressed: Is a button pressed?
    75                          ; -----------------------------------------------------------------------------
    76                          ; Inputs:
    77                          ;   A: Button to test
    78                          ; Outputs:
    79                          ;   Carry set if pressed, Carry clear if not
    80                          nes2Pressed:
    81  f246 2c837f                     bit NES2_IO_ADDR
    82  f249 18                         clc
    83  f24a d001                       bne +
    84  f24c 38                         sec
    85                          +
    86  f24d 60                         rts
    87                          
    88                          
    89                          
    90                          

; ******** Source: kernel.asm
   177                          
   178                          }
   179                          
   180                          !ifndef HBC56_DISABLE_KEYBOARD {

; ******** Source: ../lib\inp\keyboard.asm
     1                          ; 6502 KB Controller - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github@com/visrealm/hbc-56
     8                          ;
     9                          
    10                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }
    11                          
    12                          HAVE_KEYBOARD = 1
    13                          
    14                          ; -------------------------
    15                          ; Constants
    16                          ; -------------------------
    17                          !ifndef KB_IO_PORT { KB_IO_PORT = $80
    18                                  !warn "KB_IO_PORT not provided@ Defaulting to ", KB_IO_PORT
    19                          }
    20                          
    21                          !ifndef KB_RAM_START { KB_RAM_START = $7ea1
    22                                  !warn "KB_RAM_START not provided@ Defaulting to ", KB_RAM_START
    23                          }
    24                          
    25                          ; -------------------------
    26                          ; High RAM
    27                          ; -------------------------
    28                          KB_FLAGS          = KB_RAM_START
    29                          KB_TMP_X          = KB_RAM_START + 1
    30                          KB_TMP_Y          = KB_RAM_START + 2
    31                          KB_CB_PRESSED     = KB_RAM_START + 3
    32                          KB_CB_RELEASED    = KB_RAM_START + 5
    33                          KB_CURRENT_STATE  = KB_RAM_START + 7
    34                          KB_BUFFER_HEAD    = KB_RAM_START + 8         ; head of circular buffer
    35                          KB_BUFFER_TAIL    = KB_RAM_START + 9         ; tail of circular buffer
    36                          KB_BUFFER         = KB_RAM_START + 10
    37                          KB_BUFFER_SIZE    = (1 << 4)
    38                          KB_BUFFER_MASK    = KB_BUFFER_SIZE - 1
    39                          KB_PRESSED_MAP    = KB_BUFFER + KB_BUFFER_SIZE
    40                          
    41                          KB_PRESSED_MAP_SIZE = $fd + 1
    42                          KB_PRESSED_MAP_BYTES = 32
    43                          
    44                          KB_RAM_SIZE     = (KB_PRESSED_MAP + KB_PRESSED_MAP_BYTES) - KB_RAM_START
    45                          
    46                          
    47                          !if KB_RAM_END < (KB_RAM_START + KB_RAM_SIZE) {
    48                                  !error "KB_RAM requires ",KB_RAM_SIZE," bytes@ Allocated ",KB_RAM_END - KB_RAM_START
    49                          }
    50                          
    51                          ; -------------------------
    52                          ; Contants
    53                          ; -------------------------
    54                          KB_SHIFT_DOWN   = %00000001
    55                          KB_CTRL_DOWN    = %00000010
    56                          KB_ALT_DOWN     = %00000100
    57                          KB_CAPS_LOCK    = %00001000
    58                          KB_NUM_LOCK     = %00010000
    59                          
    60                          KB_RELEASE      = $f0
    61                          KB_EXT_KEY      = $e0
    62                          KB_PAUSE_KEY    = $e1
    63                          
    64                          KB_SCANCODE_0 = $45
    65                          KB_SCANCODE_1 = $16
    66                          KB_SCANCODE_2 = $1E
    67                          KB_SCANCODE_3 = $26
    68                          KB_SCANCODE_4 = $25
    69                          KB_SCANCODE_5 = $2E
    70                          KB_SCANCODE_6 = $36
    71                          KB_SCANCODE_7 = $3D
    72                          KB_SCANCODE_8 = $3E
    73                          KB_SCANCODE_9 = $46
    74                          KB_SCANCODE_A = $1C
    75                          KB_SCANCODE_B = $32
    76                          KB_SCANCODE_C = $21
    77                          KB_SCANCODE_D = $23
    78                          KB_SCANCODE_E = $24
    79                          KB_SCANCODE_F = $2B
    80                          KB_SCANCODE_G = $34
    81                          KB_SCANCODE_H = $33
    82                          KB_SCANCODE_I = $43
    83                          KB_SCANCODE_J = $3B
    84                          KB_SCANCODE_K = $42
    85                          KB_SCANCODE_L = $4B
    86                          KB_SCANCODE_M = $3A
    87                          KB_SCANCODE_N = $31
    88                          KB_SCANCODE_O = $44
    89                          KB_SCANCODE_P = $4D
    90                          KB_SCANCODE_Q = $15
    91                          KB_SCANCODE_R = $2D
    92                          KB_SCANCODE_S = $1B
    93                          KB_SCANCODE_T = $2C
    94                          KB_SCANCODE_U = $3C
    95                          KB_SCANCODE_V = $2A
    96                          KB_SCANCODE_W = $1D
    97                          KB_SCANCODE_X = $22
    98                          KB_SCANCODE_Y = $35
    99                          KB_SCANCODE_Z = $1A
   100                          KB_SCANCODE_F1 = $05
   101                          KB_SCANCODE_F2 = $06
   102                          KB_SCANCODE_F3 = $04
   103                          KB_SCANCODE_F4 = $0C
   104                          KB_SCANCODE_F5 = $03
   105                          KB_SCANCODE_F6 = $0B
   106                          KB_SCANCODE_F7 = $83
   107                          KB_SCANCODE_F8 = $0A
   108                          KB_SCANCODE_F9 = $01
   109                          KB_SCANCODE_F10 = $09
   110                          KB_SCANCODE_F11 = $78
   111                          KB_SCANCODE_F12 = $07
   112                          KB_SCANCODE_NUMPAD_0 = $70
   113                          KB_SCANCODE_NUMPAD_1 = $69
   114                          KB_SCANCODE_NUMPAD_2 = $72
   115                          KB_SCANCODE_NUMPAD_3 = $7A
   116                          KB_SCANCODE_NUMPAD_4 = $6B
   117                          KB_SCANCODE_NUMPAD_5 = $73
   118                          KB_SCANCODE_NUMPAD_6 = $74
   119                          KB_SCANCODE_NUMPAD_7 = $6C
   120                          KB_SCANCODE_NUMPAD_8 = $75
   121                          KB_SCANCODE_NUMPAD_9 = $7D
   122                          KB_SCANCODE_NUMPAD_DIVIDE = $CA
   123                          KB_SCANCODE_NUMPAD_ENTER = $DA
   124                          KB_SCANCODE_NUMPAD_MINUS = $7B
   125                          KB_SCANCODE_NUMPAD_MULTIPLY = $7C
   126                          KB_SCANCODE_NUMPAD_PERIOD = $71
   127                          KB_SCANCODE_NUMPAD_PLUS = $79
   128                          KB_SCANCODE_NUM_LOCK = $77
   129                          KB_SCANCODE_ALT_LEFT = $11
   130                          KB_SCANCODE_ALT_RIGHT_ = $91
   131                          KB_SCANCODE_APOS = $52
   132                          KB_SCANCODE_ARROW_DOWN = $F2
   133                          KB_SCANCODE_ARROW_LEFT = $EB
   134                          KB_SCANCODE_ARROW_RIGHT = $F4
   135                          KB_SCANCODE_ARROW_UP = $F5
   136                          KB_SCANCODE_BACKSPACE = $66
   137                          KB_SCANCODE_CAPS_LOCK = $58
   138                          KB_SCANCODE_COMMA = $41
   139                          KB_SCANCODE_CTRL_LEFT = $14
   140                          KB_SCANCODE_CTRL_RIGHT = $94
   141                          KB_SCANCODE_DELETE = $F1
   142                          KB_SCANCODE_END = $E9
   143                          KB_SCANCODE_ENTER = $5A
   144                          KB_SCANCODE_EQUAL = $55
   145                          KB_SCANCODE_ESC = $76
   146                          KB_SCANCODE_HOME = $EC
   147                          KB_SCANCODE_INSERT = $F0
   148                          KB_SCANCODE_MENU = $AF
   149                          KB_SCANCODE_MINUS = $4E
   150                          KB_SCANCODE_PAGE_DOWN = $FA
   151                          KB_SCANCODE_PAGE_UP = $FD
   152                          KB_SCANCODE_PAUSE = $E1
   153                          KB_SCANCODE_PERIOD = $49
   154                          KB_SCANCODE_PRTSCR = $92
   155                          KB_SCANCODE_SCROLL_LOCK = $7E
   156                          KB_SCANCODE_SEMICOLON = $4C
   157                          KB_SCANCODE_SHIFT_LEFT = $12
   158                          KB_SCANCODE_SHIFT_RIGHT = $59
   159                          KB_SCANCODE_SLASH_BACK = $5D
   160                          KB_SCANCODE_SLASH_FORWARD = $4A
   161                          KB_SCANCODE_SPACEBAR = $29
   162                          KB_SCANCODE_SQUARE_LEFT = $54
   163                          KB_SCANCODE_SQUARE_RIGHT = $5B
   164                          KB_SCANCODE_TAB = $0D
   165                          KB_SCANCODE_TILDE = $0E
   166                          KB_SCANCODE_WINDOWS_LEFT = $9F
   167                          KB_SCANCODE_WINDOWS_RIGHT = $A7
   168                          
   169                          
   170                          KB_SHIFT_LEFT_MAP_BYTE = KB_SCANCODE_SHIFT_LEFT >> 3
   171                          KB_SHIFT_LEFT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_LEFT & $07)
   172                          
   173                          KB_SHIFT_RIGHT_MAP_BYTE = KB_SCANCODE_SHIFT_RIGHT >> 3
   174                          KB_SHIFT_RIGHT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_RIGHT & $07)
   175                          
   176                          
   177                          ; IO Ports
   178                          KB_IO_ADDR         = IO_PORT_BASE_ADDRESS | KB_IO_PORT
   179                          KB_STATUS_ADDR     = IO_PORT_BASE_ADDRESS | KB_IO_PORT | $01
   180                          
   181                          ; -----------------------------------------------------------------------------
   182                          ; kbInit: Initialise the keyboard
   183                          ; -----------------------------------------------------------------------------
   184                          kbInit:
   185  f24e a900                       lda #$00
   186  f250 8d867c                     sta KB_FLAGS
   187                          
   188  f253 a210                       ldx #16 ;buffer size
   189                                  
   190                                  ; ensure the hardware keyboard buffer is clear
   191                          -
   192  f255 8e877c                     stx KB_TMP_X
   193  f258 2009f3                     jsr .kbReadByte
   194  f25b ae877c                     ldx KB_TMP_X
   195  f25e ca                         dex
   196  f25f d0f4                       bne -
   197                          
   198  f261 a220a900ca9da07c...        +memset KB_PRESSED_MAP, 0, KB_PRESSED_MAP_BYTES
   199                          
   200  f26d 9c8e7c                     stz KB_BUFFER_HEAD
   201  f270 9c8f7c                     stz KB_BUFFER_TAIL
   202                          
   203  f273 a900                       lda #.KB_STATE_DEFAULT
   204  f275 8d8d7c                     sta KB_CURRENT_STATE
   205                          
   206                                  ; flow through
   207                          
   208                          kbResetCallbacks:
   209  f278 a988                       lda #<.kbDummyCb
   210  f27a 8d897c                     sta KB_CB_PRESSED
   211  f27d 8d8b7c                     sta KB_CB_RELEASED
   212                                  
   213  f280 a9f2                       lda #>.kbDummyCb
   214  f282 8d8a7c                     sta KB_CB_PRESSED + 1
   215  f285 8d8c7c                     sta KB_CB_RELEASED + 1
   216                          
   217                                  ; flow through
   218                          
   219                          .kbDummyCb:
   220  f288 60                         rts
   221                          
   222                          ; -----------------------------------------------------------------------------
   223                          ; kbIntHandler: Standard keyboard interrupt handler
   224                          ; -----------------------------------------------------------------------------
   225                          kbIntHandler:
   226  f289 2009f3                     jsr .kbReadByte
   227  f28c e000                       cpx #0
   228  f28e f0f8                       beq .kbDummyCb
   229                          
   230  f290 8a                         txa     ; acc now holds scancode
   231                          
   232  f291 ae8d7c                     ldx KB_CURRENT_STATE
   233                          
   234  f294 7c97f2                     jmp (.kbStateHandlers, x)
   235                          
   236                          .KB_STATE_DEFAULT          = 0
   237                          .KB_STATE_RELEASE          = 2
   238                          .KB_STATE_EXTENDED         = 4
   239                          .KB_STATE_EXTENDED_RELEASE = 6
   240                          .KB_STATE_PAUSE_SEQ        = 8
   241                          
   242                          .kbStateHandlers:
   243  f297 a1f2c7f2d4f2c5f2...!word .stdKeyHandler, .relKeyHandler, .extKeyHandler, .extRelKeyHandler, .pauseKeyHandler
   244                          
   245                          ; default scancode handler
   246                          .stdKeyHandler
   247  f2a1 c9f0                       cmp #KB_RELEASE
   248  f2a3 d006                       bne +
   249  f2a5 a902                       lda #.KB_STATE_RELEASE
   250  f2a7 8d8d7c                     sta KB_CURRENT_STATE
   251  f2aa 60                         rts
   252                          +
   253  f2ab c9e0                       cmp #KB_EXT_KEY
   254  f2ad d006                       bne +
   255  f2af a904                       lda #.KB_STATE_EXTENDED
   256  f2b1 8d8d7c                     sta KB_CURRENT_STATE
   257  f2b4 60                         rts
   258                          +
   259  f2b5 c9e1                       cmp #KB_PAUSE_KEY
   260  f2b7 d006                       bne +
   261  f2b9 a908                       lda #.KB_STATE_PAUSE_SEQ
   262  f2bb 8d8d7c                     sta KB_CURRENT_STATE
   263  f2be 60                         rts
   264                          +
   265                                  ; a regular key was pressed 
   266                                  ; TODO: bit field rather than a byte per key?
   267  f2bf 201bf3                     jsr .kbSetKey
   268                          
   269  f2c2 6c897c                     jmp (KB_CB_PRESSED)
   270                                  ; subroutine returns above
   271                          
   272                          ; extended release scancode handler
   273                          .extRelKeyHandler:
   274  f2c5 0980                       ora #$80
   275                                  ; flow through
   276                          
   277                          ;  release scancode handler
   278                          .relKeyHandler:
   279  f2c7 aa                         tax
   280  f2c8 2050f3                     jsr .kbClearKey
   281                          
   282  f2cb a900                       lda #.KB_STATE_DEFAULT
   283  f2cd 8d8d7c                     sta KB_CURRENT_STATE
   284  f2d0 8a                         txa
   285                          
   286  f2d1 6c8b7c                     jmp (KB_CB_RELEASED)
   287                          
   288                          ; extended scancode handler
   289                          .extKeyHandler:
   290  f2d4 c9f0                       cmp #KB_RELEASE
   291  f2d6 d006                       bne +
   292  f2d8 a906                       lda #.KB_STATE_EXTENDED_RELEASE
   293  f2da 8d8d7c                     sta KB_CURRENT_STATE
   294  f2dd 60                         rts
   295                          +
   296  f2de 0980                       ora #$80
   297                                  
   298  f2e0 201bf3                     jsr .kbSetKey
   299                          
   300  f2e3 a900                       lda #.KB_STATE_DEFAULT
   301  f2e5 8d8d7c                     sta KB_CURRENT_STATE
   302  f2e8 8a                         txa
   303                          
   304  f2e9 6c897c                     jmp (KB_CB_PRESSED)
   305                          
   306                          ; pause/break sequence scancode handler
   307                          .pauseKeyHandler:
   308  f2ec c977                       cmp #$77
   309  f2ee d018                       bne @notLastByte
   310  f2f0 aa                         tax
   311  f2f1 ad817d                     lda KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   312  f2f4 d006                       bne +
   313  f2f6 8e817d                     stx KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   314  f2f9 6c897c                     jmp (KB_CB_PRESSED)
   315                          +
   316  f2fc 9c817d                     stz KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   317                          
   318  f2ff a900                       lda #.KB_STATE_DEFAULT
   319  f301 8d8d7c                     sta KB_CURRENT_STATE
   320  f304 8a                         txa
   321                          
   322  f305 6c8b7c                     jmp (KB_CB_RELEASED)
   323                          
   324                          @notLastByte
   325  f308 60                         rts
   326                          
   327                          ; -----------------------------------------------------------------------------
   328                          ; Outputs:
   329                          ;   A: Value of the KB Status (0 if no key)
   330                          ;   X: PS/2 Scancode byte
   331                          ; -----------------------------------------------------------------------------
   332                          .kbReadByte:        
   333  f309 a200                       ldx #0
   334  f30b a904                       lda #$04
   335  f30d 2c817f                     bit KB_STATUS_ADDR
   336  f310 f008                       beq @end
   337                          
   338  f312 a020                       ldy #32         ; TODO: this could probably be smaller
   339                          -
   340  f314 88                         dey
   341  f315 d0fd                       bne -
   342                          
   343  f317 ae807f                     ldx KB_IO_ADDR
   344                          @end
   345  f31a 60                         rts
   346                          
   347                          
   348                          ; -----------------------------------------------------------------------------
   349                          ; .kbSetKey: Set a key is pressed in KB_PRESSED_MAP
   350                          ; Inputs:
   351                          ;    A - scancode
   352                          ; -----------------------------------------------------------------------------
   353                          .kbSetKey:
   354  f31b ae8e7c                     ldx KB_BUFFER_HEAD      ; store at head of buffer
   355  f31e 9d907c                     sta KB_BUFFER, x
   356                          
   357  f321 8d877c                     sta KB_TMP_X            ; find byte in map
   358  f324 4a4a4a                     +lsr3
   359  f327 aa                         tax
   360  f328 ad877c                     lda KB_TMP_X
   361  f32b 2907                       and #$07
   362  f32d a8                         tay
   363  f32e bda07c                     lda KB_PRESSED_MAP, x
   364  f331 1930e1                     ora tableBitFromLeft, y ; set bit in map byte
   365  f334 9da07c                     sta KB_PRESSED_MAP, x   ; update map
   366                          
   367                                  ; check for toggle keys
   368  f337 ae877c                     ldx KB_TMP_X
   369  f33a e058                       cpx #KB_SCANCODE_CAPS_LOCK
   370  f33c d008                       bne +
   371  f33e a908                       lda #KB_CAPS_LOCK
   372  f340 4d867c                     eor KB_FLAGS
   373  f343 8d867c                     sta KB_FLAGS
   374                          +
   375                          
   376  f346 ad8e7c                     lda KB_BUFFER_HEAD      ; increment (and mask) buffer head
   377  f349 1a                         inc
   378  f34a 290f                       and #KB_BUFFER_MASK
   379  f34c 8d8e7c                     sta KB_BUFFER_HEAD
   380  f34f 60                         rts
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; .kbClearKey: Clear a key is pressed in KB_PRESSED_MAP
   384                          ; Inputs:
   385                          ;    A - scancode
   386                          ; -----------------------------------------------------------------------------
   387                          .kbClearKey:
   388  f350 8d877c                     sta KB_TMP_X
   389  f353 4a4a4a                     +lsr3
   390  f356 aa                         tax
   391  f357 ad877c                     lda KB_TMP_X
   392  f35a 2907                       and #$07
   393  f35c a8                         tay
   394  f35d bda07c                     lda KB_PRESSED_MAP, x
   395  f360 3938e1                     and tableInvBitFromLeft, y
   396  f363 9da07c                     sta KB_PRESSED_MAP, x
   397  f366 60                         rts
   398                          
   399                          
   400                          ; -----------------------------------------------------------------------------
   401                          ; .kbPopTail: Pop a scancode from the tail of the buffer
   402                          ; Inputs:
   403                          ;    A - scancode
   404                          ; -----------------------------------------------------------------------------
   405                          .kbPopTail:
   406  f367 ad8f7c                     lda KB_BUFFER_TAIL
   407  f36a aa                         tax
   408  f36b 1a                         inc
   409  f36c 290f                       and #KB_BUFFER_MASK
   410  f36e 8d8f7c                     sta KB_BUFFER_TAIL
   411  f371 bd907c                     lda KB_BUFFER, x
   412  f374 60                         rts
   413                          
   414                          ; -----------------------------------------------------------------------------
   415                          ; kbIsPressed: Is a key pressed right now?
   416                          ; Inputs:
   417                          ;    X - scancode
   418                          ; Returns:
   419                          ;    Z - clear if pressed, set if not pressed
   420                          ; -----------------------------------------------------------------------------
   421                          kbIsPressed:
   422  f375 08                         php
   423  f376 78                         sei
   424  f377 8e877c                     stx KB_TMP_X
   425  f37a 8a                         txa
   426  f37b 4a4a4a                     +lsr3
   427  f37e aa                         tax
   428  f37f ad877c                     lda KB_TMP_X
   429  f382 2907                       and #$07
   430  f384 a8                         tay
   431  f385 b930e1                     lda tableBitFromLeft, y
   432  f388 3da07c                     and KB_PRESSED_MAP, x
   433  f38b ae877c                     ldx KB_TMP_X
   434  f38e 28                         plp
   435  f38f c900                       cmp #0
   436  f391 60                         rts
   437                          
   438                          
   439                          ; -----------------------------------------------------------------------------
   440                          ; kbWaitForScancode: Wait for a key press
   441                          ; Returns:
   442                          ;    A - scancode
   443                          ; -----------------------------------------------------------------------------
   444                          kbWaitForScancode:
   445  f392 08                         php
   446  f393 78                         sei        
   447  f394 38                         sec
   448  f395 ad8e7c                     lda KB_BUFFER_HEAD
   449  f398 ed8f7c                     sbc KB_BUFFER_TAIL
   450  f39b 28                         plp
   451  f39c c900                       cmp #0
   452  f39e f0f2                       beq kbWaitForScancode
   453  f3a0 08                         php
   454  f3a1 78                         sei
   455  f3a2 2067f3                     jsr .kbPopTail
   456  f3a5 28                         plp
   457  f3a6 60                         rts
   458                          
   459                          ; -----------------------------------------------------------------------------
   460                          ; kbNextScancode: Return the next scancode in the buffer or zero if empty
   461                          ; Returns:
   462                          ;    A - scancode (or zero)
   463                          ; -----------------------------------------------------------------------------
   464                          kbNextScancode:
   465  f3a7 08                         php
   466  f3a8 78                         sei
   467  f3a9 ad8e7c                     lda KB_BUFFER_HEAD
   468  f3ac cd8f7c                     cmp KB_BUFFER_TAIL
   469  f3af f007                       beq @noScancode
   470  f3b1 2067f3                     jsr .kbPopTail
   471  f3b4 28                         plp
   472  f3b5 c900                       cmp #0
   473  f3b7 60                         rts
   474                          
   475                          @noScancode
   476  f3b8 28                         plp
   477  f3b9 a900                       lda #0
   478  f3bb 60                         rts
   479                          
   480                          ; -----------------------------------------------------------------------------
   481                          ; kbScancodeToAscii: Convert a scancode to ascii. shift/caps lock is honoured
   482                          ; Inputs:
   483                          ;    A - scancode (or zero)
   484                          ; Returns:
   485                          ;    A - ascii character
   486                          ;    C - set if valid character in A
   487                          ; -----------------------------------------------------------------------------
   488                          kbScancodeToAscii:
   489  f3bc da                         phx
   490  f3bd 8d877c                     sta KB_TMP_X
   491  f3c0 18                         clc
   492  f3c1 1002                       bpl +
   493  f3c3 fa                         plx
   494  f3c4 60                         rts
   495                          +
   496  f3c5 08                         php
   497  f3c6 78                         sei
   498  f3c7 a202                       ldx #KB_SHIFT_LEFT_MAP_BYTE
   499  f3c9 a920                       lda #KB_SHIFT_LEFT_MAP_BIT
   500  f3cb 3ca07c                     bit KB_PRESSED_MAP, x
   501  f3ce f003                       beq +
   502  f3d0 38                         sec
   503  f3d1 800a                       bra @doneShiftCheck
   504                          +
   505                          
   506  f3d3 a20b                       ldx #KB_SHIFT_RIGHT_MAP_BYTE
   507  f3d5 a940                       lda #KB_SHIFT_RIGHT_MAP_BIT
   508  f3d7 3ca07c                     bit KB_PRESSED_MAP, x
   509  f3da f001                       beq +
   510  f3dc 38                         sec
   511                          +
   512                          
   513                          @doneShiftCheck:
   514  f3dd b008                       bcs @shiftedKeys:
   515  f3df ae877c                     ldx KB_TMP_X
   516  f3e2 bd20f4                     lda KEY_MAP, x
   517  f3e5 8006                       bra @end
   518                          
   519                          @shiftedKeys:
   520  f3e7 ae877c                     ldx KB_TMP_X
   521  f3ea bda0f4                     lda KEY_MAP_SHIFTED, x
   522                          
   523                          @end
   524  f3ed 2018e0                     jsr isAlpha
   525  f3f0 9014                       bcc @afterAlphaCheck
   526  f3f2 8d877c                     sta KB_TMP_X
   527  f3f5 a908                       lda #KB_CAPS_LOCK
   528  f3f7 2d867c                     and KB_FLAGS
   529  f3fa f007                       beq +
   530  f3fc ad877c                     lda KB_TMP_X
   531  f3ff 4920                       eor #$20
   532  f401 8003                       bra @afterAlphaCheck
   533                          +
   534  f403 ad877c                     lda KB_TMP_X
   535                          @afterAlphaCheck
   536  f406 28                         plp
   537  f407 fa                         plx
   538  f408 c9ff                       cmp #$ff
   539  f40a 38                         sec
   540  f40b d001                       bne +
   541  f40d 18                         clc
   542                          +        
   543  f40e 60                         rts
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; kbReadAscii: Read an ASCII caharacter from the keyboard queue
   547                          ; Returns:
   548                          ;    A - ascii character
   549                          ;    C - set if valid character in A
   550                          ; -----------------------------------------------------------------------------
   551                          kbReadAscii:
   552  f40f 08                         php
   553  f410 78                         sei
   554  f411 da                         phx
   555  f412 20a7f3                     jsr kbNextScancode
   556  f415 f005                       beq @noKey
   557  f417 fa                         plx
   558  f418 28                         plp
   559  f419 4cbcf3                     jmp kbScancodeToAscii
   560                          @noKey
   561  f41c fa                         plx
   562  f41d 28                         plp
   563  f41e 18                         clc
   564  f41f 60                         rts
   565                          
   566                          
   567                          KEY_MAP:
   568                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   569  f420 ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$60,$ff; 0
   570  f430 ffffffffff7131ff...!byte $ff,$ff,$ff,$ff,$ff,$71,$31,$ff,$ff,$ff,$7a,$73,$61,$77,$32,$ff; 1
   571  f440 ff637864653433ff...!byte $ff,$63,$78,$64,$65,$34,$33,$ff,$ff,$20,$76,$66,$74,$72,$35,$ff; 2
   572  f450 ff6e6268677936ff...!byte $ff,$6e,$62,$68,$67,$79,$36,$ff,$ff,$ff,$6d,$6a,$75,$37,$38,$ff; 3
   573  f460 ff2c6b696f3039ff...!byte $ff,$2c,$6b,$69,$6f,$30,$39,$ff,$ff,$2e,$2f,$6c,$3b,$70,$2d,$ff; 4
   574  f470 ffff27ff5b3dffff...!byte $ff,$ff,$27,$ff,$5b,$3d,$ff,$ff,$ff,$ff,$0d,$5d,$ff,$5c,$ff,$ff; 5
   575  f480 ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   576  f490 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7
   577                          
   578                          KEY_MAP_SHIFTED:
   579                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   580  f4a0 ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$7e,$ff; 0
   581  f4b0 ffffffffff5121ff...!byte $ff,$ff,$ff,$ff,$ff,$51,$21,$ff,$ff,$ff,$5a,$53,$41,$57,$40,$ff; 1
   582  f4c0 ff435844452423ff...!byte $ff,$43,$58,$44,$45,$24,$23,$ff,$ff,$20,$56,$46,$54,$52,$25,$ff; 2
   583  f4d0 ff4e424847595eff...!byte $ff,$4e,$42,$48,$47,$59,$5e,$ff,$ff,$ff,$4d,$4a,$55,$26,$2a,$ff; 3
   584  f4e0 ff3c4b494f2928ff...!byte $ff,$3c,$4b,$49,$4f,$29,$28,$ff,$ff,$3e,$3f,$4c,$3a,$50,$5f,$ff; 4
   585  f4f0 ffff22ff7b2bffff...!byte $ff,$ff,$22,$ff,$7b,$2b,$ff,$ff,$ff,$ff,$0d,$7d,$ff,$7c,$ff,$ff; 5
   586  f500 ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   587  f510 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7

; ******** Source: kernel.asm
   181                          
   182                          }
   183                          

; ******** Source: ../lib\io\via.asm
     1                          ; 65(C)22 VIA - HBC-56
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef VIA_IO_PORT { VIA_IO_PORT = $f0
    12                                  !warn "VIA_IO_PORT not provided. Defaulting to ", VIA_IO_PORT
    13                          }
    14                          
    15                          !ifndef VIA_RAM_START { VIA_RAM_START = $7d80
    16                                  !warn "VIA_RAM_START not provided. Defaulting to ", VIA_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          VIA_TMP        = VIA_RAM_START
    23                          VIA_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if VIA_RAM_END < (VIA_RAM_START + VIA_RAM_SIZE) {
    27                                  !error "VIA_RAM requires ",VIA_RAM_SIZE," bytes. Allocated ",VIA_RAM_END - VIA_RAM_START
    28                          }
    29                          
    30                          
    31                          VIA_REG_PORT_B  = $00
    32                          VIA_REG_PORT_A  = $01
    33                          VIA_REG_DDR_B   = $02
    34                          VIA_REG_DDR_A   = $03
    35                          VIA_REG_T1C_L   = $04
    36                          VIA_REG_T1C_H   = $05
    37                          VIA_REG_T1L_L   = $06
    38                          VIA_REG_T1L_H   = $07
    39                          VIA_REG_T2C_L   = $08
    40                          VIA_REG_T2C_H   = $09
    41                          VIA_REG_ACR     = $0b
    42                          VIA_REG_IFR     = $0d
    43                          VIA_REG_IER     = $0e
    44                          
    45                          ; IO Ports
    46                          VIA_IO_ADDR     = IO_PORT_BASE_ADDRESS | VIA_IO_PORT
    47                          
    48                          VIA_IO_ADDR_PORT_B      = VIA_IO_ADDR | VIA_REG_PORT_B
    49                          VIA_IO_ADDR_PORT_A      = VIA_IO_ADDR | VIA_REG_PORT_A
    50                          VIA_IO_ADDR_DDR_B       = VIA_IO_ADDR | VIA_REG_DDR_B
    51                          VIA_IO_ADDR_DDR_A       = VIA_IO_ADDR | VIA_REG_DDR_A
    52                          VIA_IO_ADDR_T1C_L       = VIA_IO_ADDR | VIA_REG_T1C_L
    53                          VIA_IO_ADDR_T1C_H       = VIA_IO_ADDR | VIA_REG_T1C_H
    54                          VIA_IO_ADDR_T1L_L       = VIA_IO_ADDR | VIA_REG_T1L_L
    55                          VIA_IO_ADDR_T1L_H       = VIA_IO_ADDR | VIA_REG_T1L_H
    56                          VIA_IO_ADDR_T2C_L       = VIA_IO_ADDR | VIA_REG_T2C_L
    57                          VIA_IO_ADDR_T2C_H       = VIA_IO_ADDR | VIA_REG_T2C_H
    58                          VIA_IO_ADDR_ACR         = VIA_IO_ADDR | VIA_REG_ACR
    59                          VIA_IO_ADDR_IFR         = VIA_IO_ADDR | VIA_REG_IFR
    60                          VIA_IO_ADDR_IER         = VIA_IO_ADDR | VIA_REG_IER
    61                          
    62                          ; Constants
    63                          VIA_DIR_INPUT   = $00
    64                          VIA_DIR_OUTPUT  = $ff
    65                          
    66                          
    67                          
    68                          viaIntHandler:
    69  f520 6ce57c                     jmp (HBC56_VIA_CALLBACK)

; ******** Source: kernel.asm
   184                          
   185                          
   186  f523 6769746875622e63...+hbc56Title "github.com/visrealm/hbc-56"
   187                          

; ******** Source: bootscreen.asm
     1                          ; 6502 - HBC-56 - Memory tests
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; can be anywhere. we own the place at this stage
    12                          LOGO_BUFFER = $3000     
    13                          
    14                          !ifdef HAVE_TMS9918 {
    15                                  HBC56_BORDER     = TMS_DK_BLUE 
    16                                  HBC56_BACKGROUND = TMS_WHITE
    17                                  HBC56_LOGO       = TMS_DK_BLUE 
    18                                  HBC56_TEXT       = TMS_DK_BLUE
    19                          }
    20                          
    21                          !ifdef HBC56_TITLE_TEXT {
    22                                  HBC56_TITLE     = HBC56_TITLE_TEXT
    23                                  HBC56_TITLE_LEN = HBC56_TITLE_TEXT_LEN
    24                          }
    25                          
    26                          .HBC56_PRESS_ANY_KEY_TEXT:
    27  f53e 505245535320414e...        !text "PRESS ANY KEY...",0
    28                          .HBC56_PRESS_ANY_KEY_TEXT_LEN = *-.HBC56_PRESS_ANY_KEY_TEXT-1
    29                          
    30                          .HBC56_PRESS_ANY_NES_TEXT:
    31  f54f 5052455353204120...        !text "PRESS A TO BEGIN...",0
    32                          .HBC56_PRESS_ANY_NES_TEXT_LEN = *-.HBC56_PRESS_ANY_NES_TEXT-1
    33                          
    34                          !ifdef HAVE_GRAPHICS_LCD {
    35  f563 eaeaeaeaeaeaeaea...        !align 255, 0
    36                          hbc56FontLcd:
    37  f600 0000000000000000...        !bin "lcd/fonts/c64-alnum.bin"
    38                          hbc56LogoLcd:
    39  f800 07c01f03ffe003ff...        !bin "res/hbc56lcd.bin"
    40                          }
    41                          
    42                          !ifdef HAVE_TMS9918 {
    43                          hbc56LogoInd:
    44  f900 c8c9cacbcccdcecf...        !bin "res/hbc56boot.ind"
    45                          hbc56LogoPatt:
    46  f942 fefefefefefefefe...        !bin "res/hbc56boot.patt"
    47                          hbc56LogoPattEnd:        
    48                          }
    49                          
    50                          hbc56BootScreen:
    51                          
    52                          !ifdef HAVE_TMS9918 {
    53  faba 0878a9108d117f20...        +tmsSetAddrColorTable 16
    54  facd a94f                       +tmsColorFgBg HBC56_LOGO, HBC56_BACKGROUND
    55  facf a202                       ldx #2
    56  fad1 20b2e6                     jsr _tmsSendX8
    57  fad4 a94f                       +tmsColorFgBg HBC56_TEXT, HBC56_BACKGROUND
    58  fad6 a210                       ldx #16
    59  fad8 2056e7                     jsr tmsInitColorTable
    60                          
    61  fadb 0878a9a58d117f20...        +tmsSetPosWrite 5,5
    62  faee a9008524a9f98525...        +tmsSendData hbc56LogoInd, 22
    63  fafb 0878a9c58d117f20...        +tmsSetPosWrite 5,6
    64  fb0e a9168524a9f98525...        +tmsSendData hbc56LogoInd + 22, 22
    65  fb1b 0878a9e58d117f20...        +tmsSetPosWrite 5,7
    66  fb2e a92c8524a9f98525...        +tmsSendData hbc56LogoInd + 44, 22
    67                          
    68  fb3b 0878a9408d117f20...        +tmsSetAddrPattTable 200
    69  fb4e a9428524a9f98525...        +tmsSendData hbc56LogoPatt, $178
    70                          
    71  fb64 0878a9c88d117f20...        +tmsPrintZ HBC56_META_TITLE, 8, 14
    72                          
    73                          
    74                                  !ifdef HBC56_TITLE_TEXT {
    75  fb82 0878a9c38d117f20...                +tmsPrintZ HBC56_TITLE, (32 - HBC56_TITLE_LEN) / 2, 22
    76                                  }
    77                          
    78  fba0 a9e4                       +tmsColorFgBg TMS_GREY, HBC56_BORDER
    79  fba2 20cfe5                     jsr tmsSetBackground
    80                          }
    81                          
    82                          !ifdef HAVE_LCD {
    83  fba5 20a6ed                     jsr lcdDetect
    84  fba8 907f                       bcc @noLcd
    85                                  !ifdef HAVE_GRAPHICS_LCD {
    86  fbaa 2091ec                             jsr lcdGraphicsMode
    87  fbad a900852ea930852f...                +memset LOGO_BUFFER, $00, 1024
    88  fbc2 a200bd00f89d8030...                +memcpy LOGO_BUFFER + 128, hbc56LogoLcd, 256
    89  fbcf a930                               lda #>LOGO_BUFFER
    90  fbd1 8520                               sta BITMAP_ADDR_H
    91  fbd3 20ceec                             jsr lcdImage
    92                          
    93  fbd6 a280a900ca9d0030...                +memset LOGO_BUFFER, $0, 128
    94  fbe2 a9008518a97b8519...                +tilemapCreateDefault (TILEMAP_SIZE_X_16 | TILEMAP_SIZE_Y_8), hbc56FontLcd-(32*8)
    95  fc0b a280a920ca9d007a...                +memset TILEMAP_DEFAULT_BUFFER_ADDRESS, ' ', 128
    96                          
    97  fc17 a200bdd07c9d407a...                +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*4, HBC56_META_TITLE, 16
    98                          
    99  fc24 a004                               ldy #4
   100  fc26 20d3f0                             jsr tilemapRenderRowToLcd
   101                          
   102                                  } else {
   103                                          !if LCD_ROWS > 2 { +lcdPrint "\n" }
   104                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   105                                          +lcdPrint "     HBC-56\n"
   106                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   107                                          lda #<HBC56_META_TITLE
   108                                          sta STR_ADDR_L
   109                                          lda #>HBC56_META_TITLE
   110                                          sta STR_ADDR_H
   111                                          !if LCD_ROWS = 2 {
   112                                                  jsr lcdLineTwo
   113                                          }                
   114                                          jsr lcdPrint
   115                                          !if LCD_ROWS = 2 {
   116                                                  jsr lcdLineTwo
   117                                          } else {
   118                                                  jsr lcdLineThree
   119                                          }                
   120                                          !if LCD_COLUMNS > 16 { +lcdConsolePrint "  " }
   121                                  }
   122                          @noLcd:
   123                          }
   124  fc29 60                         rts

; ******** Source: kernel.asm
   188                          

; ******** Source: kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: kernel.asm
   189                          

; ******** Source: interrupts.asm
     1                          ; 6502 - HBC-56 Kernel Interrupt Handling
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -------------------------
    12                          ; Interrupts
    13                          ; -------------------------
    14                          TMS9918_IRQ            = 1      ; /INT
    15                          KB_IRQ                 = 2      ; RES1
    16                          UART_IRQ               = 3      ; RES2
    17                          VIA_IRQ                = 5      ; Onboard
    18                          
    19                          TMS9918_IRQ_BIT = (1 << (TMS9918_IRQ - 1))
    20                          KB_IRQ_BIT      = (1 << (KB_IRQ - 1))
    21                          UART_IRQ_BIT    = (1 << (UART_IRQ - 1))
    22                          VIA_IRQ_BIT     = (1 << (VIA_IRQ - 1))
    23                          
    24                          INT_CTRL_ADDRESS    = IO_PORT_BASE_ADDRESS | INT_IO_PORT
    25                          
    26                          ; -----------------------------------------------------------------------------
    27                          ; HBC-56 Interrupt handler
    28                          ; -----------------------------------------------------------------------------
    29                          hbc56IntHandler:
    30  fc2a 48                         pha
    31  fc2b da                         phx
    32  fc2c 5a                         phy
    33                          
    34  fc2d addf7f                     lda INT_CTRL_ADDRESS
    35                          
    36                          !ifdef HAVE_UART {
    37  fc30 8904                       bit #UART_IRQ_BIT
    38  fc32 f005                       beq +
    39  fc34 20a8f1                     jsr uartIrq        
    40  fc37 801e                       bra @endIntHandler
    41                          +
    42                          }
    43                          
    44                          !ifdef HAVE_TMS9918 {
    45  fc39 8901                       bit #TMS9918_IRQ_BIT
    46  fc3b f008                       beq +
    47  fc3d 205bfc                     jsr hbc56Tms9918Int
    48  fc40 2c117f                     +tmsReadStatus
    49  fc43 8012                       bra @endIntHandler
    50                          +
    51                          }
    52                          
    53  fc45 8910                       bit #VIA_IRQ_BIT
    54  fc47 f005                       beq +
    55  fc49 2020f5                     jsr viaIntHandler
    56  fc4c 8009                       bra @endIntHandler
    57                          +
    58                          
    59                          !ifdef HAVE_KEYBOARD {
    60  fc4e 8902                       bit #KB_IRQ_BIT
    61  fc50 f005                       beq +
    62  fc52 2089f2                     jsr kbIntHandler
    63  fc55 8000                       bra @endIntHandler
    64                          +
    65                          }
    66                                  
    67                          @endIntHandler:
    68  fc57 7a                         ply
    69  fc58 fa                         plx
    70  fc59 68                         pla      
    71  fc5a 40                         rti
    72                          
    73                          
    74                          
    75                          ; -----------------------------------------------------------------------------
    76                          ; HBC-56 TMS9918 VSYNC Interrupt handler
    77                          ; -----------------------------------------------------------------------------
    78                          !ifdef HAVE_TMS9918 {
    79                          hbc56Tms9918Int:
    80                          
    81                                  ; update ticks and seconds
    82  fc5b eec97c                     inc HBC56_TICKS
    83  fc5e adc97c                     lda HBC56_TICKS
    84  fc61 c93c                       cmp #TMS_FPS
    85  fc63 d00d                       bne +
    86  fc65 a900                       lda #0
    87  fc67 8dc97c                     sta HBC56_TICKS
    88  fc6a eeca7cd003eecb7c           +inc16 HBC56_SECONDS_L
    89                          +
    90                                  ; "tick" for sfx manager
    91                                  !ifdef HAVE_SFX_MAN {
    92                                          jsr sfxManTick
    93                                  }
    94                          
    95                                  ; handle console if enabled
    96  fc72 2ccd7c                     bit HBC56_CONSOLE_FLAGS
    97  fc75 1003                       bpl +
    98  fc77 207dfc                     jsr .consoleVsyncCallback
    99                          +
   100                          
   101                                  ; rely on callback rts to return
   102  fc7a 6ce37c                     jmp (HBC56_VSYNC_CALLBACK)
   103                          
   104                          
   105                          ; -----------------------------------------------------------------------------
   106                          ; HBC-56 TMS9918 Console update
   107                          ; -----------------------------------------------------------------------------
   108                          .consoleVsyncCallback:
   109                          
   110  fc7d adc97c                     lda HBC56_TICKS
   111  fc80 f007                       beq .doCursor
   112  fc82 c91e                       cmp #30
   113  fc84 f003                       beq .doCursor
   114  fc86 4cb0fc                     jmp @endConsoleCallback
   115                          
   116                          .doCursor:
   117  fc89 8ece7c                     stx HBC56_TMP_X
   118  fc8c 8ccf7c                     sty HBC56_TMP_Y
   119  fc8f 20e7e8                     jsr tmsSetPosConsole
   120  fc92 aece7c                     ldx HBC56_TMP_X
   121  fc95 accf7c                     ldy HBC56_TMP_Y
   122  fc98 adc97c                     lda HBC56_TICKS
   123  fc9b f00b                       beq +
   124  fc9d a920                       lda #' '
   125  fc9f 8d107f2079e5               +tmsPut
   126  fca5 4cb0fc                     jmp @endConsoleCallback
   127                          + 
   128  fca8 a97f                       lda #$7f
   129  fcaa 8d107f2079e5               +tmsPut
   130                          
   131                          @endConsoleCallback
   132                          
   133                          .nullCallbackFunction:
   134  fcb0 60                         rts
   135                          }

; ******** Source: kernel.asm
   190                          
   191                          
   192                          ; -----------------------------------------------------------------------------
   193                          ; HBC-56 Main entry point (reset vector)
   194                          ; -----------------------------------------------------------------------------
   195                          kernelMain:
   196  fcb1 78                         sei
   197  fcb2 d8                         cld     ; make sure we're not in decimal mode
   198  fcb3 a2ff                       ldx #$ff
   199  fcb5 9a                         txs
   200                                  
   201  fcb6 a940                       lda #RTI_OPCODE
   202  fcb8 8d007e                     sta HBC56_INT_VECTOR
   203  fcbb 8d047e                     sta HBC56_NMI_VECTOR
   204                          
   205  fcbe a210a920ca9dd07c...        +memset HBC56_META_TITLE, ' ', HBC56_META_TITLE_MAX_LEN
   206                          
   207  fcca a900                       lda #0
   208  fccc 8dc97c                     sta HBC56_TICKS
   209  fccf 8dca7c                     sta HBC56_SECONDS_L
   210  fcd2 8dcb7c                     sta HBC56_SECONDS_H
   211  fcd5 8dcd7c                     sta HBC56_CONSOLE_FLAGS
   212                          
   213  fcd8 8de07c                     sta HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN
   214                          
   215                          
   216  fcdb 20fcdf                     jsr HBC56_META_VECTOR   ; user program metadata
   217                          
   218                                  !ifdef HAVE_KEYBOARD {
   219  fcde 204ef2                             jsr kbInit
   220                                  }
   221                          
   222                                  !ifdef HAVE_AY3891X {
   223  fce1 2058e1                             jsr ayInit
   224                                  }
   225                          
   226                                  !ifdef HAVE_SFXMAN {
   227                                          jsr sfxManInit  ; requires TMS interrupts
   228                                  }
   229                          
   230                                  !ifdef HAVE_TMS9918 {
   231  fce4 2065e6                             jsr tmsInit
   232                          
   233  fce7 a94020efe5                         +tmsDisableOutput
   234                          
   235                                          ; dummy callback
   236  fcec a9b08de37ca9fc8d...                +hbc56SetVsyncCallback .nullCallbackFunction
   237                                  }
   238                          
   239  fcf6 a9b08de57ca9fc8d...        +hbc56SetViaCallback .nullCallbackFunction
   240                          
   241                                  !ifdef HAVE_LCD {
   242  fd00 20a6ed                             jsr lcdDetect
   243  fd03 900c                               bcc @noLcd1                
   244  fd05 2055ed                             jsr lcdInit
   245  fd08 20e1ff                             jsr hbc56Delay
   246  fd0b 2079ed                             jsr lcdDisplayOn
   247  fd0e 20e1ff                             jsr hbc56Delay
   248                          @noLcd1:
   249                                  }
   250                          
   251  fd11 20bafa                     jsr hbc56BootScreen
   252                          
   253  fd14 a92a8d017ea9fc8d...        +setIntHandler hbc56IntHandler
   254                          
   255                                  !ifdef HAVE_TMS9918 {
   256  fd23 a94020e5e5                         +tmsEnableOutput
   257  fd28 a92020efe5                         +tmsDisableInterrupts
   258                                  }
   259                          
   260  fd2d a914                       lda #20
   261  fd2f 8dcc7c                     sta HBC56_TMP
   262                          -
   263  fd32 20e1ff                     jsr hbc56Delay
   264  fd35 cecc7c                     dec HBC56_TMP
   265  fd38 d0f8                       bne -
   266                                 
   267                                  !ifdef HAVE_TMS9918 {
   268  fd3a a92020e5e5                         +tmsEnableInterrupts
   269                                  }
   270  fd3f 58                         cli
   271                          
   272  fd40 20e5fd                     jsr hbc56HighBell
   273                          
   274  fd43 a910                       lda #HBC56_CONSOLE_FLAG_NOWAIT
   275  fd45 2ccd7c                     bit HBC56_CONSOLE_FLAGS
   276  fd48 d07e                       bne .afterInput
   277                          
   278  fd4a a940                       lda #HBC56_CONSOLE_FLAG_NES
   279  fd4c 2dcd7c                     and HBC56_CONSOLE_FLAGS
   280  fd4f f03d                       beq .keyboardInput
   281                          
   282                          
   283                                  ; NES input
   284  fd51 78                         sei
   285                                  !ifdef HAVE_TMS9918 {
   286  fd52 0878a9268d117f20...                +tmsPrintZ .HBC56_PRESS_ANY_NES_TEXT, (32 - .HBC56_PRESS_ANY_NES_TEXT_LEN) / 2, 17
   287                                  }
   288                          
   289                                  !ifdef HAVE_LCD {
   290  fd70 20a6ed                             jsr lcdDetect
   291  fd73 9012                               bcc @noLcd2
   292                                          !ifdef HAVE_GRAPHICS_LCD {
   293  fd75 a200bd4ff59d607a...                        +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_NES_TEXT, 16
   294  fd82 a006                                       ldy #6
   295  fd84 20d3f0                                     jsr tilemapRenderRowToLcd
   296                                          } else {
   297                                                  lda #<.HBC56_PRESS_ANY_NES_TEXT
   298                                                  sta STR_ADDR_L
   299                                                  lda #>.HBC56_PRESS_ANY_NES_TEXT
   300                                                  sta STR_ADDR_H
   301                                                  jsr lcdPrint
   302                                          }
   303                          @noLcd2:
   304                                  }
   305  fd87 58                         cli
   306  fd88 2031f2                     jsr nesWaitForPress
   307  fd8b 4cc8fd                     jmp .afterInput
   308                          
   309                          .keyboardInput
   310                          !ifdef HAVE_KEYBOARD {
   311                                  ; Keyboard  input
   312  fd8e 78                         sei
   313                                  !ifdef HAVE_TMS9918 {
   314  fd8f 0878a9288d117f20...                +tmsPrintZ .HBC56_PRESS_ANY_KEY_TEXT, (32 - .HBC56_PRESS_ANY_KEY_TEXT_LEN) / 2, 17
   315                                  }
   316                          
   317                                  !ifdef HAVE_LCD {
   318  fdad 20a6ed                             jsr lcdDetect
   319  fdb0 9012                               bcc @noLcd3
   320                                          !ifdef HAVE_GRAPHICS_LCD {
   321  fdb2 a200bd3ef59d607a...                        +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_KEY_TEXT, 16
   322  fdbf a006                                       ldy #6
   323  fdc1 20d3f0                                     jsr tilemapRenderRowToLcd
   324                                          } else {
   325                                                  lda #<.HBC56_PRESS_ANY_KEY_TEXT
   326                                                  sta STR_ADDR_L
   327                                                  lda #>.HBC56_PRESS_ANY_KEY_TEXT
   328                                                  sta STR_ADDR_H
   329                                                  jsr lcdPrint        
   330                                          }
   331                          @noLcd3:
   332                                  }
   333  fdc4 58                         cli
   334  fdc5 2092f3                     jsr kbWaitForScancode
   335                          }
   336                          
   337                          .afterInput
   338                          
   339                                  !ifdef HAVE_LCD {
   340                                          ;jsr lcdDetect
   341                                          ;bcc @noLcd4
   342  fdc8 2055ed                             jsr lcdInit
   343                                          !ifdef HAVE_GRAPHICS_LCD {
   344  fdcb 20a2ec                                     jsr lcdTextMode
   345                                          }
   346  fdce 2067ed                             jsr lcdClear
   347  fdd1 2070ed                             jsr lcdHome
   348                          @noLcd4:
   349                                  }
   350                          
   351                                  !ifdef HAVE_TMS9918 {
   352  fdd4 2039e7                             jsr tmsInitTextTable ; clear output
   353  fdd7 a94020efe5                         +tmsDisableOutput
   354  fddc a92020efe5                         +tmsDisableInterrupts
   355                                  }
   356                                  ; no interrupts until the user code says so
   357  fde1 78                         sei
   358                          
   359  fde2 200080                     jsr DEFAULT_HBC56_RST_VECTOR
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; Beep (higher tone)
   363                          ; -----------------------------------------------------------------------------
   364                          hbc56HighBell:
   365                                  !ifdef HAVE_AY3891X {
   366  fde5 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   367  fdf7 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   368  fe01 a9048d407fa9598d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_F5
   369                                  }
   370  fe15 8032                       bra .noteTimeout
   371                          
   372                          ; -----------------------------------------------------------------------------
   373                          ; Beep (lower tone)
   374                          ; -----------------------------------------------------------------------------
   375                          hbc56Bell:
   376                                  !ifdef HAVE_AY3891X {
   377  fe17 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   378  fe29 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   379  fe33 a9048d407fa97b8d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_E3
   380                                  }
   381  fe47 8000                       bra .noteTimeout
   382                          
   383                          .noteTimeout
   384                                  !ifdef HAVE_SFXMAN {
   385                                          lda HBC56_CONSOLE_FLAGS
   386                                          and #HBC56_CONSOLE_FLAG_LCD
   387                                          bne @skipSfxMan
   388                                          +sfxManSetChannelTimeout  AY_PSG0, AY_CHC, 0.16
   389                                          rts
   390                                  }
   391                          @skipSfxMan
   392                                  !ifdef HAVE_AY3891X {
   393  fe49 20e1ff                             jsr hbc56Delay
   394  fe4c 20e1ff                             jsr hbc56Delay
   395  fe4f a9048d407fa9008d...                +ayStop AY_PSG0, AY_CHC
   396                                  }
   397                          
   398  fe63 60                         rts
   399                          
   400                          ; -----------------------------------------------------------------------------
   401                          ; Software reset
   402                          ; -----------------------------------------------------------------------------
   403                          hbc56Reset:
   404  fe64 4cb1fc                     jmp kernelMain
   405                          
   406                          ; -----------------------------------------------------------------------------
   407                          ; Stop (loop forever)
   408                          ; -----------------------------------------------------------------------------
   409                          hbc56Stop:
   410  fe67 cb                         wai
   411  fe68 4c67fe                     jmp hbc56Stop
   412                          
   413                          ; -----------------------------------------------------------------------------
   414                          ; Delay function
   415                          ; -----------------------------------------------------------------------------
   416                          hbc56CustomDelayMs:
   417  fe6b e637                       inc DELAY_H
   418                          -
   419  fe6d a003                       ldy #3
   420  fe6f 20e3ff                     jsr hbc56CustomDelay
   421  fe72 c636                       dec DELAY_L
   422  fe74 d0f7                       bne -
   423  fe76 a900                       lda #0
   424  fe78 8536                       sta DELAY_L
   425  fe7a c637                       dec DELAY_H
   426  fe7c d0ef                       bne -
   427  fe7e 60                         rts
   428                          
   429                          
   430                          ;!warn "Kernel size: ", *-$f000
